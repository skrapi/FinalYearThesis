
Treadmill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005160  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080052e8  080052e8  000152e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000168  20000000  080054c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
  7 .bss          0000010c  20000168  20000168  00020168  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000274  20000274  00020168  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a756  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001a9b  00000000  00000000  0002a8ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ae8  00000000  00000000  0002c390  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009d0  00000000  00000000  0002ce78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000042f8  00000000  00000000  0002d848  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000034aa  00000000  00000000  00031b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00034fea  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000031fc  00000000  00000000  00035068  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00038264  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000168 	.word	0x20000168
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052d0 	.word	0x080052d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000016c 	.word	0x2000016c
 80001c4:	080052d0 	.word	0x080052d0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73bb      	strb	r3, [r7, #14]
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	78db      	ldrb	r3, [r3, #3]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d039      	beq.n	8000bec <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <NVIC_Init+0xbc>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	f1c3 0304 	rsb	r3, r3, #4
 8000b8e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000b90:	7b7a      	ldrb	r2, [r7, #13]
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	fa42 f303 	asr.w	r3, r2, r3
 8000b98:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	785b      	ldrb	r3, [r3, #1]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	7bbb      	ldrb	r3, [r7, #14]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	789a      	ldrb	r2, [r3, #2]
 8000bac:	7b7b      	ldrb	r3, [r7, #13]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <NVIC_Init+0xc0>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	7bfa      	ldrb	r2, [r7, #15]
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bcc:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <NVIC_Init+0xc0>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	f003 031f 	and.w	r3, r3, #31
 8000be0:	2101      	movs	r1, #1
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000be6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000bea:	e00f      	b.n	8000c0c <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bec:	490b      	ldr	r1, [pc, #44]	; (8000c1c <NVIC_Init+0xc0>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	f003 031f 	and.w	r3, r3, #31
 8000c00:	2201      	movs	r2, #1
 8000c02:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c04:	f100 0320 	add.w	r3, r0, #32
 8000c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <CRC_ResetDR+0x14>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	609a      	str	r2, [r3, #8]
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	40023000 	.word	0x40023000

08000c38 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <DMA_Init+0xac>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000c62:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c6e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	6a1b      	ldr	r3, [r3, #32]
 8000c74:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c7a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000c86:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f023 0307 	bic.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	691a      	ldr	r2, [r3, #16]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60da      	str	r2, [r3, #12]
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	f01c803f 	.word	0xf01c803f

08000ce8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d006      	beq.n	8000d08 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f043 0201 	orr.w	r2, r3, #1
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000d06:	e005      	b.n	8000d14 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f023 0201 	bic.w	r2, r3, #1
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	e001      	b.n	8000d42 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d00f      	beq.n	8000d88 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d006      	beq.n	8000d7c <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	615a      	str	r2, [r3, #20]
 8000d7a:	e005      	b.n	8000d88 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	2b80      	cmp	r3, #128	; 0x80
 8000d8c:	d014      	beq.n	8000db8 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d008      	beq.n	8000da6 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	f003 031e 	and.w	r3, r3, #30
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000da4:	e008      	b.n	8000db8 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	f003 031e 	and.w	r3, r3, #30
 8000db0:	43db      	mvns	r3, r3
 8000db2:	401a      	ands	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	601a      	str	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <DMA_ClearITPendingBit+0x50>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d802      	bhi.n	8000ddc <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <DMA_ClearITPendingBit+0x54>)
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	e001      	b.n	8000de0 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <DMA_ClearITPendingBit+0x58>)
 8000dde:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d007      	beq.n	8000dfa <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000df0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8000df8:	e006      	b.n	8000e08 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000e00:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	6093      	str	r3, [r2, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	4002640f 	.word	0x4002640f
 8000e18:	40026000 	.word	0x40026000
 8000e1c:	40026400 	.word	0x40026400

08000e20 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e076      	b.n	8000f2a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d165      	bne.n	8000f24 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2103      	movs	r1, #3
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	401a      	ands	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	791b      	ldrb	r3, [r3, #4]
 8000e76:	4619      	mov	r1, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	431a      	orrs	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	791b      	ldrb	r3, [r3, #4]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d003      	beq.n	8000e96 <GPIO_Init+0x76>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	791b      	ldrb	r3, [r3, #4]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d12e      	bne.n	8000ef4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2103      	movs	r1, #3
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	795b      	ldrb	r3, [r3, #5]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2301      	movs	r3, #1
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	7992      	ldrb	r2, [r2, #6]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eec:	b292      	uxth	r2, r2
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2103      	movs	r1, #3
 8000f00:	fa01 f303 	lsl.w	r3, r1, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	401a      	ands	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	79db      	ldrb	r3, [r3, #7]
 8000f14:	4619      	mov	r1, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	3301      	adds	r3, #1
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d985      	bls.n	8000e3c <GPIO_Init+0x1c>
    }
  }
}
 8000f30:	bf00      	nop
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	71da      	strb	r2, [r3, #7]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000f88:	787a      	ldrb	r2, [r7, #1]
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fb0:	887b      	ldrh	r3, [r7, #2]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	210f      	movs	r1, #15
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	ea02 0103 	and.w	r1, r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f100 0208 	add.w	r2, r0, #8
 8000fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	08db      	lsrs	r3, r3, #3
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <I2C_DeInit+0x68>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d10a      	bne.n	800102a <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001014:	2101      	movs	r1, #1
 8001016:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800101a:	f000 faf7 	bl	800160c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800101e:	2100      	movs	r1, #0
 8001020:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001024:	f000 faf2 	bl	800160c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8001028:	e01c      	b.n	8001064 <I2C_DeInit+0x60>
  else if (I2Cx == I2C2)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a10      	ldr	r2, [pc, #64]	; (8001070 <I2C_DeInit+0x6c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10a      	bne.n	8001048 <I2C_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001032:	2101      	movs	r1, #1
 8001034:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001038:	f000 fae8 	bl	800160c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800103c:	2100      	movs	r1, #0
 800103e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001042:	f000 fae3 	bl	800160c <RCC_APB1PeriphResetCmd>
}
 8001046:	e00d      	b.n	8001064 <I2C_DeInit+0x60>
    if (I2Cx == I2C3)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <I2C_DeInit+0x70>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d109      	bne.n	8001064 <I2C_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8001050:	2101      	movs	r1, #1
 8001052:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001056:	f000 fad9 	bl	800160c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800105a:	2100      	movs	r1, #0
 800105c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001060:	f000 fad4 	bl	800160c <RCC_APB1PeriphResetCmd>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40005400 	.word	0x40005400
 8001070:	40005800 	.word	0x40005800
 8001074:	40005c00 	.word	0x40005c00

08001078 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001086:	2300      	movs	r3, #0
 8001088:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800108a:	2304      	movs	r3, #4
 800108c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800108e:	4b57      	ldr	r3, [pc, #348]	; (80011ec <I2C_Init+0x174>)
 8001090:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	889b      	ldrh	r3, [r3, #4]
 8001096:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800109a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800109e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f9a9 	bl	80013fc <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	4a4f      	ldr	r2, [pc, #316]	; (80011f0 <I2C_Init+0x178>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	0c9b      	lsrs	r3, r3, #18
 80010b8:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80010ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010be:	4313      	orrs	r3, r2
 80010c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010c6:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f023 0301 	bic.w	r3, r3, #1
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a44      	ldr	r2, [pc, #272]	; (80011f4 <I2C_Init+0x17c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d815      	bhi.n	8001112 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	69fa      	ldr	r2, [r7, #28]
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80010f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d801      	bhi.n	80010fe <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80010fa:	2304      	movs	r3, #4
 80010fc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80010fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001102:	4313      	orrs	r3, r2
 8001104:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001108:	3301      	adds	r3, #1
 800110a:	b29a      	uxth	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	841a      	strh	r2, [r3, #32]
 8001110:	e040      	b.n	8001194 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	88db      	ldrh	r3, [r3, #6]
 8001116:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800111a:	4293      	cmp	r3, r2
 800111c:	d109      	bne.n	8001132 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001130:	e00e      	b.n	8001150 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	009a      	lsls	r2, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800114a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800115a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001164:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001166:	4313      	orrs	r3, r2
 8001168:	b29b      	uxth	r3, r3
 800116a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800116e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001172:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001174:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001176:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800117a:	fb02 f303 	mul.w	r3, r2, r3
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <I2C_Init+0x180>)
 8001180:	fb82 1203 	smull	r1, r2, r2, r3
 8001184:	1192      	asrs	r2, r2, #6
 8001186:	17db      	asrs	r3, r3, #31
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	b29b      	uxth	r3, r3
 800118c:	3301      	adds	r3, #1
 800118e:	b29a      	uxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001198:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80011b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011b2:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80011b6:	f023 0302 	bic.w	r3, r3, #2
 80011ba:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	889a      	ldrh	r2, [r3, #4]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	895b      	ldrh	r3, [r3, #10]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011ca:	4313      	orrs	r3, r2
 80011cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011d2:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	899a      	ldrh	r2, [r3, #12]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	891b      	ldrh	r3, [r3, #8]
 80011dc:	4313      	orrs	r3, r2
 80011de:	b29a      	uxth	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	811a      	strh	r2, [r3, #8]
}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	007a1200 	.word	0x007a1200
 80011f0:	431bde83 	.word	0x431bde83
 80011f4:	000186a0 	.word	0x000186a0
 80011f8:	10624dd3 	.word	0x10624dd3

080011fc <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d008      	beq.n	8001220 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	b29a      	uxth	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 800121e:	e007      	b.n	8001230 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	801a      	strh	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d008      	beq.n	8001260 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 800125e:	e007      	b.n	8001270 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	b29b      	uxth	r3, r3
 8001266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	801a      	strh	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d008      	beq.n	80012a0 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001298:	b29a      	uxth	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 800129e:	e007      	b.n	80012b0 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	801a      	strh	r2, [r3, #0]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
 80012c8:	4613      	mov	r3, r2
 80012ca:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80012cc:	78bb      	ldrb	r3, [r7, #2]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <I2C_Send7bitAddress+0x22>
  {
    /* Set the address bit0 for read */
    Address = (uint8_t)((Address<<1)+1);
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	3301      	adds	r3, #1
 80012da:	70fb      	strb	r3, [r7, #3]
 80012dc:	e002      	b.n	80012e4 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
	  Address = (uint8_t)((Address<<1)+0);
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	821a      	strh	r2, [r3, #16]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	b29a      	uxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	821a      	strh	r2, [r3, #16]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	8a1b      	ldrh	r3, [r3, #16]
 8001324:	b29b      	uxth	r3, r3
 8001326:	b2db      	uxtb	r3, r3
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	8a9b      	ldrh	r3, [r3, #20]
 8001352:	b29b      	uxth	r3, r3
 8001354:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	8b1b      	ldrh	r3, [r3, #24]
 800135a:	b29b      	uxth	r3, r3
 800135c:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	041b      	lsls	r3, r3, #16
 8001362:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	4313      	orrs	r3, r2
 800136a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800136e:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	401a      	ands	r2, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d102      	bne.n	8001382 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800137c:	2301      	movs	r3, #1
 800137e:	75fb      	strb	r3, [r7, #23]
 8001380:	e001      	b.n	8001386 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001382:	2300      	movs	r3, #0
 8001384:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001386:	7dfb      	ldrb	r3, [r7, #23]
}
 8001388:	4618      	mov	r0, r3
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	0f1b      	lsrs	r3, r3, #28
 80013b2:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80013ba:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3314      	adds	r3, #20
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e005      	b.n	80013d6 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	0c1b      	lsrs	r3, r3, #16
 80013ce:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3318      	adds	r3, #24
 80013d4:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80013e2:	2301      	movs	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
 80013e6:	e001      	b.n	80013ec <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	2302      	movs	r3, #2
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	2302      	movs	r3, #2
 800141a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800141c:	4b47      	ldr	r3, [pc, #284]	; (800153c <RCC_GetClocksFreq+0x140>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d007      	beq.n	800143c <RCC_GetClocksFreq+0x40>
 800142c:	2b08      	cmp	r3, #8
 800142e:	d009      	beq.n	8001444 <RCC_GetClocksFreq+0x48>
 8001430:	2b00      	cmp	r3, #0
 8001432:	d13d      	bne.n	80014b0 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a42      	ldr	r2, [pc, #264]	; (8001540 <RCC_GetClocksFreq+0x144>)
 8001438:	601a      	str	r2, [r3, #0]
      break;
 800143a:	e03d      	b.n	80014b8 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a41      	ldr	r2, [pc, #260]	; (8001544 <RCC_GetClocksFreq+0x148>)
 8001440:	601a      	str	r2, [r3, #0]
      break;
 8001442:	e039      	b.n	80014b8 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001444:	4b3d      	ldr	r3, [pc, #244]	; (800153c <RCC_GetClocksFreq+0x140>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	0d9b      	lsrs	r3, r3, #22
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001450:	4b3a      	ldr	r3, [pc, #232]	; (800153c <RCC_GetClocksFreq+0x140>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001458:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00c      	beq.n	800147a <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001460:	4a38      	ldr	r2, [pc, #224]	; (8001544 <RCC_GetClocksFreq+0x148>)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	fbb2 f3f3 	udiv	r3, r2, r3
 8001468:	4a34      	ldr	r2, [pc, #208]	; (800153c <RCC_GetClocksFreq+0x140>)
 800146a:	6852      	ldr	r2, [r2, #4]
 800146c:	0992      	lsrs	r2, r2, #6
 800146e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	e00b      	b.n	8001492 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800147a:	4a31      	ldr	r2, [pc, #196]	; (8001540 <RCC_GetClocksFreq+0x144>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4a2e      	ldr	r2, [pc, #184]	; (800153c <RCC_GetClocksFreq+0x140>)
 8001484:	6852      	ldr	r2, [r2, #4]
 8001486:	0992      	lsrs	r2, r2, #6
 8001488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800148c:	fb02 f303 	mul.w	r3, r2, r3
 8001490:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001492:	4b2a      	ldr	r3, [pc, #168]	; (800153c <RCC_GetClocksFreq+0x140>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	0c1b      	lsrs	r3, r3, #16
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	3301      	adds	r3, #1
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
      break;
 80014ae:	e003      	b.n	80014b8 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a23      	ldr	r2, [pc, #140]	; (8001540 <RCC_GetClocksFreq+0x144>)
 80014b4:	601a      	str	r2, [r3, #0]
      break;
 80014b6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80014b8:	4b20      	ldr	r3, [pc, #128]	; (800153c <RCC_GetClocksFreq+0x140>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014c0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80014c8:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <RCC_GetClocksFreq+0x14c>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4413      	add	r3, r2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	40da      	lsrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <RCC_GetClocksFreq+0x140>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80014e8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	0a9b      	lsrs	r3, r3, #10
 80014ee:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80014f0:	4a15      	ldr	r2, [pc, #84]	; (8001548 <RCC_GetClocksFreq+0x14c>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	40da      	lsrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <RCC_GetClocksFreq+0x140>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001510:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	0b5b      	lsrs	r3, r3, #13
 8001516:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <RCC_GetClocksFreq+0x14c>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	40da      	lsrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	60da      	str	r2, [r3, #12]
}
 8001530:	bf00      	nop
 8001532:	3724      	adds	r7, #36	; 0x24
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40023800 	.word	0x40023800
 8001540:	00f42400 	.word	0x00f42400
 8001544:	007a1200 	.word	0x007a1200
 8001548:	20000000 	.word	0x20000000

0800154c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d006      	beq.n	800156c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800155e:	490a      	ldr	r1, [pc, #40]	; (8001588 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4313      	orrs	r3, r2
 8001568:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800156a:	e006      	b.n	800157a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800156c:	4906      	ldr	r1, [pc, #24]	; (8001588 <RCC_AHB1PeriphClockCmd+0x3c>)
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	43db      	mvns	r3, r3
 8001576:	4013      	ands	r3, r2
 8001578:	630b      	str	r3, [r1, #48]	; 0x30
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800159e:	490a      	ldr	r1, [pc, #40]	; (80015c8 <RCC_APB1PeriphClockCmd+0x3c>)
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <RCC_APB1PeriphClockCmd+0x3c>)
 80015a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80015aa:	e006      	b.n	80015ba <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80015ac:	4906      	ldr	r1, [pc, #24]	; (80015c8 <RCC_APB1PeriphClockCmd+0x3c>)
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <RCC_APB1PeriphClockCmd+0x3c>)
 80015b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	4013      	ands	r3, r2
 80015b8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800

080015cc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80015de:	490a      	ldr	r1, [pc, #40]	; (8001608 <RCC_APB2PeriphClockCmd+0x3c>)
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <RCC_APB2PeriphClockCmd+0x3c>)
 80015e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80015ea:	e006      	b.n	80015fa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80015ec:	4906      	ldr	r1, [pc, #24]	; (8001608 <RCC_APB2PeriphClockCmd+0x3c>)
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <RCC_APB2PeriphClockCmd+0x3c>)
 80015f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4013      	ands	r3, r2
 80015f8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800161e:	490a      	ldr	r1, [pc, #40]	; (8001648 <RCC_APB1PeriphResetCmd+0x3c>)
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <RCC_APB1PeriphResetCmd+0x3c>)
 8001622:	6a1a      	ldr	r2, [r3, #32]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4313      	orrs	r3, r2
 8001628:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800162a:	e006      	b.n	800163a <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800162c:	4906      	ldr	r1, [pc, #24]	; (8001648 <RCC_APB1PeriphResetCmd+0x3c>)
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <RCC_APB1PeriphResetCmd+0x3c>)
 8001630:	6a1a      	ldr	r2, [r3, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	43db      	mvns	r3, r3
 8001636:	4013      	ands	r3, r2
 8001638:	620b      	str	r3, [r1, #32]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a29      	ldr	r2, [pc, #164]	; (8001708 <TIM_TimeBaseInit+0xbc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d013      	beq.n	8001690 <TIM_TimeBaseInit+0x44>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a28      	ldr	r2, [pc, #160]	; (800170c <TIM_TimeBaseInit+0xc0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d00f      	beq.n	8001690 <TIM_TimeBaseInit+0x44>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001676:	d00b      	beq.n	8001690 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a25      	ldr	r2, [pc, #148]	; (8001710 <TIM_TimeBaseInit+0xc4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d007      	beq.n	8001690 <TIM_TimeBaseInit+0x44>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a24      	ldr	r2, [pc, #144]	; (8001714 <TIM_TimeBaseInit+0xc8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d003      	beq.n	8001690 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a23      	ldr	r2, [pc, #140]	; (8001718 <TIM_TimeBaseInit+0xcc>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d108      	bne.n	80016a2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001696:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	885a      	ldrh	r2, [r3, #2]
 800169c:	89fb      	ldrh	r3, [r7, #14]
 800169e:	4313      	orrs	r3, r2
 80016a0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a1d      	ldr	r2, [pc, #116]	; (800171c <TIM_TimeBaseInit+0xd0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00c      	beq.n	80016c4 <TIM_TimeBaseInit+0x78>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <TIM_TimeBaseInit+0xd4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d008      	beq.n	80016c4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80016b2:	89fb      	ldrh	r3, [r7, #14]
 80016b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016b8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	891a      	ldrh	r2, [r3, #8]
 80016be:	89fb      	ldrh	r3, [r7, #14]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	89fa      	ldrh	r2, [r7, #14]
 80016c8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	881a      	ldrh	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <TIM_TimeBaseInit+0xbc>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d003      	beq.n	80016ea <TIM_TimeBaseInit+0x9e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a09      	ldr	r2, [pc, #36]	; (800170c <TIM_TimeBaseInit+0xc0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d104      	bne.n	80016f4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	7a9b      	ldrb	r3, [r3, #10]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	829a      	strh	r2, [r3, #20]
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40010000 	.word	0x40010000
 800170c:	40010400 	.word	0x40010400
 8001710:	40000400 	.word	0x40000400
 8001714:	40000800 	.word	0x40000800
 8001718:	40000c00 	.word	0x40000c00
 800171c:	40001000 	.word	0x40001000
 8001720:	40001400 	.word	0x40001400

08001724 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f04f 32ff 	mov.w	r2, #4294967295
 8001732:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	729a      	strb	r2, [r3, #10]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d008      	beq.n	80017b0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80017ae:	e007      	b.n	80017c0 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	801a      	strh	r2, [r3, #0]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
 80017d8:	4613      	mov	r3, r2
 80017da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80017dc:	787b      	ldrb	r3, [r7, #1]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d008      	beq.n	80017f4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	899b      	ldrh	r3, [r3, #12]
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	887b      	ldrh	r3, [r7, #2]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80017f2:	e009      	b.n	8001808 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	899b      	ldrh	r3, [r3, #12]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4013      	ands	r3, r2
 8001802:	b29a      	uxth	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	819a      	strh	r2, [r3, #12]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001820:	887b      	ldrh	r3, [r7, #2]
 8001822:	43db      	mvns	r3, r3
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	821a      	strh	r2, [r3, #16]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8001836:	b480      	push	{r7}
 8001838:	b087      	sub	sp, #28
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	4608      	mov	r0, r1
 8001840:	4611      	mov	r1, r2
 8001842:	461a      	mov	r2, r3
 8001844:	4603      	mov	r3, r0
 8001846:	817b      	strh	r3, [r7, #10]
 8001848:	460b      	mov	r3, r1
 800184a:	813b      	strh	r3, [r7, #8]
 800184c:	4613      	mov	r3, r2
 800184e:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	891b      	ldrh	r3, [r3, #8]
 8001860:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8b1b      	ldrh	r3, [r3, #24]
 8001866:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8c1b      	ldrh	r3, [r3, #32]
 800186c:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800186e:	8afb      	ldrh	r3, [r7, #22]
 8001870:	f023 0307 	bic.w	r3, r3, #7
 8001874:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8001876:	8afa      	ldrh	r2, [r7, #22]
 8001878:	897b      	ldrh	r3, [r7, #10]
 800187a:	4313      	orrs	r3, r2
 800187c:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800187e:	8abb      	ldrh	r3, [r7, #20]
 8001880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001884:	f023 0303 	bic.w	r3, r3, #3
 8001888:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800188a:	8abb      	ldrh	r3, [r7, #20]
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8001896:	8a7b      	ldrh	r3, [r7, #18]
 8001898:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800189c:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	893b      	ldrh	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	8a7b      	ldrh	r3, [r7, #18]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8afa      	ldrh	r2, [r7, #22]
 80018b4:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8aba      	ldrh	r2, [r7, #20]
 80018ba:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8a7a      	ldrh	r2, [r7, #18]
 80018c0:	841a      	strh	r2, [r3, #32]
}
 80018c2:	bf00      	nop
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	8a1b      	ldrh	r3, [r3, #16]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	88db      	ldrh	r3, [r3, #6]
 80018fe:	461a      	mov	r2, r3
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	4313      	orrs	r3, r2
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	b29a      	uxth	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	899b      	ldrh	r3, [r3, #12]
 8001912:	b29b      	uxth	r3, r3
 8001914:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800191c:	f023 030c 	bic.w	r3, r3, #12
 8001920:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	889a      	ldrh	r2, [r3, #4]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	891b      	ldrh	r3, [r3, #8]
 800192a:	4313      	orrs	r3, r2
 800192c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001932:	4313      	orrs	r3, r2
 8001934:	b29b      	uxth	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	4313      	orrs	r3, r2
 800193c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	b29a      	uxth	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	8a9b      	ldrh	r3, [r3, #20]
 800194a:	b29b      	uxth	r3, r3
 800194c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001954:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	899b      	ldrh	r3, [r3, #12]
 800195a:	461a      	mov	r2, r3
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	4313      	orrs	r3, r2
 8001960:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	b29a      	uxth	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fd44 	bl	80013fc <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a30      	ldr	r2, [pc, #192]	; (8001a38 <USART_Init+0x168>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d003      	beq.n	8001984 <USART_Init+0xb4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a2f      	ldr	r2, [pc, #188]	; (8001a3c <USART_Init+0x16c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d102      	bne.n	800198a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	623b      	str	r3, [r7, #32]
 8001988:	e001      	b.n	800198e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	899b      	ldrh	r3, [r3, #12]
 8001992:	b29b      	uxth	r3, r3
 8001994:	b21b      	sxth	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	da0c      	bge.n	80019b4 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800199a:	6a3a      	ldr	r2, [r7, #32]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	009a      	lsls	r2, r3, #2
 80019a4:	441a      	add	r2, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e00b      	b.n	80019cc <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80019b4:	6a3a      	ldr	r2, [r7, #32]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	009a      	lsls	r2, r3, #2
 80019be:	441a      	add	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	4a1c      	ldr	r2, [pc, #112]	; (8001a40 <USART_Init+0x170>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	095b      	lsrs	r3, r3, #5
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	2264      	movs	r2, #100	; 0x64
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	899b      	ldrh	r3, [r3, #12]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da0c      	bge.n	8001a10 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	3332      	adds	r3, #50	; 0x32
 80019fc:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <USART_Init+0x170>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0e:	e00b      	b.n	8001a28 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	3332      	adds	r3, #50	; 0x32
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <USART_Init+0x170>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	095b      	lsrs	r3, r3, #5
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a24:	4313      	orrs	r3, r2
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	811a      	strh	r2, [r3, #8]
}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40011000 	.word	0x40011000
 8001a3c:	40011400 	.word	0x40011400
 8001a40:	51eb851f 	.word	0x51eb851f

08001a44 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d008      	beq.n	8001a68 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	899b      	ldrh	r3, [r3, #12]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001a66:	e007      	b.n	8001a78 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	899b      	ldrh	r3, [r3, #12]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	819a      	strh	r2, [r3, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	8a9b      	ldrh	r3, [r3, #20]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 8001aaa:	e009      	b.n	8001ac0 <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	8a9b      	ldrh	r3, [r3, #20]
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	4013      	ands	r3, r2
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	829a      	strh	r2, [r3, #20]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <X_Predict>:
float I[9] = {1, 0, 0,
			  0, 1, 0,
			  0, 0, 1};


void X_Predict(void){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af04      	add	r7, sp, #16
	//X + 1/sample_rate * [X(2);X(3);0];
	matrix_multi_3(F,3,3,X,3,1,X);
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <X_Predict+0x24>)
 8001ad4:	9302      	str	r3, [sp, #8]
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	2303      	movs	r3, #3
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <X_Predict+0x24>)
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	4803      	ldr	r0, [pc, #12]	; (8001af4 <X_Predict+0x28>)
 8001ae6:	f000 fd0e 	bl	8002506 <matrix_multi_3>
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000184 	.word	0x20000184
 8001af4:	20000034 	.word	0x20000034

08001af8 <P_Predict>:

void P_Predict(void){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08e      	sub	sp, #56	; 0x38
 8001afc:	af04      	add	r7, sp, #16
	//predicted_P = F * P * transpose(F) + Q;
	float temp[9];

	// F * P
	matrix_multi_3(F,3,3,P,3,3,temp);
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	9302      	str	r3, [sp, #8]
 8001b02:	2303      	movs	r3, #3
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	2303      	movs	r3, #3
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <P_Predict+0x50>)
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	2103      	movs	r1, #3
 8001b10:	480e      	ldr	r0, [pc, #56]	; (8001b4c <P_Predict+0x54>)
 8001b12:	f000 fcf8 	bl	8002506 <matrix_multi_3>
	// (F*P) * Ft
	matrix_multi_3(temp,3,3,Ft,3,3,temp);
 8001b16:	1d38      	adds	r0, r7, #4
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	2303      	movs	r3, #3
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <P_Predict+0x58>)
 8001b26:	2203      	movs	r2, #3
 8001b28:	2103      	movs	r1, #3
 8001b2a:	f000 fcec 	bl	8002506 <matrix_multi_3>
	// (F*P) * Ft + Q
	matrix_add(temp,Q,3,3,P);
 8001b2e:	1d38      	adds	r0, r7, #4
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <P_Predict+0x50>)
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2303      	movs	r3, #3
 8001b36:	2203      	movs	r2, #3
 8001b38:	4906      	ldr	r1, [pc, #24]	; (8001b54 <P_Predict+0x5c>)
 8001b3a:	f000 fbb2 	bl	80022a2 <matrix_add>
}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	; 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000010 	.word	0x20000010
 8001b4c:	20000034 	.word	0x20000034
 8001b50:	20000058 	.word	0x20000058
 8001b54:	2000007c 	.word	0x2000007c

08001b58 <Z_Pack>:

void Z_Pack( float vals[4]){
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
//    Z = [   double(acc_norm);...
//            double(acc_tang);...
//            double(gyro_vel);...
//            double(count)];

	Z[0] = vals[0];
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <Z_Pack+0x34>)
 8001b66:	6013      	str	r3, [r2, #0]
	Z[1] = vals[1];
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <Z_Pack+0x34>)
 8001b6e:	6053      	str	r3, [r2, #4]
	Z[2] = vals[2];
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <Z_Pack+0x34>)
 8001b76:	6093      	str	r3, [r2, #8]
	Z[3] = vals[3];
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <Z_Pack+0x34>)
 8001b7e:	60d3      	str	r3, [r2, #12]

}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	20000190 	.word	0x20000190

08001b90 <H_Pack>:

void H_Pack(void){
 8001b90:	b5b0      	push	{r4, r5, r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	H[0] = -(X[1] * X[1]) * IMU_RADIUS / GRAVITY + (float)cos(X[0]);
 8001b94:	4b54      	ldr	r3, [pc, #336]	; (8001ce8 <H_Pack+0x158>)
 8001b96:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b9a:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <H_Pack+0x158>)
 8001b9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba4:	eef1 7a67 	vneg.f32	s15, s15
 8001ba8:	ee17 3a90 	vmov	r3, s15
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fc6f 	bl	8000490 <__aeabi_f2d>
 8001bb2:	a345      	add	r3, pc, #276	; (adr r3, 8001cc8 <H_Pack+0x138>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	f7fe fcbe 	bl	8000538 <__aeabi_dmul>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	a342      	add	r3, pc, #264	; (adr r3, 8001cd0 <H_Pack+0x140>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fddf 	bl	800078c <__aeabi_ddiv>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	4625      	mov	r5, r4
 8001bd4:	461c      	mov	r4, r3
 8001bd6:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <H_Pack+0x158>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fc58 	bl	8000490 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	ec43 2b10 	vmov	d0, r2, r3
 8001be8:	f002 faea 	bl	80041c0 <cos>
 8001bec:	ec53 2b10 	vmov	r2, r3, d0
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7fe ff62 	bl	8000abc <__aeabi_d2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fc48 	bl	8000490 <__aeabi_f2d>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4620      	mov	r0, r4
 8001c06:	4629      	mov	r1, r5
 8001c08:	f7fe fae4 	bl	80001d4 <__adddf3>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	460c      	mov	r4, r1
 8001c10:	4618      	mov	r0, r3
 8001c12:	4621      	mov	r1, r4
 8001c14:	f7fe ff52 	bl	8000abc <__aeabi_d2f>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b34      	ldr	r3, [pc, #208]	; (8001cec <H_Pack+0x15c>)
 8001c1c:	601a      	str	r2, [r3, #0]
	H[1] = -IMU_RADIUS * X[2] / GRAVITY + (float)sin(X[0]);
 8001c1e:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <H_Pack+0x158>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fc34 	bl	8000490 <__aeabi_f2d>
 8001c28:	a32b      	add	r3, pc, #172	; (adr r3, 8001cd8 <H_Pack+0x148>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f7fe fc83 	bl	8000538 <__aeabi_dmul>
 8001c32:	4603      	mov	r3, r0
 8001c34:	460c      	mov	r4, r1
 8001c36:	4618      	mov	r0, r3
 8001c38:	4621      	mov	r1, r4
 8001c3a:	a325      	add	r3, pc, #148	; (adr r3, 8001cd0 <H_Pack+0x140>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe fda4 	bl	800078c <__aeabi_ddiv>
 8001c44:	4603      	mov	r3, r0
 8001c46:	460c      	mov	r4, r1
 8001c48:	4625      	mov	r5, r4
 8001c4a:	461c      	mov	r4, r3
 8001c4c:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <H_Pack+0x158>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc1d 	bl	8000490 <__aeabi_f2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	ec43 2b10 	vmov	d0, r2, r3
 8001c5e:	f002 faf3 	bl	8004248 <sin>
 8001c62:	ec53 2b10 	vmov	r2, r3, d0
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ff27 	bl	8000abc <__aeabi_d2f>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc0d 	bl	8000490 <__aeabi_f2d>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	f7fe faa9 	bl	80001d4 <__adddf3>
 8001c82:	4603      	mov	r3, r0
 8001c84:	460c      	mov	r4, r1
 8001c86:	4618      	mov	r0, r3
 8001c88:	4621      	mov	r1, r4
 8001c8a:	f7fe ff17 	bl	8000abc <__aeabi_d2f>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <H_Pack+0x15c>)
 8001c92:	605a      	str	r2, [r3, #4]
	H[2] = 180/PI_VAL * X[1];
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <H_Pack+0x158>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fbf9 	bl	8000490 <__aeabi_f2d>
 8001c9e:	a310      	add	r3, pc, #64	; (adr r3, 8001ce0 <H_Pack+0x150>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fc48 	bl	8000538 <__aeabi_dmul>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	460c      	mov	r4, r1
 8001cac:	4618      	mov	r0, r3
 8001cae:	4621      	mov	r1, r4
 8001cb0:	f7fe ff04 	bl	8000abc <__aeabi_d2f>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <H_Pack+0x15c>)
 8001cb8:	609a      	str	r2, [r3, #8]
	H[3] = X[0];
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <H_Pack+0x158>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <H_Pack+0x15c>)
 8001cc0:	60d3      	str	r3, [r2, #12]
}
 8001cc2:	bf00      	nop
 8001cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	eb851eb8 	.word	0xeb851eb8
 8001ccc:	3f9eb851 	.word	0x3f9eb851
 8001cd0:	acd9e83e 	.word	0xacd9e83e
 8001cd4:	40239cfa 	.word	0x40239cfa
 8001cd8:	eb851eb8 	.word	0xeb851eb8
 8001cdc:	bf9eb851 	.word	0xbf9eb851
 8001ce0:	b6774c14 	.word	0xb6774c14
 8001ce4:	404ca5d7 	.word	0x404ca5d7
 8001ce8:	20000184 	.word	0x20000184
 8001cec:	200001a0 	.word	0x200001a0

08001cf0 <Y_Calc>:

void Y_Calc(void){
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af02      	add	r7, sp, #8
	matrix_subtract(Z, H, 4, 1, Y);
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <Y_Calc+0x1c>)
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	4904      	ldr	r1, [pc, #16]	; (8001d10 <Y_Calc+0x20>)
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <Y_Calc+0x24>)
 8001d02:	f000 fb67 	bl	80023d4 <matrix_subtract>
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200001b0 	.word	0x200001b0
 8001d10:	200001a0 	.word	0x200001a0
 8001d14:	20000190 	.word	0x20000190

08001d18 <H_JacobianCalc>:


void H_JacobianCalc(void){
 8001d18:	b598      	push	{r3, r4, r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
//    H = [       gravity*cos(X(1)),   2*X(2)*IMU_radius,    0;...
//                -gravity*sin(X(1)),         0, IMU_radius..
//                             0,       1,    0;...
// 				               1,         0,    0];
    H_Jacobian[0] = -sin(X[0]);
 8001d1c:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <H_JacobianCalc+0xc8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fbb5 	bl	8000490 <__aeabi_f2d>
 8001d26:	4603      	mov	r3, r0
 8001d28:	460c      	mov	r4, r1
 8001d2a:	ec44 3b10 	vmov	d0, r3, r4
 8001d2e:	f002 fa8b 	bl	8004248 <sin>
 8001d32:	ec54 3b10 	vmov	r3, r4, d0
 8001d36:	4618      	mov	r0, r3
 8001d38:	4621      	mov	r1, r4
 8001d3a:	f7fe febf 	bl	8000abc <__aeabi_d2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eef1 7a67 	vneg.f32	s15, s15
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <H_JacobianCalc+0xcc>)
 8001d4a:	edc3 7a00 	vstr	s15, [r3]
    H_Jacobian[1] = -2*IMU_RADIUS*X[1]/GRAVITY;
 8001d4e:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <H_JacobianCalc+0xc8>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fb9c 	bl	8000490 <__aeabi_f2d>
 8001d58:	a31d      	add	r3, pc, #116	; (adr r3, 8001dd0 <H_JacobianCalc+0xb8>)
 8001d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5e:	f7fe fbeb 	bl	8000538 <__aeabi_dmul>
 8001d62:	4603      	mov	r3, r0
 8001d64:	460c      	mov	r4, r1
 8001d66:	4618      	mov	r0, r3
 8001d68:	4621      	mov	r1, r4
 8001d6a:	a31b      	add	r3, pc, #108	; (adr r3, 8001dd8 <H_JacobianCalc+0xc0>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fd0c 	bl	800078c <__aeabi_ddiv>
 8001d74:	4603      	mov	r3, r0
 8001d76:	460c      	mov	r4, r1
 8001d78:	4618      	mov	r0, r3
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	f7fe fe9e 	bl	8000abc <__aeabi_d2f>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <H_JacobianCalc+0xcc>)
 8001d84:	605a      	str	r2, [r3, #4]
	H_Jacobian[3]=  cos(X[0]);
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <H_JacobianCalc+0xc8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fb80 	bl	8000490 <__aeabi_f2d>
 8001d90:	4603      	mov	r3, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	ec44 3b10 	vmov	d0, r3, r4
 8001d98:	f002 fa12 	bl	80041c0 <cos>
 8001d9c:	ec54 3b10 	vmov	r3, r4, d0
 8001da0:	4618      	mov	r0, r3
 8001da2:	4621      	mov	r1, r4
 8001da4:	f7fe fe8a 	bl	8000abc <__aeabi_d2f>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <H_JacobianCalc+0xcc>)
 8001dac:	60da      	str	r2, [r3, #12]


    Ht_Jacobian[0] = H_Jacobian[0];
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <H_JacobianCalc+0xcc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <H_JacobianCalc+0xd0>)
 8001db4:	6013      	str	r3, [r2, #0]
    Ht_Jacobian[4] = H_Jacobian[1];
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <H_JacobianCalc+0xcc>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <H_JacobianCalc+0xd0>)
 8001dbc:	6113      	str	r3, [r2, #16]
	Ht_Jacobian[1]=  H_Jacobian[3];
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <H_JacobianCalc+0xcc>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	4a09      	ldr	r2, [pc, #36]	; (8001de8 <H_JacobianCalc+0xd0>)
 8001dc4:	6053      	str	r3, [r2, #4]


}
 8001dc6:	bf00      	nop
 8001dc8:	bd98      	pop	{r3, r4, r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	eb851eb8 	.word	0xeb851eb8
 8001dd4:	bfaeb851 	.word	0xbfaeb851
 8001dd8:	acd9e83e 	.word	0xacd9e83e
 8001ddc:	40239cfa 	.word	0x40239cfa
 8001de0:	20000184 	.word	0x20000184
 8001de4:	200000a0 	.word	0x200000a0
 8001de8:	200000d0 	.word	0x200000d0

08001dec <K_Calc>:

void K_Calc(void){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0b0      	sub	sp, #192	; 0xc0
 8001df0:	af04      	add	r7, sp, #16
	float temp1[12];
	float temp2[16];
	float temp3[16];


	matrix_multi_4(H_Jacobian, 4, 3, P, 3, 3, temp1);
 8001df2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001df6:	9302      	str	r3, [sp, #8]
 8001df8:	2303      	movs	r3, #3
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <K_Calc+0x9c>)
 8001e02:	2203      	movs	r2, #3
 8001e04:	2104      	movs	r1, #4
 8001e06:	4821      	ldr	r0, [pc, #132]	; (8001e8c <K_Calc+0xa0>)
 8001e08:	f000 f8b4 	bl	8001f74 <matrix_multi_4>
	matrix_multi_4x3_3x4(temp1, 4, 3, Ht_Jacobian, 3, 4, temp2);
 8001e0c:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8001e10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	2304      	movs	r3, #4
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <K_Calc+0xa4>)
 8001e20:	2203      	movs	r2, #3
 8001e22:	2104      	movs	r1, #4
 8001e24:	f000 f97e 	bl	8002124 <matrix_multi_4x3_3x4>
	matrix_add(temp2,R,4,4,temp2);
 8001e28:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001e2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2304      	movs	r3, #4
 8001e34:	2204      	movs	r2, #4
 8001e36:	4917      	ldr	r1, [pc, #92]	; (8001e94 <K_Calc+0xa8>)
 8001e38:	f000 fa33 	bl	80022a2 <matrix_add>

	gluInvertMatrix_4x4(temp2,temp3);
 8001e3c:	463a      	mov	r2, r7
 8001e3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 fc1d 	bl	8002684 <gluInvertMatrix_4x4>
	matrix_multi_4(P,3,3,Ht_Jacobian,3,4,temp1);
 8001e4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e4e:	9302      	str	r3, [sp, #8]
 8001e50:	2304      	movs	r3, #4
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	2303      	movs	r3, #3
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <K_Calc+0xa4>)
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	2103      	movs	r1, #3
 8001e5e:	480a      	ldr	r0, [pc, #40]	; (8001e88 <K_Calc+0x9c>)
 8001e60:	f000 f888 	bl	8001f74 <matrix_multi_4>
	matrix_multi_4(temp1, 3,4,temp3,4,4,K);
 8001e64:	463a      	mov	r2, r7
 8001e66:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <K_Calc+0xac>)
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	2304      	movs	r3, #4
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	2304      	movs	r3, #4
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	4613      	mov	r3, r2
 8001e78:	2204      	movs	r2, #4
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	f000 f87a 	bl	8001f74 <matrix_multi_4>



}
 8001e80:	bf00      	nop
 8001e82:	37b0      	adds	r7, #176	; 0xb0
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000010 	.word	0x20000010
 8001e8c:	200000a0 	.word	0x200000a0
 8001e90:	200000d0 	.word	0x200000d0
 8001e94:	20000100 	.word	0x20000100
 8001e98:	200001c0 	.word	0x200001c0

08001e9c <X_Update>:

void X_Update(void){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af04      	add	r7, sp, #16
//	X = X + K * y;
	float temp[3];
	matrix_multi_4(K,3,4,Y,4,1,temp);
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	9302      	str	r3, [sp, #8]
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	2304      	movs	r3, #4
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <X_Update+0x38>)
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	2103      	movs	r1, #3
 8001eb4:	4808      	ldr	r0, [pc, #32]	; (8001ed8 <X_Update+0x3c>)
 8001eb6:	f000 f85d 	bl	8001f74 <matrix_multi_4>
	matrix_add(X,temp,3,1,X);
 8001eba:	1d39      	adds	r1, r7, #4
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <X_Update+0x40>)
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	4805      	ldr	r0, [pc, #20]	; (8001edc <X_Update+0x40>)
 8001ec6:	f000 f9ec 	bl	80022a2 <matrix_add>
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200001b0 	.word	0x200001b0
 8001ed8:	200001c0 	.word	0x200001c0
 8001edc:	20000184 	.word	0x20000184

08001ee0 <P_Update>:

void P_Update(void){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08e      	sub	sp, #56	; 0x38
 8001ee4:	af04      	add	r7, sp, #16
//	P = (eye(3) - K * H_jacobian(X)) * P;
	float temp[9];
	matrix_multi_4(K,3,4,H_Jacobian,4,3,temp);
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	9302      	str	r3, [sp, #8]
 8001eea:	2303      	movs	r3, #3
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	2304      	movs	r3, #4
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <P_Update+0x50>)
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	2103      	movs	r1, #3
 8001ef8:	480e      	ldr	r0, [pc, #56]	; (8001f34 <P_Update+0x54>)
 8001efa:	f000 f83b 	bl	8001f74 <matrix_multi_4>
	matrix_subtract(I,temp,3,3,temp);
 8001efe:	1d39      	adds	r1, r7, #4
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2303      	movs	r3, #3
 8001f06:	2203      	movs	r2, #3
 8001f08:	480b      	ldr	r0, [pc, #44]	; (8001f38 <P_Update+0x58>)
 8001f0a:	f000 fa63 	bl	80023d4 <matrix_subtract>
	matrix_multi_3(temp,3,3,P,3,3,P);
 8001f0e:	1d38      	adds	r0, r7, #4
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <P_Update+0x5c>)
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	2303      	movs	r3, #3
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	2303      	movs	r3, #3
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <P_Update+0x5c>)
 8001f1e:	2203      	movs	r2, #3
 8001f20:	2103      	movs	r1, #3
 8001f22:	f000 faf0 	bl	8002506 <matrix_multi_3>
}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200000a0 	.word	0x200000a0
 8001f34:	200001c0 	.word	0x200001c0
 8001f38:	20000140 	.word	0x20000140
 8001f3c:	20000010 	.word	0x20000010

08001f40 <EKF_RetrieveStates>:

void EKF_RetrieveStates(float states[]){
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	states[0] = X[0];
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <EKF_RetrieveStates+0x30>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	601a      	str	r2, [r3, #0]
	states[1] = X[1];
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3304      	adds	r3, #4
 8001f54:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <EKF_RetrieveStates+0x30>)
 8001f56:	6852      	ldr	r2, [r2, #4]
 8001f58:	601a      	str	r2, [r3, #0]
	states[2] = X[2];
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3308      	adds	r3, #8
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <EKF_RetrieveStates+0x30>)
 8001f60:	6892      	ldr	r2, [r2, #8]
 8001f62:	601a      	str	r2, [r3, #0]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	20000184 	.word	0x20000184

08001f74 <matrix_multi_4>:
	covar_mat[6] = P[6];
	covar_mat[7] = P[7];
	covar_mat[8] = P[8];

}
void matrix_multi_4(float in_A[], int nrows_A, int ncols_A, float in_B[], int nrows_B, int ncols_B, float out[]) {
 8001f74:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001f78:	b089      	sub	sp, #36	; 0x24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	466b      	mov	r3, sp
 8001f86:	4618      	mov	r0, r3
	int row = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
	int col = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]
	float temp[nrows_A*ncols_B];
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f94:	fb02 f103 	mul.w	r1, r2, r3
 8001f98:	1e4b      	subs	r3, r1, #1
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8001fa8:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 8001fac:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	015d      	lsls	r5, r3, #5
 8001fba:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001fbe:	0154      	lsls	r4, r2, #5
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	3303      	adds	r3, #3
 8001fc6:	3307      	adds	r3, #7
 8001fc8:	08db      	lsrs	r3, r3, #3
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	ebad 0d03 	sub.w	sp, sp, r3
 8001fd0:	466b      	mov	r3, sp
 8001fd2:	3303      	adds	r3, #3
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	613b      	str	r3, [r7, #16]

	for ( row = 0; row < nrows_A; row++){
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e06e      	b.n	80020be <matrix_multi_4+0x14a>
		for (col = 0; col < ncols_B; col++){
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	e064      	b.n	80020b0 <matrix_multi_4+0x13c>
			temp[row*ncols_B + col] = 	in_A[row 	*	ncols_A] 		  * 	  in_B[ 0 * ncols_B + col] +
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fea:	fb02 f203 	mul.w	r2, r2, r3
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	18d1      	adds	r1, r2, r3
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	ed93 7a00 	vldr	s14, [r3]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	4413      	add	r3, r2
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee27 7a27 	vmul.f32	s14, s14, s15
										in_A[row	*	ncols_A + 1] 	  * 	  in_B[ 1 * ncols_B + col] +
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	3301      	adds	r3, #1
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	edd3 6a00 	vldr	s13, [r3]
 8002028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4413      	add	r3, r2
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	ee66 7aa7 	vmul.f32	s15, s13, s15
			temp[row*ncols_B + col] = 	in_A[row 	*	ncols_A] 		  * 	  in_B[ 0 * ncols_B + col] +
 800203c:	ee37 7a27 	vadd.f32	s14, s14, s15
										in_A[row	*	ncols_A + 2] 	  * 	  in_B[ 2 * ncols_B + col] +
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	3302      	adds	r3, #2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	edd3 6a00 	vldr	s13, [r3]
 8002054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002056:	005a      	lsls	r2, r3, #1
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	4413      	add	r3, r2
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	ee66 7aa7 	vmul.f32	s15, s13, s15
										in_A[row	*	ncols_A + 1] 	  * 	  in_B[ 1 * ncols_B + col] +
 800206a:	ee37 7a27 	vadd.f32	s14, s14, s15
										in_A[row	*	ncols_A + 3] 	  *  	  in_B[ 3 * ncols_B + col];
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	fb02 f303 	mul.w	r3, r2, r3
 8002076:	3303      	adds	r3, #3
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4413      	add	r3, r2
 800207e:	edd3 6a00 	vldr	s13, [r3]
 8002082:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	441a      	add	r2, r3
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	4413      	add	r3, r2
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee66 7aa7 	vmul.f32	s15, s13, s15
										in_A[row	*	ncols_A + 2] 	  * 	  in_B[ 2 * ncols_B + col] +
 800209c:	ee77 7a27 	vadd.f32	s15, s14, s15
			temp[row*ncols_B + col] = 	in_A[row 	*	ncols_A] 		  * 	  in_B[ 0 * ncols_B + col] +
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	008b      	lsls	r3, r1, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	edc3 7a00 	vstr	s15, [r3]
		for (col = 0; col < ncols_B; col++){
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	3301      	adds	r3, #1
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b4:	429a      	cmp	r2, r3
 80020b6:	db96      	blt.n	8001fe6 <matrix_multi_4+0x72>
	for ( row = 0; row < nrows_A; row++){
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	3301      	adds	r3, #1
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	db8c      	blt.n	8001fe0 <matrix_multi_4+0x6c>

		}
	}

	for (row = 0; row < nrows_A; row++){
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	e020      	b.n	800210e <matrix_multi_4+0x19a>
		for (col = 0; col < ncols_B; col++){
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
 80020d0:	e016      	b.n	8002100 <matrix_multi_4+0x18c>
			out[row * ncols_B + col] = temp[row * ncols_B + col];
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020d6:	fb02 f203 	mul.w	r2, r2, r3
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020e2:	4413      	add	r3, r2
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020e8:	fb01 f102 	mul.w	r1, r1, r2
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	440a      	add	r2, r1
 80020f0:	6939      	ldr	r1, [r7, #16]
 80020f2:	0092      	lsls	r2, r2, #2
 80020f4:	440a      	add	r2, r1
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	601a      	str	r2, [r3, #0]
		for (col = 0; col < ncols_B; col++){
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	3301      	adds	r3, #1
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002104:	429a      	cmp	r2, r3
 8002106:	dbe4      	blt.n	80020d2 <matrix_multi_4+0x15e>
	for (row = 0; row < nrows_A; row++){
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3301      	adds	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	429a      	cmp	r2, r3
 8002114:	dbda      	blt.n	80020cc <matrix_multi_4+0x158>
 8002116:	4685      	mov	sp, r0
		}
	}
}
 8002118:	bf00      	nop
 800211a:	3724      	adds	r7, #36	; 0x24
 800211c:	46bd      	mov	sp, r7
 800211e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8002122:	4770      	bx	lr

08002124 <matrix_multi_4x3_3x4>:

void matrix_multi_4x3_3x4(float in_A[], int nrows_A, int ncols_A, float in_B[], int nrows_B, int ncols_B, float out[]) {
 8002124:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8002128:	b089      	sub	sp, #36	; 0x24
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	466b      	mov	r3, sp
 8002136:	4618      	mov	r0, r3
	int row = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
	int col = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
	float temp[nrows_A*ncols_B];
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002144:	fb02 f103 	mul.w	r1, r2, r3
 8002148:	1e4b      	subs	r3, r1, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	460b      	mov	r3, r1
 800214e:	461a      	mov	r2, r3
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8002158:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 800215c:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8002160:	460b      	mov	r3, r1
 8002162:	461a      	mov	r2, r3
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	015d      	lsls	r5, r3, #5
 800216a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800216e:	0154      	lsls	r4, r2, #5
 8002170:	460b      	mov	r3, r1
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	3303      	adds	r3, #3
 8002176:	3307      	adds	r3, #7
 8002178:	08db      	lsrs	r3, r3, #3
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	ebad 0d03 	sub.w	sp, sp, r3
 8002180:	466b      	mov	r3, sp
 8002182:	3303      	adds	r3, #3
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	613b      	str	r3, [r7, #16]

	for ( row = 0; row < nrows_A; row++){
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e055      	b.n	800223c <matrix_multi_4x3_3x4+0x118>
		for (col = 0; col < ncols_B; col++){
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	e04b      	b.n	800222e <matrix_multi_4x3_3x4+0x10a>
			temp[row*ncols_B + col] = 	in_A[row 	*	ncols_A] 		  * 	  in_B[ 0 * ncols_B + col] +
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800219a:	fb02 f203 	mul.w	r2, r2, r3
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4413      	add	r3, r2
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	fb01 f202 	mul.w	r2, r1, r2
 80021aa:	0092      	lsls	r2, r2, #2
 80021ac:	68f9      	ldr	r1, [r7, #12]
 80021ae:	440a      	add	r2, r1
 80021b0:	ed92 7a00 	vldr	s14, [r2]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	0092      	lsls	r2, r2, #2
 80021b8:	6839      	ldr	r1, [r7, #0]
 80021ba:	440a      	add	r2, r1
 80021bc:	edd2 7a00 	vldr	s15, [r2]
 80021c0:	ee27 7a27 	vmul.f32	s14, s14, s15
										            in_A[row	*	ncols_A + 1] 	  * 	  in_B[ 1 * ncols_B + col] +
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	fb01 f202 	mul.w	r2, r1, r2
 80021cc:	3201      	adds	r2, #1
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	68f9      	ldr	r1, [r7, #12]
 80021d2:	440a      	add	r2, r1
 80021d4:	edd2 6a00 	vldr	s13, [r2]
 80021d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	440a      	add	r2, r1
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	6839      	ldr	r1, [r7, #0]
 80021e2:	440a      	add	r2, r1
 80021e4:	edd2 7a00 	vldr	s15, [r2]
 80021e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			temp[row*ncols_B + col] = 	in_A[row 	*	ncols_A] 		  * 	  in_B[ 0 * ncols_B + col] +
 80021ec:	ee37 7a27 	vadd.f32	s14, s14, s15
										            in_A[row	*	ncols_A + 2] 	  * 	  in_B[ 2 * ncols_B + col];
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	fb01 f202 	mul.w	r2, r1, r2
 80021f8:	3202      	adds	r2, #2
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	68f9      	ldr	r1, [r7, #12]
 80021fe:	440a      	add	r2, r1
 8002200:	edd2 6a00 	vldr	s13, [r2]
 8002204:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002206:	0051      	lsls	r1, r2, #1
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	440a      	add	r2, r1
 800220c:	0092      	lsls	r2, r2, #2
 800220e:	6839      	ldr	r1, [r7, #0]
 8002210:	440a      	add	r2, r1
 8002212:	edd2 7a00 	vldr	s15, [r2]
 8002216:	ee66 7aa7 	vmul.f32	s15, s13, s15
										            in_A[row	*	ncols_A + 1] 	  * 	  in_B[ 1 * ncols_B + col] +
 800221a:	ee77 7a27 	vadd.f32	s15, s14, s15
			temp[row*ncols_B + col] = 	in_A[row 	*	ncols_A] 		  * 	  in_B[ 0 * ncols_B + col] +
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	edc3 7a00 	vstr	s15, [r3]
		for (col = 0; col < ncols_B; col++){
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	3301      	adds	r3, #1
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002232:	429a      	cmp	r2, r3
 8002234:	dbaf      	blt.n	8002196 <matrix_multi_4x3_3x4+0x72>
	for ( row = 0; row < nrows_A; row++){
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3301      	adds	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	429a      	cmp	r2, r3
 8002242:	dba5      	blt.n	8002190 <matrix_multi_4x3_3x4+0x6c>
		}
	}

	for (row = 0; row < nrows_A; row++){
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	e020      	b.n	800228c <matrix_multi_4x3_3x4+0x168>
		for (col = 0; col < ncols_B; col++){
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	e016      	b.n	800227e <matrix_multi_4x3_3x4+0x15a>
			out[row * ncols_B + col] = temp[row * ncols_B + col];
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002254:	fb02 f203 	mul.w	r2, r2, r3
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002260:	4413      	add	r3, r2
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002266:	fb01 f102 	mul.w	r1, r1, r2
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	440a      	add	r2, r1
 800226e:	6939      	ldr	r1, [r7, #16]
 8002270:	0092      	lsls	r2, r2, #2
 8002272:	440a      	add	r2, r1
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	601a      	str	r2, [r3, #0]
		for (col = 0; col < ncols_B; col++){
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	3301      	adds	r3, #1
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002282:	429a      	cmp	r2, r3
 8002284:	dbe4      	blt.n	8002250 <matrix_multi_4x3_3x4+0x12c>
	for (row = 0; row < nrows_A; row++){
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3301      	adds	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	429a      	cmp	r2, r3
 8002292:	dbda      	blt.n	800224a <matrix_multi_4x3_3x4+0x126>
 8002294:	4685      	mov	sp, r0
		}
	}
}
 8002296:	bf00      	nop
 8002298:	3724      	adds	r7, #36	; 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80022a0:	4770      	bx	lr

080022a2 <matrix_add>:

void matrix_add(float in_A[], float in_B[], int nrows, int ncols, float out[]) {
 80022a2:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	466b      	mov	r3, sp
 80022b4:	4618      	mov	r0, r3
	int row = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
	int col = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
	float temp[nrows*ncols];
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	fb02 f103 	mul.w	r1, r2, r3
 80022c6:	1e4b      	subs	r3, r1, #1
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	460b      	mov	r3, r1
 80022cc:	461a      	mov	r2, r3
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	ea4f 1943 	mov.w	r9, r3, lsl #5
 80022d6:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 80022da:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80022de:	460b      	mov	r3, r1
 80022e0:	461a      	mov	r2, r3
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	015d      	lsls	r5, r3, #5
 80022e8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80022ec:	0154      	lsls	r4, r2, #5
 80022ee:	460b      	mov	r3, r1
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	3303      	adds	r3, #3
 80022f4:	3307      	adds	r3, #7
 80022f6:	08db      	lsrs	r3, r3, #3
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	ebad 0d03 	sub.w	sp, sp, r3
 80022fe:	466b      	mov	r3, sp
 8002300:	3303      	adds	r3, #3
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	613b      	str	r3, [r7, #16]

	for ( row = 0; row < nrows; row++){
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	e02f      	b.n	800236e <matrix_add+0xcc>
		for (col = 0; col < ncols; col++){
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	e025      	b.n	8002360 <matrix_add+0xbe>
			temp[row*ncols+ col] = 	in_A[row *ncols + col] + in_B[ row*ncols + col];
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	fb02 f203 	mul.w	r2, r2, r3
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4413      	add	r3, r2
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	6839      	ldr	r1, [r7, #0]
 8002324:	fb01 f102 	mul.w	r1, r1, r2
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	440a      	add	r2, r1
 800232c:	0092      	lsls	r2, r2, #2
 800232e:	68f9      	ldr	r1, [r7, #12]
 8002330:	440a      	add	r2, r1
 8002332:	ed92 7a00 	vldr	s14, [r2]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	fb01 f102 	mul.w	r1, r1, r2
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	440a      	add	r2, r1
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	440a      	add	r2, r1
 8002348:	edd2 7a00 	vldr	s15, [r2]
 800234c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	edc3 7a00 	vstr	s15, [r3]
		for (col = 0; col < ncols; col++){
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	3301      	adds	r3, #1
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	dbd5      	blt.n	8002314 <matrix_add+0x72>
	for ( row = 0; row < nrows; row++){
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	3301      	adds	r3, #1
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	dbcb      	blt.n	800230e <matrix_add+0x6c>

		}
	}

	for (row = 0; row < nrows; row++){
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	e020      	b.n	80023be <matrix_add+0x11c>
		for (col = 0; col < ncols; col++){
 800237c:	2300      	movs	r3, #0
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	e016      	b.n	80023b0 <matrix_add+0x10e>
			out[row * ncols + col] = temp[row * ncols + col];
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	fb02 f203 	mul.w	r2, r2, r3
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002392:	4413      	add	r3, r2
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	6839      	ldr	r1, [r7, #0]
 8002398:	fb01 f102 	mul.w	r1, r1, r2
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	440a      	add	r2, r1
 80023a0:	6939      	ldr	r1, [r7, #16]
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	440a      	add	r2, r1
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	601a      	str	r2, [r3, #0]
		for (col = 0; col < ncols; col++){
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	3301      	adds	r3, #1
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	dbe4      	blt.n	8002382 <matrix_add+0xe0>
	for (row = 0; row < nrows; row++){
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	3301      	adds	r3, #1
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	dbda      	blt.n	800237c <matrix_add+0xda>
 80023c6:	4685      	mov	sp, r0
		}
	}
}
 80023c8:	bf00      	nop
 80023ca:	3724      	adds	r7, #36	; 0x24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80023d2:	4770      	bx	lr

080023d4 <matrix_subtract>:

void matrix_subtract(float in_A[], float in_B[], int nrows, int ncols, float out[]) {
 80023d4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80023d8:	b089      	sub	sp, #36	; 0x24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	466b      	mov	r3, sp
 80023e6:	4618      	mov	r0, r3
	int row = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
	int col = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
	float temp[nrows*ncols];
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	fb02 f103 	mul.w	r1, r2, r3
 80023f8:	1e4b      	subs	r3, r1, #1
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	460b      	mov	r3, r1
 80023fe:	461a      	mov	r2, r3
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8002408:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 800240c:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8002410:	460b      	mov	r3, r1
 8002412:	461a      	mov	r2, r3
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	015d      	lsls	r5, r3, #5
 800241a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800241e:	0154      	lsls	r4, r2, #5
 8002420:	460b      	mov	r3, r1
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	3303      	adds	r3, #3
 8002426:	3307      	adds	r3, #7
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	ebad 0d03 	sub.w	sp, sp, r3
 8002430:	466b      	mov	r3, sp
 8002432:	3303      	adds	r3, #3
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	613b      	str	r3, [r7, #16]

	for ( row = 0; row < nrows; row++){
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e02f      	b.n	80024a0 <matrix_subtract+0xcc>
		for (col = 0; col < ncols; col++){
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	e025      	b.n	8002492 <matrix_subtract+0xbe>
			temp[row*ncols+ col] = 	in_A[row *ncols + col] - in_B[ row*ncols + col];
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	fb02 f203 	mul.w	r2, r2, r3
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4413      	add	r3, r2
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	6839      	ldr	r1, [r7, #0]
 8002456:	fb01 f102 	mul.w	r1, r1, r2
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	440a      	add	r2, r1
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	68f9      	ldr	r1, [r7, #12]
 8002462:	440a      	add	r2, r1
 8002464:	ed92 7a00 	vldr	s14, [r2]
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	6839      	ldr	r1, [r7, #0]
 800246c:	fb01 f102 	mul.w	r1, r1, r2
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	440a      	add	r2, r1
 8002474:	0092      	lsls	r2, r2, #2
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	440a      	add	r2, r1
 800247a:	edd2 7a00 	vldr	s15, [r2]
 800247e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	edc3 7a00 	vstr	s15, [r3]
		for (col = 0; col < ncols; col++){
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	3301      	adds	r3, #1
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	dbd5      	blt.n	8002446 <matrix_subtract+0x72>
	for ( row = 0; row < nrows; row++){
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3301      	adds	r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dbcb      	blt.n	8002440 <matrix_subtract+0x6c>

		}
	}

	for (row = 0; row < nrows; row++){
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	e020      	b.n	80024f0 <matrix_subtract+0x11c>
		for (col = 0; col < ncols; col++){
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	e016      	b.n	80024e2 <matrix_subtract+0x10e>
			out[row * ncols + col] = temp[row * ncols + col];
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	fb02 f203 	mul.w	r2, r2, r3
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024c4:	4413      	add	r3, r2
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	6839      	ldr	r1, [r7, #0]
 80024ca:	fb01 f102 	mul.w	r1, r1, r2
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	440a      	add	r2, r1
 80024d2:	6939      	ldr	r1, [r7, #16]
 80024d4:	0092      	lsls	r2, r2, #2
 80024d6:	440a      	add	r2, r1
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	601a      	str	r2, [r3, #0]
		for (col = 0; col < ncols; col++){
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	3301      	adds	r3, #1
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	dbe4      	blt.n	80024b4 <matrix_subtract+0xe0>
	for (row = 0; row < nrows; row++){
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3301      	adds	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	dbda      	blt.n	80024ae <matrix_subtract+0xda>
 80024f8:	4685      	mov	sp, r0
		}
	}
}
 80024fa:	bf00      	nop
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8002504:	4770      	bx	lr

08002506 <matrix_multi_3>:

void matrix_multi_3(float in_A[], int nrows_A, int ncols_A, float in_B[], int nrows_B, int ncols_B, float out[]) {
 8002506:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	466b      	mov	r3, sp
 8002518:	4618      	mov	r0, r3
	int row = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
	int col = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
	float temp[nrows_A*ncols_B];
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002526:	fb02 f103 	mul.w	r1, r2, r3
 800252a:	1e4b      	subs	r3, r1, #1
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	460b      	mov	r3, r1
 8002530:	461a      	mov	r2, r3
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	ea4f 1943 	mov.w	r9, r3, lsl #5
 800253a:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 800253e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8002542:	460b      	mov	r3, r1
 8002544:	461a      	mov	r2, r3
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	015d      	lsls	r5, r3, #5
 800254c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002550:	0154      	lsls	r4, r2, #5
 8002552:	460b      	mov	r3, r1
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	3303      	adds	r3, #3
 8002558:	3307      	adds	r3, #7
 800255a:	08db      	lsrs	r3, r3, #3
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	ebad 0d03 	sub.w	sp, sp, r3
 8002562:	466b      	mov	r3, sp
 8002564:	3303      	adds	r3, #3
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	613b      	str	r3, [r7, #16]

	for ( row = 0; row < nrows_A; row++){
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	e055      	b.n	800261e <matrix_multi_3+0x118>
		for (col = 0; col < ncols_B; col++){
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	e04b      	b.n	8002610 <matrix_multi_3+0x10a>
			temp[row*ncols_B + col] = 	in_A[row 	*	ncols_A] 		  * 	  in_B[ 0 * ncols_B + col] +
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800257c:	fb02 f203 	mul.w	r2, r2, r3
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	4413      	add	r3, r2
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	fb01 f202 	mul.w	r2, r1, r2
 800258c:	0092      	lsls	r2, r2, #2
 800258e:	68f9      	ldr	r1, [r7, #12]
 8002590:	440a      	add	r2, r1
 8002592:	ed92 7a00 	vldr	s14, [r2]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	6839      	ldr	r1, [r7, #0]
 800259c:	440a      	add	r2, r1
 800259e:	edd2 7a00 	vldr	s15, [r2]
 80025a2:	ee27 7a27 	vmul.f32	s14, s14, s15
										            in_A[row	*	ncols_A + 1] 	  * 	  in_B[ 1 * ncols_B + col] +
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	fb01 f202 	mul.w	r2, r1, r2
 80025ae:	3201      	adds	r2, #1
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	68f9      	ldr	r1, [r7, #12]
 80025b4:	440a      	add	r2, r1
 80025b6:	edd2 6a00 	vldr	s13, [r2]
 80025ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	440a      	add	r2, r1
 80025c0:	0092      	lsls	r2, r2, #2
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	440a      	add	r2, r1
 80025c6:	edd2 7a00 	vldr	s15, [r2]
 80025ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
			temp[row*ncols_B + col] = 	in_A[row 	*	ncols_A] 		  * 	  in_B[ 0 * ncols_B + col] +
 80025ce:	ee37 7a27 	vadd.f32	s14, s14, s15
										            in_A[row	*	ncols_A + 2] 	  * 	  in_B[ 2 * ncols_B + col];
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	fb01 f202 	mul.w	r2, r1, r2
 80025da:	3202      	adds	r2, #2
 80025dc:	0092      	lsls	r2, r2, #2
 80025de:	68f9      	ldr	r1, [r7, #12]
 80025e0:	440a      	add	r2, r1
 80025e2:	edd2 6a00 	vldr	s13, [r2]
 80025e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025e8:	0051      	lsls	r1, r2, #1
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	440a      	add	r2, r1
 80025ee:	0092      	lsls	r2, r2, #2
 80025f0:	6839      	ldr	r1, [r7, #0]
 80025f2:	440a      	add	r2, r1
 80025f4:	edd2 7a00 	vldr	s15, [r2]
 80025f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
										            in_A[row	*	ncols_A + 1] 	  * 	  in_B[ 1 * ncols_B + col] +
 80025fc:	ee77 7a27 	vadd.f32	s15, s14, s15
			temp[row*ncols_B + col] = 	in_A[row 	*	ncols_A] 		  * 	  in_B[ 0 * ncols_B + col] +
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	edc3 7a00 	vstr	s15, [r3]
		for (col = 0; col < ncols_B; col++){
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	3301      	adds	r3, #1
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002614:	429a      	cmp	r2, r3
 8002616:	dbaf      	blt.n	8002578 <matrix_multi_3+0x72>
	for ( row = 0; row < nrows_A; row++){
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	3301      	adds	r3, #1
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	429a      	cmp	r2, r3
 8002624:	dba5      	blt.n	8002572 <matrix_multi_3+0x6c>

		}
	}

	for (row = 0; row < nrows_A; row++){
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e020      	b.n	800266e <matrix_multi_3+0x168>
		for (col = 0; col < ncols_B; col++){
 800262c:	2300      	movs	r3, #0
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	e016      	b.n	8002660 <matrix_multi_3+0x15a>
			out[row * ncols_B + col] = temp[row * ncols_B + col];
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002636:	fb02 f203 	mul.w	r2, r2, r3
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002642:	4413      	add	r3, r2
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002648:	fb01 f102 	mul.w	r1, r1, r2
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	440a      	add	r2, r1
 8002650:	6939      	ldr	r1, [r7, #16]
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	440a      	add	r2, r1
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	601a      	str	r2, [r3, #0]
		for (col = 0; col < ncols_B; col++){
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	3301      	adds	r3, #1
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002664:	429a      	cmp	r2, r3
 8002666:	dbe4      	blt.n	8002632 <matrix_multi_3+0x12c>
	for (row = 0; row < nrows_A; row++){
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	3301      	adds	r3, #1
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	dbda      	blt.n	800262c <matrix_multi_3+0x126>
 8002676:	4685      	mov	sp, r0
		}
	}
}
 8002678:	bf00      	nop
 800267a:	3724      	adds	r7, #36	; 0x24
 800267c:	46bd      	mov	sp, r7
 800267e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8002682:	4770      	bx	lr

08002684 <gluInvertMatrix_4x4>:

void gluInvertMatrix_4x4(const float m[16], float invOut[16])
{
 8002684:	b480      	push	{r7}
 8002686:	b095      	sub	sp, #84	; 0x54
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
    float inv[16], det;
    int i;

    inv[0] = m[5]  * m[10] * m[15] -
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3314      	adds	r3, #20
 8002692:	ed93 7a00 	vldr	s14, [r3]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3328      	adds	r3, #40	; 0x28
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	333c      	adds	r3, #60	; 0x3c
 80026a6:	edd3 7a00 	vldr	s15, [r3]
 80026aa:	ee27 7a27 	vmul.f32	s14, s14, s15
             m[5]  * m[11] * m[14] -
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3314      	adds	r3, #20
 80026b2:	edd3 6a00 	vldr	s13, [r3]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	332c      	adds	r3, #44	; 0x2c
 80026ba:	edd3 7a00 	vldr	s15, [r3]
 80026be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3338      	adds	r3, #56	; 0x38
 80026c6:	edd3 7a00 	vldr	s15, [r3]
 80026ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[0] = m[5]  * m[10] * m[15] -
 80026ce:	ee37 7a67 	vsub.f32	s14, s14, s15
             m[9]  * m[6]  * m[15] +
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3324      	adds	r3, #36	; 0x24
 80026d6:	edd3 6a00 	vldr	s13, [r3]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3318      	adds	r3, #24
 80026de:	edd3 7a00 	vldr	s15, [r3]
 80026e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	333c      	adds	r3, #60	; 0x3c
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[5]  * m[11] * m[14] -
 80026f2:	ee37 7a67 	vsub.f32	s14, s14, s15
             m[9]  * m[7]  * m[14] +
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3324      	adds	r3, #36	; 0x24
 80026fa:	edd3 6a00 	vldr	s13, [r3]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	331c      	adds	r3, #28
 8002702:	edd3 7a00 	vldr	s15, [r3]
 8002706:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3338      	adds	r3, #56	; 0x38
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[9]  * m[6]  * m[15] +
 8002716:	ee37 7a27 	vadd.f32	s14, s14, s15
             m[13] * m[6]  * m[11] -
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3334      	adds	r3, #52	; 0x34
 800271e:	edd3 6a00 	vldr	s13, [r3]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3318      	adds	r3, #24
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	332c      	adds	r3, #44	; 0x2c
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[9]  * m[7]  * m[14] +
 800273a:	ee37 7a27 	vadd.f32	s14, s14, s15
             m[13] * m[7]  * m[10];
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3334      	adds	r3, #52	; 0x34
 8002742:	edd3 6a00 	vldr	s13, [r3]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	331c      	adds	r3, #28
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3328      	adds	r3, #40	; 0x28
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[13] * m[6]  * m[11] -
 800275e:	ee77 7a67 	vsub.f32	s15, s14, s15
    inv[0] = m[5]  * m[10] * m[15] -
 8002762:	edc7 7a02 	vstr	s15, [r7, #8]

    inv[4] = -m[4]  * m[10] * m[15] +
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3310      	adds	r3, #16
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	eeb1 7a67 	vneg.f32	s14, s15
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3328      	adds	r3, #40	; 0x28
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	333c      	adds	r3, #60	; 0x3c
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee27 7a27 	vmul.f32	s14, s14, s15
              m[4]  * m[11] * m[14] +
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3310      	adds	r3, #16
 800278e:	edd3 6a00 	vldr	s13, [r3]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	332c      	adds	r3, #44	; 0x2c
 8002796:	edd3 7a00 	vldr	s15, [r3]
 800279a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3338      	adds	r3, #56	; 0x38
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[4] = -m[4]  * m[10] * m[15] +
 80027aa:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[8]  * m[6]  * m[15] -
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3320      	adds	r3, #32
 80027b2:	edd3 6a00 	vldr	s13, [r3]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3318      	adds	r3, #24
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	333c      	adds	r3, #60	; 0x3c
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[4]  * m[11] * m[14] +
 80027ce:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[8]  * m[7]  * m[14] -
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3320      	adds	r3, #32
 80027d6:	edd3 6a00 	vldr	s13, [r3]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	331c      	adds	r3, #28
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3338      	adds	r3, #56	; 0x38
 80027ea:	edd3 7a00 	vldr	s15, [r3]
 80027ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[8]  * m[6]  * m[15] -
 80027f2:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[12] * m[6]  * m[11] +
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3330      	adds	r3, #48	; 0x30
 80027fa:	edd3 6a00 	vldr	s13, [r3]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3318      	adds	r3, #24
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	332c      	adds	r3, #44	; 0x2c
 800280e:	edd3 7a00 	vldr	s15, [r3]
 8002812:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[8]  * m[7]  * m[14] -
 8002816:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[12] * m[7]  * m[10];
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3330      	adds	r3, #48	; 0x30
 800281e:	edd3 6a00 	vldr	s13, [r3]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	331c      	adds	r3, #28
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3328      	adds	r3, #40	; 0x28
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[12] * m[6]  * m[11] +
 800283a:	ee77 7a27 	vadd.f32	s15, s14, s15
    inv[4] = -m[4]  * m[10] * m[15] +
 800283e:	edc7 7a06 	vstr	s15, [r7, #24]

    inv[8] = m[4]  * m[9] * m[15] -
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3310      	adds	r3, #16
 8002846:	ed93 7a00 	vldr	s14, [r3]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3324      	adds	r3, #36	; 0x24
 800284e:	edd3 7a00 	vldr	s15, [r3]
 8002852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	333c      	adds	r3, #60	; 0x3c
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	ee27 7a27 	vmul.f32	s14, s14, s15
             m[4]  * m[11] * m[13] -
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3310      	adds	r3, #16
 8002866:	edd3 6a00 	vldr	s13, [r3]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	332c      	adds	r3, #44	; 0x2c
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3334      	adds	r3, #52	; 0x34
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[8] = m[4]  * m[9] * m[15] -
 8002882:	ee37 7a67 	vsub.f32	s14, s14, s15
             m[8]  * m[5] * m[15] +
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3320      	adds	r3, #32
 800288a:	edd3 6a00 	vldr	s13, [r3]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3314      	adds	r3, #20
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	333c      	adds	r3, #60	; 0x3c
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[4]  * m[11] * m[13] -
 80028a6:	ee37 7a67 	vsub.f32	s14, s14, s15
             m[8]  * m[7] * m[13] +
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3320      	adds	r3, #32
 80028ae:	edd3 6a00 	vldr	s13, [r3]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	331c      	adds	r3, #28
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3334      	adds	r3, #52	; 0x34
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[8]  * m[5] * m[15] +
 80028ca:	ee37 7a27 	vadd.f32	s14, s14, s15
             m[12] * m[5] * m[11] -
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3330      	adds	r3, #48	; 0x30
 80028d2:	edd3 6a00 	vldr	s13, [r3]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3314      	adds	r3, #20
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	332c      	adds	r3, #44	; 0x2c
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[8]  * m[7] * m[13] +
 80028ee:	ee37 7a27 	vadd.f32	s14, s14, s15
             m[12] * m[7] * m[9];
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3330      	adds	r3, #48	; 0x30
 80028f6:	edd3 6a00 	vldr	s13, [r3]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	331c      	adds	r3, #28
 80028fe:	edd3 7a00 	vldr	s15, [r3]
 8002902:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3324      	adds	r3, #36	; 0x24
 800290a:	edd3 7a00 	vldr	s15, [r3]
 800290e:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[12] * m[5] * m[11] -
 8002912:	ee77 7a67 	vsub.f32	s15, s14, s15
    inv[8] = m[4]  * m[9] * m[15] -
 8002916:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    inv[12] = -m[4]  * m[9] * m[14] +
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3310      	adds	r3, #16
 800291e:	edd3 7a00 	vldr	s15, [r3]
 8002922:	eeb1 7a67 	vneg.f32	s14, s15
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3324      	adds	r3, #36	; 0x24
 800292a:	edd3 7a00 	vldr	s15, [r3]
 800292e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3338      	adds	r3, #56	; 0x38
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ee27 7a27 	vmul.f32	s14, s14, s15
               m[4]  * m[10] * m[13] +
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3310      	adds	r3, #16
 8002942:	edd3 6a00 	vldr	s13, [r3]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3328      	adds	r3, #40	; 0x28
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3334      	adds	r3, #52	; 0x34
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[12] = -m[4]  * m[9] * m[14] +
 800295e:	ee37 7a27 	vadd.f32	s14, s14, s15
               m[8]  * m[5] * m[14] -
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3320      	adds	r3, #32
 8002966:	edd3 6a00 	vldr	s13, [r3]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3314      	adds	r3, #20
 800296e:	edd3 7a00 	vldr	s15, [r3]
 8002972:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3338      	adds	r3, #56	; 0x38
 800297a:	edd3 7a00 	vldr	s15, [r3]
 800297e:	ee66 7aa7 	vmul.f32	s15, s13, s15
               m[4]  * m[10] * m[13] +
 8002982:	ee37 7a27 	vadd.f32	s14, s14, s15
               m[8]  * m[6] * m[13] -
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3320      	adds	r3, #32
 800298a:	edd3 6a00 	vldr	s13, [r3]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3318      	adds	r3, #24
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3334      	adds	r3, #52	; 0x34
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
               m[8]  * m[5] * m[14] -
 80029a6:	ee37 7a67 	vsub.f32	s14, s14, s15
               m[12] * m[5] * m[10] +
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3330      	adds	r3, #48	; 0x30
 80029ae:	edd3 6a00 	vldr	s13, [r3]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3314      	adds	r3, #20
 80029b6:	edd3 7a00 	vldr	s15, [r3]
 80029ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3328      	adds	r3, #40	; 0x28
 80029c2:	edd3 7a00 	vldr	s15, [r3]
 80029c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
               m[8]  * m[6] * m[13] -
 80029ca:	ee37 7a67 	vsub.f32	s14, s14, s15
               m[12] * m[6] * m[9];
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3330      	adds	r3, #48	; 0x30
 80029d2:	edd3 6a00 	vldr	s13, [r3]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3318      	adds	r3, #24
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3324      	adds	r3, #36	; 0x24
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
               m[12] * m[5] * m[10] +
 80029ee:	ee77 7a27 	vadd.f32	s15, s14, s15
    inv[12] = -m[4]  * m[9] * m[14] +
 80029f2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    inv[1] = -m[1]  * m[10] * m[15] +
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3304      	adds	r3, #4
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	eeb1 7a67 	vneg.f32	s14, s15
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3328      	adds	r3, #40	; 0x28
 8002a06:	edd3 7a00 	vldr	s15, [r3]
 8002a0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	333c      	adds	r3, #60	; 0x3c
 8002a12:	edd3 7a00 	vldr	s15, [r3]
 8002a16:	ee27 7a27 	vmul.f32	s14, s14, s15
              m[1]  * m[11] * m[14] +
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	edd3 6a00 	vldr	s13, [r3]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	332c      	adds	r3, #44	; 0x2c
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3338      	adds	r3, #56	; 0x38
 8002a32:	edd3 7a00 	vldr	s15, [r3]
 8002a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[1] = -m[1]  * m[10] * m[15] +
 8002a3a:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[9]  * m[2] * m[15] -
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3324      	adds	r3, #36	; 0x24
 8002a42:	edd3 6a00 	vldr	s13, [r3]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3308      	adds	r3, #8
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	333c      	adds	r3, #60	; 0x3c
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[1]  * m[11] * m[14] +
 8002a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[9]  * m[3] * m[14] -
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3324      	adds	r3, #36	; 0x24
 8002a66:	edd3 6a00 	vldr	s13, [r3]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	330c      	adds	r3, #12
 8002a6e:	edd3 7a00 	vldr	s15, [r3]
 8002a72:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3338      	adds	r3, #56	; 0x38
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[9]  * m[2] * m[15] -
 8002a82:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[13] * m[2] * m[11] +
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3334      	adds	r3, #52	; 0x34
 8002a8a:	edd3 6a00 	vldr	s13, [r3]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3308      	adds	r3, #8
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	332c      	adds	r3, #44	; 0x2c
 8002a9e:	edd3 7a00 	vldr	s15, [r3]
 8002aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[9]  * m[3] * m[14] -
 8002aa6:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[13] * m[3] * m[10];
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3334      	adds	r3, #52	; 0x34
 8002aae:	edd3 6a00 	vldr	s13, [r3]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	edd3 7a00 	vldr	s15, [r3]
 8002aba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3328      	adds	r3, #40	; 0x28
 8002ac2:	edd3 7a00 	vldr	s15, [r3]
 8002ac6:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[13] * m[2] * m[11] +
 8002aca:	ee77 7a27 	vadd.f32	s15, s14, s15
    inv[1] = -m[1]  * m[10] * m[15] +
 8002ace:	edc7 7a03 	vstr	s15, [r7, #12]

    inv[5] = m[0]  * m[10] * m[15] -
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	ed93 7a00 	vldr	s14, [r3]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3328      	adds	r3, #40	; 0x28
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	333c      	adds	r3, #60	; 0x3c
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	ee27 7a27 	vmul.f32	s14, s14, s15
             m[0]  * m[11] * m[14] -
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	edd3 6a00 	vldr	s13, [r3]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	332c      	adds	r3, #44	; 0x2c
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3338      	adds	r3, #56	; 0x38
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[5] = m[0]  * m[10] * m[15] -
 8002b0e:	ee37 7a67 	vsub.f32	s14, s14, s15
             m[8]  * m[2] * m[15] +
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3320      	adds	r3, #32
 8002b16:	edd3 6a00 	vldr	s13, [r3]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3308      	adds	r3, #8
 8002b1e:	edd3 7a00 	vldr	s15, [r3]
 8002b22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	333c      	adds	r3, #60	; 0x3c
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[0]  * m[11] * m[14] -
 8002b32:	ee37 7a67 	vsub.f32	s14, s14, s15
             m[8]  * m[3] * m[14] +
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3320      	adds	r3, #32
 8002b3a:	edd3 6a00 	vldr	s13, [r3]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	330c      	adds	r3, #12
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3338      	adds	r3, #56	; 0x38
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[8]  * m[2] * m[15] +
 8002b56:	ee37 7a27 	vadd.f32	s14, s14, s15
             m[12] * m[2] * m[11] -
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3330      	adds	r3, #48	; 0x30
 8002b5e:	edd3 6a00 	vldr	s13, [r3]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3308      	adds	r3, #8
 8002b66:	edd3 7a00 	vldr	s15, [r3]
 8002b6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	332c      	adds	r3, #44	; 0x2c
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[8]  * m[3] * m[14] +
 8002b7a:	ee37 7a27 	vadd.f32	s14, s14, s15
             m[12] * m[3] * m[10];
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3330      	adds	r3, #48	; 0x30
 8002b82:	edd3 6a00 	vldr	s13, [r3]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3328      	adds	r3, #40	; 0x28
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[12] * m[2] * m[11] -
 8002b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
    inv[5] = m[0]  * m[10] * m[15] -
 8002ba2:	edc7 7a07 	vstr	s15, [r7, #28]

    inv[9] = -m[0]  * m[9] * m[15] +
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	eeb1 7a67 	vneg.f32	s14, s15
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3324      	adds	r3, #36	; 0x24
 8002bb4:	edd3 7a00 	vldr	s15, [r3]
 8002bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	333c      	adds	r3, #60	; 0x3c
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
              m[0]  * m[11] * m[13] +
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	edd3 6a00 	vldr	s13, [r3]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	332c      	adds	r3, #44	; 0x2c
 8002bd2:	edd3 7a00 	vldr	s15, [r3]
 8002bd6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3334      	adds	r3, #52	; 0x34
 8002bde:	edd3 7a00 	vldr	s15, [r3]
 8002be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[9] = -m[0]  * m[9] * m[15] +
 8002be6:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[8]  * m[1] * m[15] -
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3320      	adds	r3, #32
 8002bee:	edd3 6a00 	vldr	s13, [r3]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	333c      	adds	r3, #60	; 0x3c
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[0]  * m[11] * m[13] +
 8002c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[8]  * m[3] * m[13] -
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3320      	adds	r3, #32
 8002c12:	edd3 6a00 	vldr	s13, [r3]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	edd3 7a00 	vldr	s15, [r3]
 8002c1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3334      	adds	r3, #52	; 0x34
 8002c26:	edd3 7a00 	vldr	s15, [r3]
 8002c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[8]  * m[1] * m[15] -
 8002c2e:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[12] * m[1] * m[11] +
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3330      	adds	r3, #48	; 0x30
 8002c36:	edd3 6a00 	vldr	s13, [r3]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	edd3 7a00 	vldr	s15, [r3]
 8002c42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	332c      	adds	r3, #44	; 0x2c
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[8]  * m[3] * m[13] -
 8002c52:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[12] * m[3] * m[9];
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3330      	adds	r3, #48	; 0x30
 8002c5a:	edd3 6a00 	vldr	s13, [r3]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	330c      	adds	r3, #12
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3324      	adds	r3, #36	; 0x24
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[12] * m[1] * m[11] +
 8002c76:	ee77 7a27 	vadd.f32	s15, s14, s15
    inv[9] = -m[0]  * m[9] * m[15] +
 8002c7a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    inv[13] = m[0]  * m[9] * m[14] -
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	ed93 7a00 	vldr	s14, [r3]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3324      	adds	r3, #36	; 0x24
 8002c88:	edd3 7a00 	vldr	s15, [r3]
 8002c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3338      	adds	r3, #56	; 0x38
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	ee27 7a27 	vmul.f32	s14, s14, s15
              m[0]  * m[10] * m[13] -
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	edd3 6a00 	vldr	s13, [r3]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3328      	adds	r3, #40	; 0x28
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3334      	adds	r3, #52	; 0x34
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[13] = m[0]  * m[9] * m[14] -
 8002cba:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[8]  * m[1] * m[14] +
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3320      	adds	r3, #32
 8002cc2:	edd3 6a00 	vldr	s13, [r3]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	edd3 7a00 	vldr	s15, [r3]
 8002cce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3338      	adds	r3, #56	; 0x38
 8002cd6:	edd3 7a00 	vldr	s15, [r3]
 8002cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[0]  * m[10] * m[13] -
 8002cde:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[8]  * m[2] * m[13] +
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3320      	adds	r3, #32
 8002ce6:	edd3 6a00 	vldr	s13, [r3]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3308      	adds	r3, #8
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3334      	adds	r3, #52	; 0x34
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[8]  * m[1] * m[14] +
 8002d02:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[12] * m[1] * m[10] -
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3330      	adds	r3, #48	; 0x30
 8002d0a:	edd3 6a00 	vldr	s13, [r3]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	edd3 7a00 	vldr	s15, [r3]
 8002d16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3328      	adds	r3, #40	; 0x28
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[8]  * m[2] * m[13] +
 8002d26:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[12] * m[2] * m[9];
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3330      	adds	r3, #48	; 0x30
 8002d2e:	edd3 6a00 	vldr	s13, [r3]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3308      	adds	r3, #8
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3324      	adds	r3, #36	; 0x24
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[12] * m[1] * m[10] -
 8002d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
    inv[13] = m[0]  * m[9] * m[14] -
 8002d4e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    inv[2] = m[1]  * m[6] * m[15] -
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3304      	adds	r3, #4
 8002d56:	ed93 7a00 	vldr	s14, [r3]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3318      	adds	r3, #24
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	333c      	adds	r3, #60	; 0x3c
 8002d6a:	edd3 7a00 	vldr	s15, [r3]
 8002d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
             m[1]  * m[7] * m[14] -
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3304      	adds	r3, #4
 8002d76:	edd3 6a00 	vldr	s13, [r3]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	331c      	adds	r3, #28
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3338      	adds	r3, #56	; 0x38
 8002d8a:	edd3 7a00 	vldr	s15, [r3]
 8002d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[2] = m[1]  * m[6] * m[15] -
 8002d92:	ee37 7a67 	vsub.f32	s14, s14, s15
             m[5]  * m[2] * m[15] +
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3314      	adds	r3, #20
 8002d9a:	edd3 6a00 	vldr	s13, [r3]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3308      	adds	r3, #8
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	333c      	adds	r3, #60	; 0x3c
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[1]  * m[7] * m[14] -
 8002db6:	ee37 7a67 	vsub.f32	s14, s14, s15
             m[5]  * m[3] * m[14] +
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3314      	adds	r3, #20
 8002dbe:	edd3 6a00 	vldr	s13, [r3]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3338      	adds	r3, #56	; 0x38
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[5]  * m[2] * m[15] +
 8002dda:	ee37 7a27 	vadd.f32	s14, s14, s15
             m[13] * m[2] * m[7] -
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3334      	adds	r3, #52	; 0x34
 8002de2:	edd3 6a00 	vldr	s13, [r3]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3308      	adds	r3, #8
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	331c      	adds	r3, #28
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[5]  * m[3] * m[14] +
 8002dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
             m[13] * m[3] * m[6];
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3334      	adds	r3, #52	; 0x34
 8002e06:	edd3 6a00 	vldr	s13, [r3]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	edd3 7a00 	vldr	s15, [r3]
 8002e12:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3318      	adds	r3, #24
 8002e1a:	edd3 7a00 	vldr	s15, [r3]
 8002e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[13] * m[2] * m[7] -
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
    inv[2] = m[1]  * m[6] * m[15] -
 8002e26:	edc7 7a04 	vstr	s15, [r7, #16]

    inv[6] = -m[0]  * m[6] * m[15] +
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	eeb1 7a67 	vneg.f32	s14, s15
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3318      	adds	r3, #24
 8002e38:	edd3 7a00 	vldr	s15, [r3]
 8002e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	333c      	adds	r3, #60	; 0x3c
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	ee27 7a27 	vmul.f32	s14, s14, s15
              m[0]  * m[7] * m[14] +
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	edd3 6a00 	vldr	s13, [r3]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	331c      	adds	r3, #28
 8002e56:	edd3 7a00 	vldr	s15, [r3]
 8002e5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3338      	adds	r3, #56	; 0x38
 8002e62:	edd3 7a00 	vldr	s15, [r3]
 8002e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[6] = -m[0]  * m[6] * m[15] +
 8002e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[4]  * m[2] * m[15] -
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3310      	adds	r3, #16
 8002e72:	edd3 6a00 	vldr	s13, [r3]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3308      	adds	r3, #8
 8002e7a:	edd3 7a00 	vldr	s15, [r3]
 8002e7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	333c      	adds	r3, #60	; 0x3c
 8002e86:	edd3 7a00 	vldr	s15, [r3]
 8002e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[0]  * m[7] * m[14] +
 8002e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[4]  * m[3] * m[14] -
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3310      	adds	r3, #16
 8002e96:	edd3 6a00 	vldr	s13, [r3]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	edd3 7a00 	vldr	s15, [r3]
 8002ea2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3338      	adds	r3, #56	; 0x38
 8002eaa:	edd3 7a00 	vldr	s15, [r3]
 8002eae:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[4]  * m[2] * m[15] -
 8002eb2:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[12] * m[2] * m[7] +
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3330      	adds	r3, #48	; 0x30
 8002eba:	edd3 6a00 	vldr	s13, [r3]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	331c      	adds	r3, #28
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[4]  * m[3] * m[14] -
 8002ed6:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[12] * m[3] * m[6];
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3330      	adds	r3, #48	; 0x30
 8002ede:	edd3 6a00 	vldr	s13, [r3]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3318      	adds	r3, #24
 8002ef2:	edd3 7a00 	vldr	s15, [r3]
 8002ef6:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[12] * m[2] * m[7] +
 8002efa:	ee77 7a27 	vadd.f32	s15, s14, s15
    inv[6] = -m[0]  * m[6] * m[15] +
 8002efe:	edc7 7a08 	vstr	s15, [r7, #32]

    inv[10] = m[0]  * m[5] * m[15] -
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	ed93 7a00 	vldr	s14, [r3]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3314      	adds	r3, #20
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	333c      	adds	r3, #60	; 0x3c
 8002f18:	edd3 7a00 	vldr	s15, [r3]
 8002f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
              m[0]  * m[7] * m[13] -
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	edd3 6a00 	vldr	s13, [r3]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	331c      	adds	r3, #28
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3334      	adds	r3, #52	; 0x34
 8002f36:	edd3 7a00 	vldr	s15, [r3]
 8002f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[10] = m[0]  * m[5] * m[15] -
 8002f3e:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[4]  * m[1] * m[15] +
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3310      	adds	r3, #16
 8002f46:	edd3 6a00 	vldr	s13, [r3]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	edd3 7a00 	vldr	s15, [r3]
 8002f52:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	333c      	adds	r3, #60	; 0x3c
 8002f5a:	edd3 7a00 	vldr	s15, [r3]
 8002f5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[0]  * m[7] * m[13] -
 8002f62:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[4]  * m[3] * m[13] +
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3310      	adds	r3, #16
 8002f6a:	edd3 6a00 	vldr	s13, [r3]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	330c      	adds	r3, #12
 8002f72:	edd3 7a00 	vldr	s15, [r3]
 8002f76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3334      	adds	r3, #52	; 0x34
 8002f7e:	edd3 7a00 	vldr	s15, [r3]
 8002f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[4]  * m[1] * m[15] +
 8002f86:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[12] * m[1] * m[7] -
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3330      	adds	r3, #48	; 0x30
 8002f8e:	edd3 6a00 	vldr	s13, [r3]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3304      	adds	r3, #4
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	331c      	adds	r3, #28
 8002fa2:	edd3 7a00 	vldr	s15, [r3]
 8002fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[4]  * m[3] * m[13] +
 8002faa:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[12] * m[3] * m[5];
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3330      	adds	r3, #48	; 0x30
 8002fb2:	edd3 6a00 	vldr	s13, [r3]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3314      	adds	r3, #20
 8002fc6:	edd3 7a00 	vldr	s15, [r3]
 8002fca:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[12] * m[1] * m[7] -
 8002fce:	ee77 7a67 	vsub.f32	s15, s14, s15
    inv[10] = m[0]  * m[5] * m[15] -
 8002fd2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    inv[14] = -m[0]  * m[5] * m[14] +
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	eeb1 7a67 	vneg.f32	s14, s15
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3338      	adds	r3, #56	; 0x38
 8002ff0:	edd3 7a00 	vldr	s15, [r3]
 8002ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
               m[0]  * m[6] * m[13] +
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	edd3 6a00 	vldr	s13, [r3]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3318      	adds	r3, #24
 8003002:	edd3 7a00 	vldr	s15, [r3]
 8003006:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3334      	adds	r3, #52	; 0x34
 800300e:	edd3 7a00 	vldr	s15, [r3]
 8003012:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[14] = -m[0]  * m[5] * m[14] +
 8003016:	ee37 7a27 	vadd.f32	s14, s14, s15
               m[4]  * m[1] * m[14] -
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3310      	adds	r3, #16
 800301e:	edd3 6a00 	vldr	s13, [r3]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3304      	adds	r3, #4
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3338      	adds	r3, #56	; 0x38
 8003032:	edd3 7a00 	vldr	s15, [r3]
 8003036:	ee66 7aa7 	vmul.f32	s15, s13, s15
               m[0]  * m[6] * m[13] +
 800303a:	ee37 7a27 	vadd.f32	s14, s14, s15
               m[4]  * m[2] * m[13] -
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3310      	adds	r3, #16
 8003042:	edd3 6a00 	vldr	s13, [r3]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3308      	adds	r3, #8
 800304a:	edd3 7a00 	vldr	s15, [r3]
 800304e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3334      	adds	r3, #52	; 0x34
 8003056:	edd3 7a00 	vldr	s15, [r3]
 800305a:	ee66 7aa7 	vmul.f32	s15, s13, s15
               m[4]  * m[1] * m[14] -
 800305e:	ee37 7a67 	vsub.f32	s14, s14, s15
               m[12] * m[1] * m[6] +
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3330      	adds	r3, #48	; 0x30
 8003066:	edd3 6a00 	vldr	s13, [r3]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3304      	adds	r3, #4
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3318      	adds	r3, #24
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	ee66 7aa7 	vmul.f32	s15, s13, s15
               m[4]  * m[2] * m[13] -
 8003082:	ee37 7a67 	vsub.f32	s14, s14, s15
               m[12] * m[2] * m[5];
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3330      	adds	r3, #48	; 0x30
 800308a:	edd3 6a00 	vldr	s13, [r3]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3308      	adds	r3, #8
 8003092:	edd3 7a00 	vldr	s15, [r3]
 8003096:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3314      	adds	r3, #20
 800309e:	edd3 7a00 	vldr	s15, [r3]
 80030a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
               m[12] * m[1] * m[6] +
 80030a6:	ee77 7a27 	vadd.f32	s15, s14, s15
    inv[14] = -m[0]  * m[5] * m[14] +
 80030aa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

    inv[3] = -m[1] * m[6] * m[11] +
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3304      	adds	r3, #4
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	eeb1 7a67 	vneg.f32	s14, s15
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3318      	adds	r3, #24
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	332c      	adds	r3, #44	; 0x2c
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	ee27 7a27 	vmul.f32	s14, s14, s15
              m[1] * m[7] * m[10] +
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3304      	adds	r3, #4
 80030d6:	edd3 6a00 	vldr	s13, [r3]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	331c      	adds	r3, #28
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3328      	adds	r3, #40	; 0x28
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[3] = -m[1] * m[6] * m[11] +
 80030f2:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[5] * m[2] * m[11] -
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3314      	adds	r3, #20
 80030fa:	edd3 6a00 	vldr	s13, [r3]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3308      	adds	r3, #8
 8003102:	edd3 7a00 	vldr	s15, [r3]
 8003106:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	332c      	adds	r3, #44	; 0x2c
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[1] * m[7] * m[10] +
 8003116:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[5] * m[3] * m[10] -
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3314      	adds	r3, #20
 800311e:	edd3 6a00 	vldr	s13, [r3]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	330c      	adds	r3, #12
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3328      	adds	r3, #40	; 0x28
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[5] * m[2] * m[11] -
 800313a:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[9] * m[2] * m[7] +
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3324      	adds	r3, #36	; 0x24
 8003142:	edd3 6a00 	vldr	s13, [r3]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3308      	adds	r3, #8
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	331c      	adds	r3, #28
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[5] * m[3] * m[10] -
 800315e:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[9] * m[3] * m[6];
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3324      	adds	r3, #36	; 0x24
 8003166:	edd3 6a00 	vldr	s13, [r3]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	330c      	adds	r3, #12
 800316e:	edd3 7a00 	vldr	s15, [r3]
 8003172:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3318      	adds	r3, #24
 800317a:	edd3 7a00 	vldr	s15, [r3]
 800317e:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[9] * m[2] * m[7] +
 8003182:	ee77 7a27 	vadd.f32	s15, s14, s15
    inv[3] = -m[1] * m[6] * m[11] +
 8003186:	edc7 7a05 	vstr	s15, [r7, #20]

    inv[7] = m[0] * m[6] * m[11] -
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	ed93 7a00 	vldr	s14, [r3]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3318      	adds	r3, #24
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	332c      	adds	r3, #44	; 0x2c
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	ee27 7a27 	vmul.f32	s14, s14, s15
             m[0] * m[7] * m[10] -
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	edd3 6a00 	vldr	s13, [r3]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	331c      	adds	r3, #28
 80031b2:	edd3 7a00 	vldr	s15, [r3]
 80031b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3328      	adds	r3, #40	; 0x28
 80031be:	edd3 7a00 	vldr	s15, [r3]
 80031c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[7] = m[0] * m[6] * m[11] -
 80031c6:	ee37 7a67 	vsub.f32	s14, s14, s15
             m[4] * m[2] * m[11] +
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3310      	adds	r3, #16
 80031ce:	edd3 6a00 	vldr	s13, [r3]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3308      	adds	r3, #8
 80031d6:	edd3 7a00 	vldr	s15, [r3]
 80031da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	332c      	adds	r3, #44	; 0x2c
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[0] * m[7] * m[10] -
 80031ea:	ee37 7a67 	vsub.f32	s14, s14, s15
             m[4] * m[3] * m[10] +
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3310      	adds	r3, #16
 80031f2:	edd3 6a00 	vldr	s13, [r3]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	330c      	adds	r3, #12
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3328      	adds	r3, #40	; 0x28
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[4] * m[2] * m[11] +
 800320e:	ee37 7a27 	vadd.f32	s14, s14, s15
             m[8] * m[2] * m[7] -
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3320      	adds	r3, #32
 8003216:	edd3 6a00 	vldr	s13, [r3]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3308      	adds	r3, #8
 800321e:	edd3 7a00 	vldr	s15, [r3]
 8003222:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	331c      	adds	r3, #28
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[4] * m[3] * m[10] +
 8003232:	ee37 7a27 	vadd.f32	s14, s14, s15
             m[8] * m[3] * m[6];
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3320      	adds	r3, #32
 800323a:	edd3 6a00 	vldr	s13, [r3]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	330c      	adds	r3, #12
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3318      	adds	r3, #24
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	ee66 7aa7 	vmul.f32	s15, s13, s15
             m[8] * m[2] * m[7] -
 8003256:	ee77 7a67 	vsub.f32	s15, s14, s15
    inv[7] = m[0] * m[6] * m[11] -
 800325a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    inv[11] = -m[0] * m[5] * m[11] +
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	eeb1 7a67 	vneg.f32	s14, s15
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3314      	adds	r3, #20
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	332c      	adds	r3, #44	; 0x2c
 8003278:	edd3 7a00 	vldr	s15, [r3]
 800327c:	ee27 7a27 	vmul.f32	s14, s14, s15
               m[0] * m[7] * m[9] +
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	edd3 6a00 	vldr	s13, [r3]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	331c      	adds	r3, #28
 800328a:	edd3 7a00 	vldr	s15, [r3]
 800328e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3324      	adds	r3, #36	; 0x24
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[11] = -m[0] * m[5] * m[11] +
 800329e:	ee37 7a27 	vadd.f32	s14, s14, s15
               m[4] * m[1] * m[11] -
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3310      	adds	r3, #16
 80032a6:	edd3 6a00 	vldr	s13, [r3]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3304      	adds	r3, #4
 80032ae:	edd3 7a00 	vldr	s15, [r3]
 80032b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	332c      	adds	r3, #44	; 0x2c
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	ee66 7aa7 	vmul.f32	s15, s13, s15
               m[0] * m[7] * m[9] +
 80032c2:	ee37 7a27 	vadd.f32	s14, s14, s15
               m[4] * m[3] * m[9] -
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3310      	adds	r3, #16
 80032ca:	edd3 6a00 	vldr	s13, [r3]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	330c      	adds	r3, #12
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3324      	adds	r3, #36	; 0x24
 80032de:	edd3 7a00 	vldr	s15, [r3]
 80032e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
               m[4] * m[1] * m[11] -
 80032e6:	ee37 7a67 	vsub.f32	s14, s14, s15
               m[8] * m[1] * m[7] +
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3320      	adds	r3, #32
 80032ee:	edd3 6a00 	vldr	s13, [r3]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	331c      	adds	r3, #28
 8003302:	edd3 7a00 	vldr	s15, [r3]
 8003306:	ee66 7aa7 	vmul.f32	s15, s13, s15
               m[4] * m[3] * m[9] -
 800330a:	ee37 7a67 	vsub.f32	s14, s14, s15
               m[8] * m[3] * m[5];
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3320      	adds	r3, #32
 8003312:	edd3 6a00 	vldr	s13, [r3]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	330c      	adds	r3, #12
 800331a:	edd3 7a00 	vldr	s15, [r3]
 800331e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3314      	adds	r3, #20
 8003326:	edd3 7a00 	vldr	s15, [r3]
 800332a:	ee66 7aa7 	vmul.f32	s15, s13, s15
               m[8] * m[1] * m[7] +
 800332e:	ee77 7a27 	vadd.f32	s15, s14, s15
    inv[11] = -m[0] * m[5] * m[11] +
 8003332:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    inv[15] = m[0] * m[5] * m[10] -
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	ed93 7a00 	vldr	s14, [r3]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3314      	adds	r3, #20
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3328      	adds	r3, #40	; 0x28
 800334c:	edd3 7a00 	vldr	s15, [r3]
 8003350:	ee27 7a27 	vmul.f32	s14, s14, s15
              m[0] * m[6] * m[9] -
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	edd3 6a00 	vldr	s13, [r3]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3318      	adds	r3, #24
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3324      	adds	r3, #36	; 0x24
 800336a:	edd3 7a00 	vldr	s15, [r3]
 800336e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    inv[15] = m[0] * m[5] * m[10] -
 8003372:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[4] * m[1] * m[10] +
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3310      	adds	r3, #16
 800337a:	edd3 6a00 	vldr	s13, [r3]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	edd3 7a00 	vldr	s15, [r3]
 8003386:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3328      	adds	r3, #40	; 0x28
 800338e:	edd3 7a00 	vldr	s15, [r3]
 8003392:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[0] * m[6] * m[9] -
 8003396:	ee37 7a67 	vsub.f32	s14, s14, s15
              m[4] * m[2] * m[9] +
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3310      	adds	r3, #16
 800339e:	edd3 6a00 	vldr	s13, [r3]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3308      	adds	r3, #8
 80033a6:	edd3 7a00 	vldr	s15, [r3]
 80033aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3324      	adds	r3, #36	; 0x24
 80033b2:	edd3 7a00 	vldr	s15, [r3]
 80033b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[4] * m[1] * m[10] +
 80033ba:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[8] * m[1] * m[6] -
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3320      	adds	r3, #32
 80033c2:	edd3 6a00 	vldr	s13, [r3]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	edd3 7a00 	vldr	s15, [r3]
 80033ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3318      	adds	r3, #24
 80033d6:	edd3 7a00 	vldr	s15, [r3]
 80033da:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[4] * m[2] * m[9] +
 80033de:	ee37 7a27 	vadd.f32	s14, s14, s15
              m[8] * m[2] * m[5];
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3320      	adds	r3, #32
 80033e6:	edd3 6a00 	vldr	s13, [r3]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3308      	adds	r3, #8
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3314      	adds	r3, #20
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
              m[8] * m[1] * m[6] -
 8003402:	ee77 7a67 	vsub.f32	s15, s14, s15
    inv[15] = m[0] * m[5] * m[10] -
 8003406:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	ed93 7a00 	vldr	s14, [r3]
 8003410:	edd7 7a02 	vldr	s15, [r7, #8]
 8003414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	edd3 6a00 	vldr	s13, [r3]
 8003420:	edd7 7a06 	vldr	s15, [r7, #24]
 8003424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003428:	ee37 7a27 	vadd.f32	s14, s14, s15
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3308      	adds	r3, #8
 8003430:	edd3 6a00 	vldr	s13, [r3]
 8003434:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800343c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	330c      	adds	r3, #12
 8003444:	edd3 6a00 	vldr	s13, [r3]
 8003448:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800344c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003454:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48



    det = 1.0 / det;
 8003458:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800345c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003464:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    for (i = 0; i < 16; i++)
 8003468:	2300      	movs	r3, #0
 800346a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800346c:	e014      	b.n	8003498 <gluInvertMatrix_4x4+0xe14>
        invOut[i] = inv[i] * det;
 800346e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	4413      	add	r3, r2
 8003476:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003478:	0092      	lsls	r2, r2, #2
 800347a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800347e:	440a      	add	r2, r1
 8003480:	3a48      	subs	r2, #72	; 0x48
 8003482:	ed92 7a00 	vldr	s14, [r2]
 8003486:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800348a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348e:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < 16; i++)
 8003492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003494:	3301      	adds	r3, #1
 8003496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800349a:	2b0f      	cmp	r3, #15
 800349c:	dde7      	ble.n	800346e <gluInvertMatrix_4x4+0xdea>

}
 800349e:	bf00      	nop
 80034a0:	3754      	adds	r7, #84	; 0x54
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <init_I2C3>:

	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
}

void init_I2C3(void) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
	I2C_InitTypeDef I2C_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;


	/* Enable I2C and GPIO clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C3, ENABLE);
 80034b2:	2101      	movs	r1, #1
 80034b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80034b8:	f7fe f868 	bl	800158c <RCC_APB1PeriphClockCmd>
	RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80034bc:	2101      	movs	r1, #1
 80034be:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80034c2:	f7fe f8a3 	bl	800160c <RCC_APB1PeriphResetCmd>
	RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);
 80034c6:	2100      	movs	r1, #0
 80034c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80034cc:	f7fe f89e 	bl	800160c <RCC_APB1PeriphResetCmd>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC, ENABLE);
 80034d0:	2101      	movs	r1, #1
 80034d2:	2005      	movs	r0, #5
 80034d4:	f7fe f83a 	bl	800154c <RCC_AHB1PeriphClockCmd>



	/* Configure I2C pins: SCL*/
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 80034d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034dc:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80034de:	2303      	movs	r3, #3
 80034e0:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80034e2:	2302      	movs	r3, #2
 80034e4:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80034e6:	2301      	movs	r3, #1
 80034e8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80034ea:	2301      	movs	r3, #1
 80034ec:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80034ee:	463b      	mov	r3, r7
 80034f0:	4619      	mov	r1, r3
 80034f2:	481e      	ldr	r0, [pc, #120]	; (800356c <init_I2C3+0xc0>)
 80034f4:	f7fd fc94 	bl	8000e20 <GPIO_Init>

	/* Configure I2C pins: SDA */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80034f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034fc:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80034fe:	2303      	movs	r3, #3
 8003500:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003502:	2302      	movs	r3, #2
 8003504:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003506:	2301      	movs	r3, #1
 8003508:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800350a:	2301      	movs	r3, #1
 800350c:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 800350e:	463b      	mov	r3, r7
 8003510:	4619      	mov	r1, r3
 8003512:	4817      	ldr	r0, [pc, #92]	; (8003570 <init_I2C3+0xc4>)
 8003514:	f7fd fc84 	bl	8000e20 <GPIO_Init>


	GPIO_PinAFConfig(GPIOA, GPIO_PinSource8, GPIO_AF_I2C3);
 8003518:	2204      	movs	r2, #4
 800351a:	2108      	movs	r1, #8
 800351c:	4813      	ldr	r0, [pc, #76]	; (800356c <init_I2C3+0xc0>)
 800351e:	f7fd fd27 	bl	8000f70 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_I2C3);
 8003522:	2204      	movs	r2, #4
 8003524:	2109      	movs	r1, #9
 8003526:	4812      	ldr	r0, [pc, #72]	; (8003570 <init_I2C3+0xc4>)
 8003528:	f7fd fd22 	bl	8000f70 <GPIO_PinAFConfig>

	/* I2C configuration */
	I2C_DeInit(I2C3);
 800352c:	4811      	ldr	r0, [pc, #68]	; (8003574 <init_I2C3+0xc8>)
 800352e:	f7fd fd69 	bl	8001004 <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8003532:	2300      	movs	r3, #0
 8003534:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2; //https://community.st.com/s/feed/0D50X00009XkaUGSAZ
 8003536:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800353a:	81fb      	strh	r3, [r7, #14]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800353c:	2300      	movs	r3, #0
 800353e:	823b      	strh	r3, [r7, #16]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8003540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003544:	827b      	strh	r3, [r7, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8003546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800354a:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED_1;
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <init_I2C3+0xcc>)
 800354e:	60bb      	str	r3, [r7, #8]

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C3, &I2C_InitStructure);
 8003550:	f107 0308 	add.w	r3, r7, #8
 8003554:	4619      	mov	r1, r3
 8003556:	4807      	ldr	r0, [pc, #28]	; (8003574 <init_I2C3+0xc8>)
 8003558:	f7fd fd8e 	bl	8001078 <I2C_Init>

	/* I2C Peripheral Enable */
	I2C_Cmd(I2C3, ENABLE);
 800355c:	2101      	movs	r1, #1
 800355e:	4805      	ldr	r0, [pc, #20]	; (8003574 <init_I2C3+0xc8>)
 8003560:	f7fd fe4c 	bl	80011fc <I2C_Cmd>
}
 8003564:	bf00      	nop
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40020000 	.word	0x40020000
 8003570:	40020800 	.word	0x40020800
 8003574:	40005c00 	.word	0x40005c00
 8003578:	00061a80 	.word	0x00061a80

0800357c <I2C_SelectRegister>:

/*
 * reads single byte
 */

void I2C_SelectRegister(I2C_TypeDef* I2Cx, uint8_t address, uint8_t start_register){
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
 8003588:	4613      	mov	r3, r2
 800358a:	70bb      	strb	r3, [r7, #2]
	//only need to run once and then can run multiple I2C_ReadIMU
	//Transmit
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 800358c:	bf00      	nop
 800358e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fefe 	bl	8001394 <I2C_GetFlagStatus>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f7      	bne.n	800358e <I2C_SelectRegister+0x12>
	I2C_GenerateSTART(I2Cx, ENABLE);
 800359e:	2101      	movs	r1, #1
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fd fe4b 	bl	800123c <I2C_GenerateSTART>

	// wait for I2C1 EV5 --> start condition correctly released on the bus
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 80035a6:	bf00      	nop
 80035a8:	4912      	ldr	r1, [pc, #72]	; (80035f4 <I2C_SelectRegister+0x78>)
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fd fec2 	bl	8001334 <I2C_CheckEvent>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f8      	beq.n	80035a8 <I2C_SelectRegister+0x2c>
	I2C_Send7bitAddress(I2Cx, address, TRANSMIT);
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	2200      	movs	r2, #0
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fd fe7d 	bl	80012bc <I2C_Send7bitAddress>

	// wait for EV6 --> Slave has acknowledged
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 80035c2:	bf00      	nop
 80035c4:	490c      	ldr	r1, [pc, #48]	; (80035f8 <I2C_SelectRegister+0x7c>)
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd feb4 	bl	8001334 <I2C_CheckEvent>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f8      	beq.n	80035c4 <I2C_SelectRegister+0x48>
	I2C_SendData(I2Cx, start_register);
 80035d2:	78bb      	ldrb	r3, [r7, #2]
 80035d4:	4619      	mov	r1, r3
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd fe8e 	bl	80012f8 <I2C_SendData>

	// wait for EV8 --> transmission to start
	while(!I2C_CheckEvent(I2Cx,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80035dc:	bf00      	nop
 80035de:	4907      	ldr	r1, [pc, #28]	; (80035fc <I2C_SelectRegister+0x80>)
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7fd fea7 	bl	8001334 <I2C_CheckEvent>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f8      	beq.n	80035de <I2C_SelectRegister+0x62>

}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	00030001 	.word	0x00030001
 80035f8:	00070082 	.word	0x00070082
 80035fc:	00070084 	.word	0x00070084

08003600 <I2C_ReadIMU>:

void I2C_ReadIMU(I2C_TypeDef* I2Cx, uint8_t address, uint8_t buffer[]) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	460b      	mov	r3, r1
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	72fb      	strb	r3, [r7, #11]

	//only reads single byte
	//Receive

	I2C_GenerateSTART(I2Cx, ENABLE);
 800360e:	2101      	movs	r1, #1
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7fd fe13 	bl	800123c <I2C_GenerateSTART>

	// wait for I2C1 EV5 --> start condition correctly released on the bus
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 8003616:	bf00      	nop
 8003618:	4919      	ldr	r1, [pc, #100]	; (8003680 <I2C_ReadIMU+0x80>)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7fd fe8a 	bl	8001334 <I2C_CheckEvent>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f8      	beq.n	8003618 <I2C_ReadIMU+0x18>
	I2C_Send7bitAddress(I2Cx, address, RECEIVE);
 8003626:	7afb      	ldrb	r3, [r7, #11]
 8003628:	2201      	movs	r2, #1
 800362a:	4619      	mov	r1, r3
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f7fd fe45 	bl	80012bc <I2C_Send7bitAddress>

	while(!I2C_CheckEvent(I2Cx,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8003632:	bf00      	nop
 8003634:	4913      	ldr	r1, [pc, #76]	; (8003684 <I2C_ReadIMU+0x84>)
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f7fd fe7c 	bl	8001334 <I2C_CheckEvent>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f8      	beq.n	8003634 <I2C_ReadIMU+0x34>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8003642:	bf00      	nop
 8003644:	4910      	ldr	r1, [pc, #64]	; (8003688 <I2C_ReadIMU+0x88>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7fd fe74 	bl	8001334 <I2C_CheckEvent>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f8      	beq.n	8003644 <I2C_ReadIMU+0x44>
	buffer[0] = I2C_ReceiveData(I2Cx);
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f7fd fe60 	bl	8001318 <I2C_ReceiveData>
 8003658:	4603      	mov	r3, r0
 800365a:	461a      	mov	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	701a      	strb	r2, [r3, #0]
	I2Cx->CR1 &= ~I2C_CR1_ACK;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	801a      	strh	r2, [r3, #0]
	I2C_GenerateSTOP(I2Cx, ENABLE);
 8003670:	2101      	movs	r1, #1
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f7fd fe02 	bl	800127c <I2C_GenerateSTOP>
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	00030001 	.word	0x00030001
 8003684:	00030002 	.word	0x00030002
 8003688:	00030040 	.word	0x00030040

0800368c <I2C_Read_Multiple>:

void I2C_Read_Multiple(I2C_TypeDef* I2Cx, uint8_t address, uint8_t buffer[], uint8_t buff_size){
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	461a      	mov	r2, r3
 8003698:	460b      	mov	r3, r1
 800369a:	72fb      	strb	r3, [r7, #11]
 800369c:	4613      	mov	r3, r2
 800369e:	72bb      	strb	r3, [r7, #10]

	I2C_GenerateSTART(I2Cx, ENABLE);
 80036a0:	2101      	movs	r1, #1
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f7fd fdca 	bl	800123c <I2C_GenerateSTART>

	// wait for I2C1 EV5 --> start condition correctly released on the bus
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 80036a8:	bf00      	nop
 80036aa:	492e      	ldr	r1, [pc, #184]	; (8003764 <I2C_Read_Multiple+0xd8>)
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7fd fe41 	bl	8001334 <I2C_CheckEvent>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f8      	beq.n	80036aa <I2C_Read_Multiple+0x1e>
	I2C_Send7bitAddress(I2Cx, address, RECEIVE);
 80036b8:	7afb      	ldrb	r3, [r7, #11]
 80036ba:	2201      	movs	r2, #1
 80036bc:	4619      	mov	r1, r3
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7fd fdfc 	bl	80012bc <I2C_Send7bitAddress>

	while(!I2C_CheckEvent(I2Cx,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 80036c4:	bf00      	nop
 80036c6:	4928      	ldr	r1, [pc, #160]	; (8003768 <I2C_Read_Multiple+0xdc>)
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f7fd fe33 	bl	8001334 <I2C_CheckEvent>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f8      	beq.n	80036c6 <I2C_Read_Multiple+0x3a>

	for (int i = 0; i < buff_size; i++){
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e03c      	b.n	8003754 <I2C_Read_Multiple+0xc8>
		if (i < buff_size - 1){
 80036da:	7abb      	ldrb	r3, [r7, #10]
 80036dc:	1e5a      	subs	r2, r3, #1
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	dd18      	ble.n	8003716 <I2C_Read_Multiple+0x8a>
			I2Cx->CR1 |= I2C_CR1_ACK;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	801a      	strh	r2, [r3, #0]
			while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));
 80036f4:	bf00      	nop
 80036f6:	491d      	ldr	r1, [pc, #116]	; (800376c <I2C_Read_Multiple+0xe0>)
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7fd fe1b 	bl	8001334 <I2C_CheckEvent>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f8      	beq.n	80036f6 <I2C_Read_Multiple+0x6a>
			buffer[i] = I2C_ReceiveData(I2Cx);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	18d4      	adds	r4, r2, r3
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f7fd fe04 	bl	8001318 <I2C_ReceiveData>
 8003710:	4603      	mov	r3, r0
 8003712:	7023      	strb	r3, [r4, #0]
 8003714:	e01b      	b.n	800374e <I2C_Read_Multiple+0xc2>

		} else {
			while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8003716:	bf00      	nop
 8003718:	4914      	ldr	r1, [pc, #80]	; (800376c <I2C_Read_Multiple+0xe0>)
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7fd fe0a 	bl	8001334 <I2C_CheckEvent>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f8      	beq.n	8003718 <I2C_Read_Multiple+0x8c>
			buffer[i] = I2C_ReceiveData(I2Cx);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	18d4      	adds	r4, r2, r3
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7fd fdf3 	bl	8001318 <I2C_ReceiveData>
 8003732:	4603      	mov	r3, r0
 8003734:	7023      	strb	r3, [r4, #0]
			I2Cx->CR1 &= ~I2C_CR1_ACK;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	b29b      	uxth	r3, r3
 800373c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	801a      	strh	r2, [r3, #0]
			I2C_GenerateSTOP(I2Cx, ENABLE);
 8003746:	2101      	movs	r1, #1
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7fd fd97 	bl	800127c <I2C_GenerateSTOP>
	for (int i = 0; i < buff_size; i++){
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	3301      	adds	r3, #1
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	7aba      	ldrb	r2, [r7, #10]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	429a      	cmp	r2, r3
 800375a:	dcbe      	bgt.n	80036da <I2C_Read_Multiple+0x4e>

		}
	}

}
 800375c:	bf00      	nop
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	bd90      	pop	{r4, r7, pc}
 8003764:	00030001 	.word	0x00030001
 8003768:	00030002 	.word	0x00030002
 800376c:	00030040 	.word	0x00030040

08003770 <I2C_WriteIMU>:

void I2C_WriteIMU(I2C_TypeDef* I2Cx, uint8_t address,uint8_t reg, uint8_t data) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	4608      	mov	r0, r1
 800377a:	4611      	mov	r1, r2
 800377c:	461a      	mov	r2, r3
 800377e:	4603      	mov	r3, r0
 8003780:	70fb      	strb	r3, [r7, #3]
 8003782:	460b      	mov	r3, r1
 8003784:	70bb      	strb	r3, [r7, #2]
 8003786:	4613      	mov	r3, r2
 8003788:	707b      	strb	r3, [r7, #1]
	//Transmit
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 800378a:	bf00      	nop
 800378c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7fd fdff 	bl	8001394 <I2C_GetFlagStatus>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f7      	bne.n	800378c <I2C_WriteIMU+0x1c>
	I2C_GenerateSTART(I2Cx, ENABLE);
 800379c:	2101      	movs	r1, #1
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fd4c 	bl	800123c <I2C_GenerateSTART>

	// wait for I2C1 EV5 --> start condition correctly released on the bus
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 80037a4:	bf00      	nop
 80037a6:	491b      	ldr	r1, [pc, #108]	; (8003814 <I2C_WriteIMU+0xa4>)
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7fd fdc3 	bl	8001334 <I2C_CheckEvent>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f8      	beq.n	80037a6 <I2C_WriteIMU+0x36>
	I2C_Send7bitAddress(I2Cx, address, TRANSMIT);
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	2200      	movs	r2, #0
 80037b8:	4619      	mov	r1, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd fd7e 	bl	80012bc <I2C_Send7bitAddress>

	// wait for EV6 --> Slave has acknowledged
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 80037c0:	bf00      	nop
 80037c2:	4915      	ldr	r1, [pc, #84]	; (8003818 <I2C_WriteIMU+0xa8>)
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fd fdb5 	bl	8001334 <I2C_CheckEvent>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f8      	beq.n	80037c2 <I2C_WriteIMU+0x52>
	I2C_SendData(I2Cx, reg);
 80037d0:	78bb      	ldrb	r3, [r7, #2]
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7fd fd8f 	bl	80012f8 <I2C_SendData>

	// wait for EV8 --> transmission to start
	while(!I2C_CheckEvent(I2Cx,I2C_EVENT_MASTER_BYTE_TRANSMITTING));
 80037da:	bf00      	nop
 80037dc:	490f      	ldr	r1, [pc, #60]	; (800381c <I2C_WriteIMU+0xac>)
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd fda8 	bl	8001334 <I2C_CheckEvent>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f8      	beq.n	80037dc <I2C_WriteIMU+0x6c>

	I2C_SendData(I2Cx, data);
 80037ea:	787b      	ldrb	r3, [r7, #1]
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd fd82 	bl	80012f8 <I2C_SendData>

	// wait for EV8 --> transmission to start
	while(!I2C_CheckEvent(I2Cx,I2C_EVENT_MASTER_BYTE_TRANSMITTING));
 80037f4:	bf00      	nop
 80037f6:	4909      	ldr	r1, [pc, #36]	; (800381c <I2C_WriteIMU+0xac>)
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7fd fd9b 	bl	8001334 <I2C_CheckEvent>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f8      	beq.n	80037f6 <I2C_WriteIMU+0x86>

	I2C_GenerateSTOP(I2Cx, ENABLE);
 8003804:	2101      	movs	r1, #1
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd fd38 	bl	800127c <I2C_GenerateSTOP>
}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	00030001 	.word	0x00030001
 8003818:	00070082 	.word	0x00070082
 800381c:	00070080 	.word	0x00070080

08003820 <MPU_Init>:

//	GPIO_SetBits(GPIOB, GPIO_Pin_5);

}

void MPU_Init(I2C_TypeDef* I2Cx){
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
//	delay(200000);
//	select_magnetometer(sensor);
//	delay(200000);
//	self_test(sensor);

	uint8_t temp[] = {0};
 8003828:	2300      	movs	r3, #0
 800382a:	733b      	strb	r3, [r7, #12]
	I2C_SelectRegister(I2C3,MPU_ADDRESS,0x75);
 800382c:	2275      	movs	r2, #117	; 0x75
 800382e:	2168      	movs	r1, #104	; 0x68
 8003830:	4818      	ldr	r0, [pc, #96]	; (8003894 <MPU_Init+0x74>)
 8003832:	f7ff fea3 	bl	800357c <I2C_SelectRegister>
	I2C_ReadIMU(I2C3,MPU_ADDRESS,temp);
 8003836:	f107 030c 	add.w	r3, r7, #12
 800383a:	461a      	mov	r2, r3
 800383c:	2168      	movs	r1, #104	; 0x68
 800383e:	4815      	ldr	r0, [pc, #84]	; (8003894 <MPU_Init+0x74>)
 8003840:	f7ff fede 	bl	8003600 <I2C_ReadIMU>


	I2C_WriteIMU(I2C3,MPU_ADDRESS,PWR_MGMT_1,0x00);
 8003844:	2300      	movs	r3, #0
 8003846:	226b      	movs	r2, #107	; 0x6b
 8003848:	2168      	movs	r1, #104	; 0x68
 800384a:	4812      	ldr	r0, [pc, #72]	; (8003894 <MPU_Init+0x74>)
 800384c:	f7ff ff90 	bl	8003770 <I2C_WriteIMU>
	I2C_WriteIMU(I2C3,MPU_ADDRESS,PWR_MGMT_1,0x01);
 8003850:	2301      	movs	r3, #1
 8003852:	226b      	movs	r2, #107	; 0x6b
 8003854:	2168      	movs	r1, #104	; 0x68
 8003856:	480f      	ldr	r0, [pc, #60]	; (8003894 <MPU_Init+0x74>)
 8003858:	f7ff ff8a 	bl	8003770 <I2C_WriteIMU>

	I2C_WriteIMU(I2C3,MPU_ADDRESS,GYRO_CONFIG_AD,GYRO_INIT_SETTINGS);
 800385c:	2318      	movs	r3, #24
 800385e:	221b      	movs	r2, #27
 8003860:	2168      	movs	r1, #104	; 0x68
 8003862:	480c      	ldr	r0, [pc, #48]	; (8003894 <MPU_Init+0x74>)
 8003864:	f7ff ff84 	bl	8003770 <I2C_WriteIMU>
	I2C_WriteIMU(I2C3,MPU_ADDRESS, ACCEL_CONFIG_1_AD,ACC_CONFIG_1_SETTINGS);
 8003868:	2308      	movs	r3, #8
 800386a:	221c      	movs	r2, #28
 800386c:	2168      	movs	r1, #104	; 0x68
 800386e:	4809      	ldr	r0, [pc, #36]	; (8003894 <MPU_Init+0x74>)
 8003870:	f7ff ff7e 	bl	8003770 <I2C_WriteIMU>
	I2C_WriteIMU(I2C3,MPU_ADDRESS, ACCEL_CONFIG_2_AD,ACC_CONFIG_2_SETTINGS);
 8003874:	2305      	movs	r3, #5
 8003876:	221d      	movs	r2, #29
 8003878:	2168      	movs	r1, #104	; 0x68
 800387a:	4806      	ldr	r0, [pc, #24]	; (8003894 <MPU_Init+0x74>)
 800387c:	f7ff ff78 	bl	8003770 <I2C_WriteIMU>
	I2C_WriteIMU(I2C3,MPU_ADDRESS, CONFIG_AD,CONFIG_INIT);
 8003880:	2305      	movs	r3, #5
 8003882:	221a      	movs	r2, #26
 8003884:	2168      	movs	r1, #104	; 0x68
 8003886:	4803      	ldr	r0, [pc, #12]	; (8003894 <MPU_Init+0x74>)
 8003888:	f7ff ff72 	bl	8003770 <I2C_WriteIMU>
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40005c00 	.word	0x40005c00

08003898 <MPU_GetAccGyro>:

void MPU_GetAccGyro(I2C_TypeDef* I2Cx, int16_t acc[3], int16_t gyro[3], uint8_t temp[2]){
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	; 0x28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
	I2C_SelectRegister(I2Cx,MPU_ADDRESS,ACC_START_ADDRESS);
 80038a6:	223b      	movs	r2, #59	; 0x3b
 80038a8:	2168      	movs	r1, #104	; 0x68
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f7ff fe66 	bl	800357c <I2C_SelectRegister>
	 uint8_t data[14];

	 I2C_Read_Multiple(I2Cx, MPU_ADDRESS, data, 14);
 80038b0:	f107 0214 	add.w	r2, r7, #20
 80038b4:	230e      	movs	r3, #14
 80038b6:	2168      	movs	r1, #104	; 0x68
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f7ff fee7 	bl	800368c <I2C_Read_Multiple>
	 for( int index = 0; index < 3; index ++){
 80038be:	2300      	movs	r3, #0
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
 80038c2:	e039      	b.n	8003938 <MPU_GetAccGyro+0xa0>
		  acc[index] = (int16_t)((uint16_t)data[index * 2+1] + ((uint16_t)(data[index * 2]) << 8));
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	4413      	add	r3, r2
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	0052      	lsls	r2, r2, #1
 80038d0:	3201      	adds	r2, #1
 80038d2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80038d6:	440a      	add	r2, r1
 80038d8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80038dc:	b291      	uxth	r1, r2
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	0052      	lsls	r2, r2, #1
 80038e2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80038e6:	4402      	add	r2, r0
 80038e8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80038ec:	b292      	uxth	r2, r2
 80038ee:	0212      	lsls	r2, r2, #8
 80038f0:	b292      	uxth	r2, r2
 80038f2:	440a      	add	r2, r1
 80038f4:	b292      	uxth	r2, r2
 80038f6:	b212      	sxth	r2, r2
 80038f8:	801a      	strh	r2, [r3, #0]
		  gyro[index] = (int16_t)((uint16_t)data[index * 2 + 9] + ((int16_t)(data[index * 2 + 8]) << 8));
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003904:	0052      	lsls	r2, r2, #1
 8003906:	3209      	adds	r2, #9
 8003908:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800390c:	440a      	add	r2, r1
 800390e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003912:	b291      	uxth	r1, r2
 8003914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003916:	3204      	adds	r2, #4
 8003918:	0052      	lsls	r2, r2, #1
 800391a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800391e:	4402      	add	r2, r0
 8003920:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003924:	b292      	uxth	r2, r2
 8003926:	0212      	lsls	r2, r2, #8
 8003928:	b292      	uxth	r2, r2
 800392a:	440a      	add	r2, r1
 800392c:	b292      	uxth	r2, r2
 800392e:	b212      	sxth	r2, r2
 8003930:	801a      	strh	r2, [r3, #0]
	 for( int index = 0; index < 3; index ++){
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	3301      	adds	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	2b02      	cmp	r3, #2
 800393c:	ddc2      	ble.n	80038c4 <MPU_GetAccGyro+0x2c>

	  }

	 temp[0] = data[6];
 800393e:	7eba      	ldrb	r2, [r7, #26]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	701a      	strb	r2, [r3, #0]
	 temp[1] = data[7];
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	3301      	adds	r3, #1
 8003948:	7efa      	ldrb	r2, [r7, #27]
 800394a:	701a      	strb	r2, [r3, #0]
}
 800394c:	bf00      	nop
 800394e:	3728      	adds	r7, #40	; 0x28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <Control_LoopInit>:
// TODO 500 instead of 1000
int32_t sample_rate = 500;
float32_t sample_time  = 1/5000;


void Control_LoopInit(){
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0

	TIM_TimeBaseInitTypeDef TIM_BaseStruct;
	NVIC_InitTypeDef NVIC_InitStructure;

	// enable clocks
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 800395a:	2101      	movs	r1, #1
 800395c:	2020      	movs	r0, #32
 800395e:	f7fd fe15 	bl	800158c <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseStructInit(&TIM_BaseStruct);
 8003962:	1d3b      	adds	r3, r7, #4
 8003964:	4618      	mov	r0, r3
 8003966:	f7fd fedd 	bl	8001724 <TIM_TimeBaseStructInit>


	TIM_BaseStruct.TIM_ClockDivision = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	81bb      	strh	r3, [r7, #12]
	TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 800396e:	2300      	movs	r3, #0
 8003970:	80fb      	strh	r3, [r7, #6]

	// 250 Hz

	TIM_BaseStruct.TIM_Period = 8399; // 8399 and 9999 for 1s TODO 500 instead of 1000
 8003972:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8003976:	60bb      	str	r3, [r7, #8]
	TIM_BaseStruct.TIM_Prescaler = 9;
 8003978:	2309      	movs	r3, #9
 800397a:	80bb      	strh	r3, [r7, #4]
	TIM_BaseStruct.TIM_RepetitionCounter = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	73bb      	strb	r3, [r7, #14]


	TIM_TimeBaseInit(TIM7, &TIM_BaseStruct);
 8003980:	1d3b      	adds	r3, r7, #4
 8003982:	4619      	mov	r1, r3
 8003984:	480d      	ldr	r0, [pc, #52]	; (80039bc <Control_LoopInit+0x68>)
 8003986:	f7fd fe61 	bl	800164c <TIM_TimeBaseInit>
	TIM_ITConfig(TIM7, TIM_IT_Update, ENABLE);
 800398a:	2201      	movs	r2, #1
 800398c:	2101      	movs	r1, #1
 800398e:	480b      	ldr	r0, [pc, #44]	; (80039bc <Control_LoopInit+0x68>)
 8003990:	f7fd ff1c 	bl	80017cc <TIM_ITConfig>
	TIM_Cmd(TIM7, ENABLE);
 8003994:	2101      	movs	r1, #1
 8003996:	4809      	ldr	r0, [pc, #36]	; (80039bc <Control_LoopInit+0x68>)
 8003998:	f7fd fef8 	bl	800178c <TIM_Cmd>

	NVIC_InitStructure.NVIC_IRQChannel = TIM7_IRQn;
 800399c:	2337      	movs	r3, #55	; 0x37
 800399e:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80039a0:	2301      	movs	r3, #1
 80039a2:	70fb      	strb	r3, [r7, #3]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	70bb      	strb	r3, [r7, #2]

	NVIC_Init(&NVIC_InitStructure);
 80039ac:	463b      	mov	r3, r7
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fd f8d4 	bl	8000b5c <NVIC_Init>

}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40001400 	.word	0x40001400

080039c0 <TIM7_IRQHandler>:

void TIM7_IRQHandler(){
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
	restart_loop = 1;
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <TIM7_IRQHandler+0x18>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 80039ca:	2101      	movs	r1, #1
 80039cc:	4803      	ldr	r0, [pc, #12]	; (80039dc <TIM7_IRQHandler+0x1c>)
 80039ce:	f7fd ff21 	bl	8001814 <TIM_ClearITPendingBit>
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200001f0 	.word	0x200001f0
 80039dc:	40001400 	.word	0x40001400

080039e0 <wait_for_restart>:

void wait_for_restart(){
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
	if (restart_loop == 1){
 80039e4:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <wait_for_restart+0x30>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d104      	bne.n	80039f6 <wait_for_restart+0x16>
		too_slow++;
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <wait_for_restart+0x34>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <wait_for_restart+0x34>)
 80039f4:	6013      	str	r3, [r2, #0]
	}
	while(restart_loop == 0){
 80039f6:	bf00      	nop
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <wait_for_restart+0x30>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0fb      	beq.n	80039f8 <wait_for_restart+0x18>
		;
	}

	restart_loop = 0;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <wait_for_restart+0x30>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	200001f0 	.word	0x200001f0
 8003a14:	200001f4 	.word	0x200001f4

08003a18 <ENCODER_Init>:

#include "encoder.h"



void ENCODER_Init(){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
	 *
	 * TIM2_CH1  PA15
	 * TIM2_CH2  PB3
	 */

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003a1e:	2101      	movs	r1, #1
 8003a20:	2002      	movs	r0, #2
 8003a22:	f7fd fd93 	bl	800154c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003a26:	2101      	movs	r1, #1
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f7fd fd8f 	bl	800154c <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003a2e:	2101      	movs	r1, #1
 8003a30:	2001      	movs	r0, #1
 8003a32:	f7fd fdab 	bl	800158c <RCC_APB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003a36:	2302      	movs	r3, #2
 8003a38:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	75fb      	strb	r3, [r7, #23]

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8003a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a4a:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003a4c:	f107 0310 	add.w	r3, r7, #16
 8003a50:	4619      	mov	r1, r3
 8003a52:	481d      	ldr	r0, [pc, #116]	; (8003ac8 <ENCODER_Init+0xb0>)
 8003a54:	f7fd f9e4 	bl	8000e20 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8003a58:	2308      	movs	r3, #8
 8003a5a:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003a5c:	f107 0310 	add.w	r3, r7, #16
 8003a60:	4619      	mov	r1, r3
 8003a62:	481a      	ldr	r0, [pc, #104]	; (8003acc <ENCODER_Init+0xb4>)
 8003a64:	f7fd f9dc 	bl	8000e20 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource15, GPIO_AF_TIM2);
 8003a68:	2201      	movs	r2, #1
 8003a6a:	210f      	movs	r1, #15
 8003a6c:	4816      	ldr	r0, [pc, #88]	; (8003ac8 <ENCODER_Init+0xb0>)
 8003a6e:	f7fd fa7f 	bl	8000f70 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_TIM2);
 8003a72:	2201      	movs	r2, #1
 8003a74:	2103      	movs	r1, #3
 8003a76:	4815      	ldr	r0, [pc, #84]	; (8003acc <ENCODER_Init+0xb4>)
 8003a78:	f7fd fa7a 	bl	8000f70 <GPIO_PinAFConfig>

	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 0xffffffff;
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a80:	60bb      	str	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	80fb      	strh	r3, [r7, #6]

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a96:	f7fd fdd9 	bl	800164c <TIM_TimeBaseInit>

	/* Configure the timer */
	TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2103      	movs	r1, #3
 8003aa0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003aa4:	f7fd fec7 	bl	8001836 <TIM_EncoderInterfaceConfig>

	TIM_SetCounter(TIM2, 0x7fffffff); //setting counter to prevent overflow //remember to change in EKF
 8003aa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003aac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ab0:	f7fd fe52 	bl	8001758 <TIM_SetCounter>

	/* TIM4 counter enable */
	TIM_Cmd(TIM2, ENABLE);
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003aba:	f7fd fe67 	bl	800178c <TIM_Cmd>

}
 8003abe:	bf00      	nop
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40020000 	.word	0x40020000
 8003acc:	40020400 	.word	0x40020400

08003ad0 <USART_LoggingInit>:

int32_t USART_BaudRate = 500000;



void USART_LoggingInit(){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b096      	sub	sp, #88	; 0x58
 8003ad4:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct;
		DMA_InitTypeDef DMA_InitStruct;
		NVIC_InitTypeDef NVIC_InitStruct;

		// enable clocks
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	2002      	movs	r0, #2
 8003ada:	f7fd fd37 	bl	800154c <RCC_AHB1PeriphClockCmd>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8003ade:	2101      	movs	r1, #1
 8003ae0:	2010      	movs	r0, #16
 8003ae2:	f7fd fd73 	bl	80015cc <RCC_APB2PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003aec:	f7fd fd2e 	bl	800154c <RCC_AHB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_CRC, ENABLE);
 8003af0:	2101      	movs	r1, #1
 8003af2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003af6:	f7fd fd29 	bl	800154c <RCC_AHB1PeriphClockCmd>

		// init pins
		GPIO_StructInit(&GPIO_InitStruct);
 8003afa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd fa1c 	bl	8000f3c <GPIO_StructInit>

		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8003b04:	23c0      	movs	r3, #192	; 0xc0
 8003b06:	643b      	str	r3, [r7, #64]	; 0x40
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b24:	4619      	mov	r1, r3
 8003b26:	4834      	ldr	r0, [pc, #208]	; (8003bf8 <USART_LoggingInit+0x128>)
 8003b28:	f7fd f97a 	bl	8000e20 <GPIO_Init>

		// selective alternative functions
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 8003b2c:	2207      	movs	r2, #7
 8003b2e:	2106      	movs	r1, #6
 8003b30:	4831      	ldr	r0, [pc, #196]	; (8003bf8 <USART_LoggingInit+0x128>)
 8003b32:	f7fd fa1d 	bl	8000f70 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 8003b36:	2207      	movs	r2, #7
 8003b38:	2107      	movs	r1, #7
 8003b3a:	482f      	ldr	r0, [pc, #188]	; (8003bf8 <USART_LoggingInit+0x128>)
 8003b3c:	f7fd fa18 	bl	8000f70 <GPIO_PinAFConfig>

		// init  UART


		USART_InitStruct.USART_BaudRate = USART_BaudRate;
 8003b40:	4b2e      	ldr	r3, [pc, #184]	; (8003bfc <USART_LoggingInit+0x12c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	64bb      	str	r3, [r7, #72]	; 0x48
		USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003b46:	2300      	movs	r3, #0
 8003b48:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8003b4c:	230c      	movs	r3, #12
 8003b4e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		USART_InitStruct.USART_Parity = USART_Parity_No;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

		USART_Init(USART1, &USART_InitStruct);
 8003b64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4825      	ldr	r0, [pc, #148]	; (8003c00 <USART_LoggingInit+0x130>)
 8003b6c:	f7fd feb0 	bl	80018d0 <USART_Init>



//		/* Configure DMA for USART TX, DMA2, Stream7, Channel4 */
		DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)DMA_TX_Buffer;
 8003b70:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <USART_LoggingInit+0x134>)
 8003b72:	60fb      	str	r3, [r7, #12]
		DMA_InitStruct.DMA_BufferSize = DMA_TX_BUFFER_SIZE;
 8003b74:	231e      	movs	r3, #30
 8003b76:	617b      	str	r3, [r7, #20]
		DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&USART1->DR;
 8003b78:	4b23      	ldr	r3, [pc, #140]	; (8003c08 <USART_LoggingInit+0x138>)
 8003b7a:	60bb      	str	r3, [r7, #8]
		DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8003b7c:	2340      	movs	r3, #64	; 0x40
 8003b7e:	613b      	str	r3, [r7, #16]
		DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
		DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b88:	61fb      	str	r3, [r7, #28]
		DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	623b      	str	r3, [r7, #32]
		DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
		DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 8003b92:	2300      	movs	r3, #0
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
		DMA_InitStruct.DMA_Priority = DMA_Priority_VeryHigh;
 8003b96:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	633b      	str	r3, [r7, #48]	; 0x30
		DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
		DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	63bb      	str	r3, [r7, #56]	; 0x38
		DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	63fb      	str	r3, [r7, #60]	; 0x3c
		DMA_InitStruct.DMA_Channel = DMA_Channel_4;
 8003bac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bb0:	607b      	str	r3, [r7, #4]

		DMA_Init(DMA2_Stream7, &DMA_InitStruct);
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4815      	ldr	r0, [pc, #84]	; (8003c0c <USART_LoggingInit+0x13c>)
 8003bb8:	f7fd f83e 	bl	8000c38 <DMA_Init>

//		USART_ITConfig(USART1, USART_IT_TC, ENABLE);
		DMA_ITConfig(DMA2_Stream7, DMA_IT_TC, ENABLE);
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	2110      	movs	r1, #16
 8003bc0:	4812      	ldr	r0, [pc, #72]	; (8003c0c <USART_LoggingInit+0x13c>)
 8003bc2:	f7fd f8c5 	bl	8000d50 <DMA_ITConfig>

//		/* Enable global interrupts for DMA stream */
		NVIC_InitStruct.NVIC_IRQChannel = DMA2_Stream7_IRQn;
 8003bc6:	2346      	movs	r3, #70	; 0x46
 8003bc8:	703b      	strb	r3, [r7, #0]
		NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	70fb      	strb	r3, [r7, #3]
		NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	707b      	strb	r3, [r7, #1]
		NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	70bb      	strb	r3, [r7, #2]
		NVIC_Init(&NVIC_InitStruct);
 8003bd6:	463b      	mov	r3, r7
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fc ffbf 	bl	8000b5c <NVIC_Init>

//		/* Enable transfer complete interrupt */


		USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);
 8003bde:	2201      	movs	r2, #1
 8003be0:	2180      	movs	r1, #128	; 0x80
 8003be2:	4807      	ldr	r0, [pc, #28]	; (8003c00 <USART_LoggingInit+0x130>)
 8003be4:	f7fd ff4e 	bl	8001a84 <USART_DMACmd>
		/* Enable USART */
		USART_Cmd(USART1, ENABLE);
 8003be8:	2101      	movs	r1, #1
 8003bea:	4805      	ldr	r0, [pc, #20]	; (8003c00 <USART_LoggingInit+0x130>)
 8003bec:	f7fd ff2a 	bl	8001a44 <USART_Cmd>

}
 8003bf0:	bf00      	nop
 8003bf2:	3758      	adds	r7, #88	; 0x58
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40020400 	.word	0x40020400
 8003bfc:	20000164 	.word	0x20000164
 8003c00:	40011000 	.word	0x40011000
 8003c04:	200001f8 	.word	0x200001f8
 8003c08:	40011004 	.word	0x40011004
 8003c0c:	400264b8 	.word	0x400264b8

08003c10 <DMA2_Stream7_IRQHandler>:



void DMA2_Stream7_IRQHandler(void) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0


	DMA_Cmd(DMA2_Stream7, DISABLE);
 8003c14:	2100      	movs	r1, #0
 8003c16:	4804      	ldr	r0, [pc, #16]	; (8003c28 <DMA2_Stream7_IRQHandler+0x18>)
 8003c18:	f7fd f866 	bl	8000ce8 <DMA_Cmd>



	DMA_ClearITPendingBit(DMA2_Stream7, DMA_IT_TCIF7);
 8003c1c:	4903      	ldr	r1, [pc, #12]	; (8003c2c <DMA2_Stream7_IRQHandler+0x1c>)
 8003c1e:	4802      	ldr	r0, [pc, #8]	; (8003c28 <DMA2_Stream7_IRQHandler+0x18>)
 8003c20:	f7fd f8d0 	bl	8000dc4 <DMA_ClearITPendingBit>


}
 8003c24:	bf00      	nop
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	400264b8 	.word	0x400264b8
 8003c2c:	28008000 	.word	0x28008000

08003c30 <LOG_CombineData>:

void LOG_CombineData( uint32_t loop_count, int16_t acc_norm, int16_t acc_tang, int16_t gyro_vel, uint32_t count, uint8_t temp[2], float states[3]){
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08e      	sub	sp, #56	; 0x38
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	4608      	mov	r0, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	817b      	strh	r3, [r7, #10]
 8003c42:	460b      	mov	r3, r1
 8003c44:	813b      	strh	r3, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]


	CRC_ResetDR();
 8003c4a:	f7fc ffe9 	bl	8000c20 <CRC_ResetDR>
		uint16_t _halfword[16];
		uint8_t	_byte[32];
	}Data;

	//start bytes
	Data._halfword[0] = 0xaa55;
 8003c4e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003c52:	833b      	strh	r3, [r7, #24]

	// 1 hword

	//loop timing in ms - LSB first
	Data._halfword[1] = (uint16_t)(loop_count);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	837b      	strh	r3, [r7, #26]
	Data._halfword[2] = (uint16_t)(loop_count >> 16);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	83bb      	strh	r3, [r7, #28]


	//acc_norm
	Data._halfword[3] = (uint16_t)acc_norm;
 8003c62:	897b      	ldrh	r3, [r7, #10]
 8003c64:	83fb      	strh	r3, [r7, #30]

	// 4 hword
	//acc_tang
	Data._halfword[4] = (uint16_t)acc_tang;
 8003c66:	893b      	ldrh	r3, [r7, #8]
 8003c68:	843b      	strh	r3, [r7, #32]

	//gyro_vel
	Data._halfword[5] = (uint16_t)gyro_vel;
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	847b      	strh	r3, [r7, #34]	; 0x22
	// 6 hword

	// encoder count
	Data._word[3] = count;
 8003c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
		float state_f;
		uint32_t state_u32;

	}conv;

	conv.state_f = states[0];
 8003c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	617b      	str	r3, [r7, #20]
	Data._word[4] = conv.state_u32;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
	conv.state_f = states[1];
 8003c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	617b      	str	r3, [r7, #20]
	Data._word[5] = conv.state_u32;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
	conv.state_f = states[2];
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	617b      	str	r3, [r7, #20]
	Data._word[6] = conv.state_u32;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30

	Data._byte[28] = temp[0];
 8003c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	Data._byte[29] = temp[1];
 8003c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c9a:	785b      	ldrb	r3, [r3, #1]
 8003c9c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	// 12 hwords
//	Data._halfword[15] = 0x0000;


//	Data._word[8] = CRC_CalcBlockCRC(Data._word, 8);
	USART_PackageData(Data._byte, DMA_TX_BUFFER_SIZE);
 8003ca0:	f107 0318 	add.w	r3, r7, #24
 8003ca4:	211e      	movs	r1, #30
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f804 	bl	8003cb4 <USART_PackageData>



}
 8003cac:	bf00      	nop
 8003cae:	3738      	adds	r7, #56	; 0x38
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <USART_PackageData>:

void USART_PackageData(uint8_t data[], uint8_t data_length){
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	70fb      	strb	r3, [r7, #3]

	while(DMA_GetCmdStatus(DMA2_Stream7));
 8003cc0:	bf00      	nop
 8003cc2:	4810      	ldr	r0, [pc, #64]	; (8003d04 <USART_PackageData+0x50>)
 8003cc4:	f7fd f82c 	bl	8000d20 <DMA_GetCmdStatus>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f9      	bne.n	8003cc2 <USART_PackageData+0xe>


	for (int i = 0; i < DMA_TX_BUFFER_SIZE; i++){
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	e00b      	b.n	8003cec <USART_PackageData+0x38>
			DMA_TX_Buffer[i] = data[i];
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	7819      	ldrb	r1, [r3, #0]
 8003cdc:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <USART_PackageData+0x54>)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < DMA_TX_BUFFER_SIZE; i++){
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b1d      	cmp	r3, #29
 8003cf0:	ddf0      	ble.n	8003cd4 <USART_PackageData+0x20>
		}
	DMA_Cmd(DMA2_Stream7, ENABLE);
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4803      	ldr	r0, [pc, #12]	; (8003d04 <USART_PackageData+0x50>)
 8003cf6:	f7fc fff7 	bl	8000ce8 <DMA_Cmd>
}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	400264b8 	.word	0x400264b8
 8003d08:	200001f8 	.word	0x200001f8
 8003d0c:	00000000 	.word	0x00000000

08003d10 <main>:
**
**===========================================================================
*/


int main(void){
 8003d10:	b5b0      	push	{r4, r5, r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af04      	add	r7, sp, #16

  count = 0;
 8003d16:	4b8a      	ldr	r3, [pc, #552]	; (8003f40 <main+0x230>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
  loop_count = 0;
 8003d1c:	4b89      	ldr	r3, [pc, #548]	; (8003f44 <main+0x234>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
  SystemInit();
 8003d22:	f000 f977 	bl	8004014 <SystemInit>

  // Init and config IMU - MPU
  init_I2C3();
 8003d26:	f7ff fbc1 	bl	80034ac <init_I2C3>
  MPU_Init(I2C3);
 8003d2a:	4887      	ldr	r0, [pc, #540]	; (8003f48 <main+0x238>)
 8003d2c:	f7ff fd78 	bl	8003820 <MPU_Init>

  USART_LoggingInit();
 8003d30:	f7ff fece 	bl	8003ad0 <USART_LoggingInit>
  ENCODER_Init();
 8003d34:	f7ff fe70 	bl	8003a18 <ENCODER_Init>
  Control_LoopInit();
 8003d38:	f7ff fe0c 	bl	8003954 <Control_LoopInit>
  states[0] = 0;
 8003d3c:	4b83      	ldr	r3, [pc, #524]	; (8003f4c <main+0x23c>)
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
  states[1] = 0;
 8003d44:	4b81      	ldr	r3, [pc, #516]	; (8003f4c <main+0x23c>)
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	605a      	str	r2, [r3, #4]
  states[2] = 0;
 8003d4c:	4b7f      	ldr	r3, [pc, #508]	; (8003f4c <main+0x23c>)
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	609a      	str	r2, [r3, #8]



  /* Infinite loop */
  while (1){
	  loop_count++;
 8003d54:	4b7b      	ldr	r3, [pc, #492]	; (8003f44 <main+0x234>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	4a7a      	ldr	r2, [pc, #488]	; (8003f44 <main+0x234>)
 8003d5c:	6013      	str	r3, [r2, #0]

	  // Receive values from encoder and IMU
	  count = TIM_GetCounter(TIM2);
 8003d5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003d62:	f7fd fd07 	bl	8001774 <TIM_GetCounter>
 8003d66:	4602      	mov	r2, r0
 8003d68:	4b75      	ldr	r3, [pc, #468]	; (8003f40 <main+0x230>)
 8003d6a:	601a      	str	r2, [r3, #0]
	  sensor_values[3] = (float)(count-ENCODER_START_VALUE)/(ENCODER_GAIN*N);
 8003d6c:	4b74      	ldr	r3, [pc, #464]	; (8003f40 <main+0x230>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d74:	3301      	adds	r3, #1
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	ee17 0a90 	vmov	r0, s15
 8003d82:	f7fc fb85 	bl	8000490 <__aeabi_f2d>
 8003d86:	a35e      	add	r3, pc, #376	; (adr r3, 8003f00 <main+0x1f0>)
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	f7fc fcfe 	bl	800078c <__aeabi_ddiv>
 8003d90:	4603      	mov	r3, r0
 8003d92:	460c      	mov	r4, r1
 8003d94:	4618      	mov	r0, r3
 8003d96:	4621      	mov	r1, r4
 8003d98:	f7fc fe90 	bl	8000abc <__aeabi_d2f>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b6c      	ldr	r3, [pc, #432]	; (8003f50 <main+0x240>)
 8003da0:	60da      	str	r2, [r3, #12]

	  MPU_GetAccGyro(I2C3, raw_acc, raw_gyro, raw_temp);
 8003da2:	4b6c      	ldr	r3, [pc, #432]	; (8003f54 <main+0x244>)
 8003da4:	4a6c      	ldr	r2, [pc, #432]	; (8003f58 <main+0x248>)
 8003da6:	496d      	ldr	r1, [pc, #436]	; (8003f5c <main+0x24c>)
 8003da8:	4867      	ldr	r0, [pc, #412]	; (8003f48 <main+0x238>)
 8003daa:	f7ff fd75 	bl	8003898 <MPU_GetAccGyro>
	  sensor_values[0] = ((float)raw_acc[0]/ACC_GAIN-X_OFFSET)/X_SCALE;
 8003dae:	4b6b      	ldr	r3, [pc, #428]	; (8003f5c <main+0x24c>)
 8003db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dbc:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003f60 <main+0x250>
 8003dc0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003dc4:	ee16 0a90 	vmov	r0, s13
 8003dc8:	f7fc fb62 	bl	8000490 <__aeabi_f2d>
 8003dcc:	a34e      	add	r3, pc, #312	; (adr r3, 8003f08 <main+0x1f8>)
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f7fc f9fd 	bl	80001d0 <__aeabi_dsub>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	460c      	mov	r4, r1
 8003dda:	4618      	mov	r0, r3
 8003ddc:	4621      	mov	r1, r4
 8003dde:	a34c      	add	r3, pc, #304	; (adr r3, 8003f10 <main+0x200>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fcd2 	bl	800078c <__aeabi_ddiv>
 8003de8:	4603      	mov	r3, r0
 8003dea:	460c      	mov	r4, r1
 8003dec:	4618      	mov	r0, r3
 8003dee:	4621      	mov	r1, r4
 8003df0:	f7fc fe64 	bl	8000abc <__aeabi_d2f>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b56      	ldr	r3, [pc, #344]	; (8003f50 <main+0x240>)
 8003df8:	601a      	str	r2, [r3, #0]
	  sensor_values[1] = ((float)raw_acc[1]/ACC_GAIN-Y_OFFSET)/Y_SCALE;
 8003dfa:	4b58      	ldr	r3, [pc, #352]	; (8003f5c <main+0x24c>)
 8003dfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e00:	ee07 3a90 	vmov	s15, r3
 8003e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e08:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003f60 <main+0x250>
 8003e0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e10:	ee16 0a90 	vmov	r0, s13
 8003e14:	f7fc fb3c 	bl	8000490 <__aeabi_f2d>
 8003e18:	a33f      	add	r3, pc, #252	; (adr r3, 8003f18 <main+0x208>)
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f7fc f9d7 	bl	80001d0 <__aeabi_dsub>
 8003e22:	4603      	mov	r3, r0
 8003e24:	460c      	mov	r4, r1
 8003e26:	4618      	mov	r0, r3
 8003e28:	4621      	mov	r1, r4
 8003e2a:	a33d      	add	r3, pc, #244	; (adr r3, 8003f20 <main+0x210>)
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f7fc fcac 	bl	800078c <__aeabi_ddiv>
 8003e34:	4603      	mov	r3, r0
 8003e36:	460c      	mov	r4, r1
 8003e38:	4618      	mov	r0, r3
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	f7fc fe3e 	bl	8000abc <__aeabi_d2f>
 8003e40:	4602      	mov	r2, r0
 8003e42:	4b43      	ldr	r3, [pc, #268]	; (8003f50 <main+0x240>)
 8003e44:	605a      	str	r2, [r3, #4]
	  sensor_values[2] = ((float)raw_gyro[2]/GYRO_GAIN-GYRO_OFFSET)/GYRO_SCALE;
 8003e46:	4b44      	ldr	r3, [pc, #272]	; (8003f58 <main+0x248>)
 8003e48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e54:	ee17 0a90 	vmov	r0, s15
 8003e58:	f7fc fb1a 	bl	8000490 <__aeabi_f2d>
 8003e5c:	a332      	add	r3, pc, #200	; (adr r3, 8003f28 <main+0x218>)
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	f7fc fc93 	bl	800078c <__aeabi_ddiv>
 8003e66:	4603      	mov	r3, r0
 8003e68:	460c      	mov	r4, r1
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	a330      	add	r3, pc, #192	; (adr r3, 8003f30 <main+0x220>)
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f7fc f9ae 	bl	80001d4 <__adddf3>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	4621      	mov	r1, r4
 8003e80:	a32d      	add	r3, pc, #180	; (adr r3, 8003f38 <main+0x228>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f7fc fc81 	bl	800078c <__aeabi_ddiv>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	4618      	mov	r0, r3
 8003e90:	4621      	mov	r1, r4
 8003e92:	f7fc fe13 	bl	8000abc <__aeabi_d2f>
 8003e96:	4602      	mov	r2, r0
 8003e98:	4b2d      	ldr	r3, [pc, #180]	; (8003f50 <main+0x240>)
 8003e9a:	609a      	str	r2, [r3, #8]

	  // Perform EKF calculations
	  // predict X
	  X_Predict();
 8003e9c:	f7fd fe16 	bl	8001acc <X_Predict>
	  //predict P
	  P_Predict();
 8003ea0:	f7fd fe2a 	bl	8001af8 <P_Predict>
	  // Update
	  //Pack Z
	  // anticlockwise from positive x axis on cart. plane not IMU axis
	  // acc_norm = acc_y, acc_tang = acc_x, gyro_vel = gyro_z

	  Z_Pack(sensor_values);
 8003ea4:	482a      	ldr	r0, [pc, #168]	; (8003f50 <main+0x240>)
 8003ea6:	f7fd fe57 	bl	8001b58 <Z_Pack>
//	  Z_Pack(0,981,0,count);

	  //Pack H
	  H_Pack();
 8003eaa:	f7fd fe71 	bl	8001b90 <H_Pack>

	  // calc Y
	  Y_Calc();
 8003eae:	f7fd ff1f 	bl	8001cf0 <Y_Calc>

	  H_JacobianCalc();
 8003eb2:	f7fd ff31 	bl	8001d18 <H_JacobianCalc>

	  // calc K
	  K_Calc();
 8003eb6:	f7fd ff99 	bl	8001dec <K_Calc>
	  //Update X
	  X_Update();
 8003eba:	f7fd ffef 	bl	8001e9c <X_Update>
	  //P_Update
	  P_Update();
 8003ebe:	f7fe f80f 	bl	8001ee0 <P_Update>

	  EKF_RetrieveStates(states);
 8003ec2:	4822      	ldr	r0, [pc, #136]	; (8003f4c <main+0x23c>)
 8003ec4:	f7fe f83c 	bl	8001f40 <EKF_RetrieveStates>



	  // acc_norm = acc_x, acc_tang = acc_y, gyro_vel = gyro_z
	  LOG_CombineData(loop_count, raw_acc[0], raw_acc[1], raw_gyro[2], count, raw_temp, states);
 8003ec8:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <main+0x234>)
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <main+0x24c>)
 8003ece:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003ed2:	4b22      	ldr	r3, [pc, #136]	; (8003f5c <main+0x24c>)
 8003ed4:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8003ed8:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <main+0x248>)
 8003eda:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8003ede:	4b18      	ldr	r3, [pc, #96]	; (8003f40 <main+0x230>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <main+0x23c>)
 8003ee4:	9202      	str	r2, [sp, #8]
 8003ee6:	4a1b      	ldr	r2, [pc, #108]	; (8003f54 <main+0x244>)
 8003ee8:	9201      	str	r2, [sp, #4]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	462b      	mov	r3, r5
 8003eee:	4622      	mov	r2, r4
 8003ef0:	f7ff fe9e 	bl	8003c30 <LOG_CombineData>
//	  states[1] = 8;
//	  states[2] = -9;
//	  LOG_CombineData(12121,-8192,8192,-16400,0x7fffffff,raw_temp,states);


	  wait_for_restart();
 8003ef4:	f7ff fd74 	bl	80039e0 <wait_for_restart>
	  loop_count++;
 8003ef8:	e72c      	b.n	8003d54 <main+0x44>
 8003efa:	bf00      	nop
 8003efc:	f3af 8000 	nop.w
 8003f00:	13f2b389 	.word	0x13f2b389
 8003f04:	40cfb4e2 	.word	0x40cfb4e2
 8003f08:	c89bc9fb 	.word	0xc89bc9fb
 8003f0c:	3f9bbdbd 	.word	0x3f9bbdbd
 8003f10:	a3d70a3d 	.word	0xa3d70a3d
 8003f14:	3ff23d70 	.word	0x3ff23d70
 8003f18:	9999999a 	.word	0x9999999a
 8003f1c:	3fa99999 	.word	0x3fa99999
 8003f20:	3cb47cfe 	.word	0x3cb47cfe
 8003f24:	3ff007e4 	.word	0x3ff007e4
 8003f28:	66666666 	.word	0x66666666
 8003f2c:	40306666 	.word	0x40306666
 8003f30:	9ed69ec8 	.word	0x9ed69ec8
 8003f34:	3fe6d0b1 	.word	0x3fe6d0b1
 8003f38:	040fd211 	.word	0x040fd211
 8003f3c:	3ff15221 	.word	0x3ff15221
 8003f40:	20000264 	.word	0x20000264
 8003f44:	20000230 	.word	0x20000230
 8003f48:	40005c00 	.word	0x40005c00
 8003f4c:	20000258 	.word	0x20000258
 8003f50:	20000218 	.word	0x20000218
 8003f54:	20000270 	.word	0x20000270
 8003f58:	20000228 	.word	0x20000228
 8003f5c:	20000268 	.word	0x20000268
 8003f60:	46000000 	.word	0x46000000

08003f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f6a:	e003      	b.n	8003f74 <LoopCopyDataInit>

08003f6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f72:	3104      	adds	r1, #4

08003f74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f74:	480b      	ldr	r0, [pc, #44]	; (8003fa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f76:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f7c:	d3f6      	bcc.n	8003f6c <CopyDataInit>
  ldr  r2, =_sbss
 8003f7e:	4a0b      	ldr	r2, [pc, #44]	; (8003fac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f80:	e002      	b.n	8003f88 <LoopFillZerobss>

08003f82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f84:	f842 3b04 	str.w	r3, [r2], #4

08003f88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f88:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f8c:	d3f9      	bcc.n	8003f82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f8e:	f000 f841 	bl	8004014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f92:	f000 f8f1 	bl	8004178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f96:	f7ff febb 	bl	8003d10 <main>
  bx  lr    
 8003f9a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003fa0:	080054c8 	.word	0x080054c8
  ldr  r0, =_sdata
 8003fa4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003fa8:	20000168 	.word	0x20000168
  ldr  r2, =_sbss
 8003fac:	20000168 	.word	0x20000168
  ldr  r3, = _ebss
 8003fb0:	20000274 	.word	0x20000274

08003fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fb4:	e7fe      	b.n	8003fb4 <ADC_IRQHandler>

08003fb6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	af00      	add	r7, sp, #0
}
 8003fba:	bf00      	nop
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003fc8:	e7fe      	b.n	8003fc8 <HardFault_Handler+0x4>

08003fca <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003fce:	e7fe      	b.n	8003fce <MemManage_Handler+0x4>

08003fd0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003fd4:	e7fe      	b.n	8003fd4 <BusFault_Handler+0x4>

08003fd6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003fda:	e7fe      	b.n	8003fda <UsageFault_Handler+0x4>

08003fdc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003fea:	b480      	push	{r7}
 8003fec:	af00      	add	r7, sp, #0
}
 8003fee:	bf00      	nop
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
}
 8003ffc:	bf00      	nop
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800400a:	bf00      	nop
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <SystemInit+0x60>)
 800401a:	4b16      	ldr	r3, [pc, #88]	; (8004074 <SystemInit+0x60>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004028:	4a13      	ldr	r2, [pc, #76]	; (8004078 <SystemInit+0x64>)
 800402a:	4b13      	ldr	r3, [pc, #76]	; (8004078 <SystemInit+0x64>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004034:	4b10      	ldr	r3, [pc, #64]	; (8004078 <SystemInit+0x64>)
 8004036:	2200      	movs	r2, #0
 8004038:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800403a:	4a0f      	ldr	r2, [pc, #60]	; (8004078 <SystemInit+0x64>)
 800403c:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <SystemInit+0x64>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004048:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <SystemInit+0x64>)
 800404c:	4a0b      	ldr	r2, [pc, #44]	; (800407c <SystemInit+0x68>)
 800404e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004050:	4a09      	ldr	r2, [pc, #36]	; (8004078 <SystemInit+0x64>)
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <SystemInit+0x64>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <SystemInit+0x64>)
 800405e:	2200      	movs	r2, #0
 8004060:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004062:	f000 f80d 	bl	8004080 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004066:	4b03      	ldr	r3, [pc, #12]	; (8004074 <SystemInit+0x60>)
 8004068:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800406c:	609a      	str	r2, [r3, #8]
#endif
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	e000ed00 	.word	0xe000ed00
 8004078:	40023800 	.word	0x40023800
 800407c:	24003010 	.word	0x24003010

08004080 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	2300      	movs	r3, #0
 800408c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800408e:	4a36      	ldr	r2, [pc, #216]	; (8004168 <SetSysClock+0xe8>)
 8004090:	4b35      	ldr	r3, [pc, #212]	; (8004168 <SetSysClock+0xe8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004098:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800409a:	4b33      	ldr	r3, [pc, #204]	; (8004168 <SetSysClock+0xe8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3301      	adds	r3, #1
 80040a8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d103      	bne.n	80040b8 <SetSysClock+0x38>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80040b6:	d1f0      	bne.n	800409a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <SetSysClock+0xe8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80040c4:	2301      	movs	r3, #1
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	e001      	b.n	80040ce <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80040ca:	2300      	movs	r3, #0
 80040cc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d142      	bne.n	800415a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80040d4:	4a24      	ldr	r2, [pc, #144]	; (8004168 <SetSysClock+0xe8>)
 80040d6:	4b24      	ldr	r3, [pc, #144]	; (8004168 <SetSysClock+0xe8>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040de:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80040e0:	4a22      	ldr	r2, [pc, #136]	; (800416c <SetSysClock+0xec>)
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <SetSysClock+0xec>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040ea:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80040ec:	4a1e      	ldr	r2, [pc, #120]	; (8004168 <SetSysClock+0xe8>)
 80040ee:	4b1e      	ldr	r3, [pc, #120]	; (8004168 <SetSysClock+0xe8>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80040f4:	4a1c      	ldr	r2, [pc, #112]	; (8004168 <SetSysClock+0xe8>)
 80040f6:	4b1c      	ldr	r3, [pc, #112]	; (8004168 <SetSysClock+0xe8>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fe:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004100:	4a19      	ldr	r2, [pc, #100]	; (8004168 <SetSysClock+0xe8>)
 8004102:	4b19      	ldr	r3, [pc, #100]	; (8004168 <SetSysClock+0xe8>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800410a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800410c:	4b16      	ldr	r3, [pc, #88]	; (8004168 <SetSysClock+0xe8>)
 800410e:	4a18      	ldr	r2, [pc, #96]	; (8004170 <SetSysClock+0xf0>)
 8004110:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004112:	4a15      	ldr	r2, [pc, #84]	; (8004168 <SetSysClock+0xe8>)
 8004114:	4b14      	ldr	r3, [pc, #80]	; (8004168 <SetSysClock+0xe8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800411e:	bf00      	nop
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <SetSysClock+0xe8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f9      	beq.n	8004120 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800412c:	4b11      	ldr	r3, [pc, #68]	; (8004174 <SetSysClock+0xf4>)
 800412e:	f240 6205 	movw	r2, #1541	; 0x605
 8004132:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004134:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <SetSysClock+0xe8>)
 8004136:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <SetSysClock+0xe8>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004140:	4a09      	ldr	r2, [pc, #36]	; (8004168 <SetSysClock+0xe8>)
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <SetSysClock+0xe8>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f043 0302 	orr.w	r3, r3, #2
 800414a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800414c:	bf00      	nop
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <SetSysClock+0xe8>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b08      	cmp	r3, #8
 8004158:	d1f9      	bne.n	800414e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40023800 	.word	0x40023800
 800416c:	40007000 	.word	0x40007000
 8004170:	07405408 	.word	0x07405408
 8004174:	40023c00 	.word	0x40023c00

08004178 <__libc_init_array>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	4e0d      	ldr	r6, [pc, #52]	; (80041b0 <__libc_init_array+0x38>)
 800417c:	4c0d      	ldr	r4, [pc, #52]	; (80041b4 <__libc_init_array+0x3c>)
 800417e:	1ba4      	subs	r4, r4, r6
 8004180:	10a4      	asrs	r4, r4, #2
 8004182:	2500      	movs	r5, #0
 8004184:	42a5      	cmp	r5, r4
 8004186:	d109      	bne.n	800419c <__libc_init_array+0x24>
 8004188:	4e0b      	ldr	r6, [pc, #44]	; (80041b8 <__libc_init_array+0x40>)
 800418a:	4c0c      	ldr	r4, [pc, #48]	; (80041bc <__libc_init_array+0x44>)
 800418c:	f001 f8a0 	bl	80052d0 <_init>
 8004190:	1ba4      	subs	r4, r4, r6
 8004192:	10a4      	asrs	r4, r4, #2
 8004194:	2500      	movs	r5, #0
 8004196:	42a5      	cmp	r5, r4
 8004198:	d105      	bne.n	80041a6 <__libc_init_array+0x2e>
 800419a:	bd70      	pop	{r4, r5, r6, pc}
 800419c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041a0:	4798      	blx	r3
 80041a2:	3501      	adds	r5, #1
 80041a4:	e7ee      	b.n	8004184 <__libc_init_array+0xc>
 80041a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041aa:	4798      	blx	r3
 80041ac:	3501      	adds	r5, #1
 80041ae:	e7f2      	b.n	8004196 <__libc_init_array+0x1e>
 80041b0:	080054c0 	.word	0x080054c0
 80041b4:	080054c0 	.word	0x080054c0
 80041b8:	080054c0 	.word	0x080054c0
 80041bc:	080054c4 	.word	0x080054c4

080041c0 <cos>:
 80041c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041c2:	ec51 0b10 	vmov	r0, r1, d0
 80041c6:	4a1e      	ldr	r2, [pc, #120]	; (8004240 <cos+0x80>)
 80041c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80041cc:	4293      	cmp	r3, r2
 80041ce:	dc06      	bgt.n	80041de <cos+0x1e>
 80041d0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8004238 <cos+0x78>
 80041d4:	f000 fa74 	bl	80046c0 <__kernel_cos>
 80041d8:	ec51 0b10 	vmov	r0, r1, d0
 80041dc:	e007      	b.n	80041ee <cos+0x2e>
 80041de:	4a19      	ldr	r2, [pc, #100]	; (8004244 <cos+0x84>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	dd09      	ble.n	80041f8 <cos+0x38>
 80041e4:	ee10 2a10 	vmov	r2, s0
 80041e8:	460b      	mov	r3, r1
 80041ea:	f7fb fff1 	bl	80001d0 <__aeabi_dsub>
 80041ee:	ec41 0b10 	vmov	d0, r0, r1
 80041f2:	b005      	add	sp, #20
 80041f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80041f8:	4668      	mov	r0, sp
 80041fa:	f000 f86d 	bl	80042d8 <__ieee754_rem_pio2>
 80041fe:	f000 0003 	and.w	r0, r0, #3
 8004202:	2801      	cmp	r0, #1
 8004204:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004208:	ed9d 0b00 	vldr	d0, [sp]
 800420c:	d007      	beq.n	800421e <cos+0x5e>
 800420e:	2802      	cmp	r0, #2
 8004210:	d00e      	beq.n	8004230 <cos+0x70>
 8004212:	2800      	cmp	r0, #0
 8004214:	d0de      	beq.n	80041d4 <cos+0x14>
 8004216:	2001      	movs	r0, #1
 8004218:	f000 fe8a 	bl	8004f30 <__kernel_sin>
 800421c:	e7dc      	b.n	80041d8 <cos+0x18>
 800421e:	f000 fe87 	bl	8004f30 <__kernel_sin>
 8004222:	ec53 2b10 	vmov	r2, r3, d0
 8004226:	ee10 0a10 	vmov	r0, s0
 800422a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800422e:	e7de      	b.n	80041ee <cos+0x2e>
 8004230:	f000 fa46 	bl	80046c0 <__kernel_cos>
 8004234:	e7f5      	b.n	8004222 <cos+0x62>
 8004236:	bf00      	nop
	...
 8004240:	3fe921fb 	.word	0x3fe921fb
 8004244:	7fefffff 	.word	0x7fefffff

08004248 <sin>:
 8004248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800424a:	ec51 0b10 	vmov	r0, r1, d0
 800424e:	4a20      	ldr	r2, [pc, #128]	; (80042d0 <sin+0x88>)
 8004250:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004254:	4293      	cmp	r3, r2
 8004256:	dc07      	bgt.n	8004268 <sin+0x20>
 8004258:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80042c8 <sin+0x80>
 800425c:	2000      	movs	r0, #0
 800425e:	f000 fe67 	bl	8004f30 <__kernel_sin>
 8004262:	ec51 0b10 	vmov	r0, r1, d0
 8004266:	e007      	b.n	8004278 <sin+0x30>
 8004268:	4a1a      	ldr	r2, [pc, #104]	; (80042d4 <sin+0x8c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	dd09      	ble.n	8004282 <sin+0x3a>
 800426e:	ee10 2a10 	vmov	r2, s0
 8004272:	460b      	mov	r3, r1
 8004274:	f7fb ffac 	bl	80001d0 <__aeabi_dsub>
 8004278:	ec41 0b10 	vmov	d0, r0, r1
 800427c:	b005      	add	sp, #20
 800427e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004282:	4668      	mov	r0, sp
 8004284:	f000 f828 	bl	80042d8 <__ieee754_rem_pio2>
 8004288:	f000 0003 	and.w	r0, r0, #3
 800428c:	2801      	cmp	r0, #1
 800428e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004292:	ed9d 0b00 	vldr	d0, [sp]
 8004296:	d004      	beq.n	80042a2 <sin+0x5a>
 8004298:	2802      	cmp	r0, #2
 800429a:	d005      	beq.n	80042a8 <sin+0x60>
 800429c:	b970      	cbnz	r0, 80042bc <sin+0x74>
 800429e:	2001      	movs	r0, #1
 80042a0:	e7dd      	b.n	800425e <sin+0x16>
 80042a2:	f000 fa0d 	bl	80046c0 <__kernel_cos>
 80042a6:	e7dc      	b.n	8004262 <sin+0x1a>
 80042a8:	2001      	movs	r0, #1
 80042aa:	f000 fe41 	bl	8004f30 <__kernel_sin>
 80042ae:	ec53 2b10 	vmov	r2, r3, d0
 80042b2:	ee10 0a10 	vmov	r0, s0
 80042b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80042ba:	e7dd      	b.n	8004278 <sin+0x30>
 80042bc:	f000 fa00 	bl	80046c0 <__kernel_cos>
 80042c0:	e7f5      	b.n	80042ae <sin+0x66>
 80042c2:	bf00      	nop
 80042c4:	f3af 8000 	nop.w
	...
 80042d0:	3fe921fb 	.word	0x3fe921fb
 80042d4:	7fefffff 	.word	0x7fefffff

080042d8 <__ieee754_rem_pio2>:
 80042d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042dc:	ec57 6b10 	vmov	r6, r7, d0
 80042e0:	4bc3      	ldr	r3, [pc, #780]	; (80045f0 <__ieee754_rem_pio2+0x318>)
 80042e2:	b08d      	sub	sp, #52	; 0x34
 80042e4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80042e8:	4598      	cmp	r8, r3
 80042ea:	4604      	mov	r4, r0
 80042ec:	9704      	str	r7, [sp, #16]
 80042ee:	dc07      	bgt.n	8004300 <__ieee754_rem_pio2+0x28>
 80042f0:	2200      	movs	r2, #0
 80042f2:	2300      	movs	r3, #0
 80042f4:	ed84 0b00 	vstr	d0, [r4]
 80042f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80042fc:	2500      	movs	r5, #0
 80042fe:	e027      	b.n	8004350 <__ieee754_rem_pio2+0x78>
 8004300:	4bbc      	ldr	r3, [pc, #752]	; (80045f4 <__ieee754_rem_pio2+0x31c>)
 8004302:	4598      	cmp	r8, r3
 8004304:	dc75      	bgt.n	80043f2 <__ieee754_rem_pio2+0x11a>
 8004306:	9b04      	ldr	r3, [sp, #16]
 8004308:	4dbb      	ldr	r5, [pc, #748]	; (80045f8 <__ieee754_rem_pio2+0x320>)
 800430a:	2b00      	cmp	r3, #0
 800430c:	ee10 0a10 	vmov	r0, s0
 8004310:	a3a9      	add	r3, pc, #676	; (adr r3, 80045b8 <__ieee754_rem_pio2+0x2e0>)
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	4639      	mov	r1, r7
 8004318:	dd36      	ble.n	8004388 <__ieee754_rem_pio2+0xb0>
 800431a:	f7fb ff59 	bl	80001d0 <__aeabi_dsub>
 800431e:	45a8      	cmp	r8, r5
 8004320:	4606      	mov	r6, r0
 8004322:	460f      	mov	r7, r1
 8004324:	d018      	beq.n	8004358 <__ieee754_rem_pio2+0x80>
 8004326:	a3a6      	add	r3, pc, #664	; (adr r3, 80045c0 <__ieee754_rem_pio2+0x2e8>)
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f7fb ff50 	bl	80001d0 <__aeabi_dsub>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	e9c4 2300 	strd	r2, r3, [r4]
 8004338:	4630      	mov	r0, r6
 800433a:	4639      	mov	r1, r7
 800433c:	f7fb ff48 	bl	80001d0 <__aeabi_dsub>
 8004340:	a39f      	add	r3, pc, #636	; (adr r3, 80045c0 <__ieee754_rem_pio2+0x2e8>)
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f7fb ff43 	bl	80001d0 <__aeabi_dsub>
 800434a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800434e:	2501      	movs	r5, #1
 8004350:	4628      	mov	r0, r5
 8004352:	b00d      	add	sp, #52	; 0x34
 8004354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004358:	a39b      	add	r3, pc, #620	; (adr r3, 80045c8 <__ieee754_rem_pio2+0x2f0>)
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	f7fb ff37 	bl	80001d0 <__aeabi_dsub>
 8004362:	a39b      	add	r3, pc, #620	; (adr r3, 80045d0 <__ieee754_rem_pio2+0x2f8>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	4606      	mov	r6, r0
 800436a:	460f      	mov	r7, r1
 800436c:	f7fb ff30 	bl	80001d0 <__aeabi_dsub>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	e9c4 2300 	strd	r2, r3, [r4]
 8004378:	4630      	mov	r0, r6
 800437a:	4639      	mov	r1, r7
 800437c:	f7fb ff28 	bl	80001d0 <__aeabi_dsub>
 8004380:	a393      	add	r3, pc, #588	; (adr r3, 80045d0 <__ieee754_rem_pio2+0x2f8>)
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	e7de      	b.n	8004346 <__ieee754_rem_pio2+0x6e>
 8004388:	f7fb ff24 	bl	80001d4 <__adddf3>
 800438c:	45a8      	cmp	r8, r5
 800438e:	4606      	mov	r6, r0
 8004390:	460f      	mov	r7, r1
 8004392:	d016      	beq.n	80043c2 <__ieee754_rem_pio2+0xea>
 8004394:	a38a      	add	r3, pc, #552	; (adr r3, 80045c0 <__ieee754_rem_pio2+0x2e8>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f7fb ff1b 	bl	80001d4 <__adddf3>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	e9c4 2300 	strd	r2, r3, [r4]
 80043a6:	4630      	mov	r0, r6
 80043a8:	4639      	mov	r1, r7
 80043aa:	f7fb ff11 	bl	80001d0 <__aeabi_dsub>
 80043ae:	a384      	add	r3, pc, #528	; (adr r3, 80045c0 <__ieee754_rem_pio2+0x2e8>)
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f7fb ff0e 	bl	80001d4 <__adddf3>
 80043b8:	f04f 35ff 	mov.w	r5, #4294967295
 80043bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80043c0:	e7c6      	b.n	8004350 <__ieee754_rem_pio2+0x78>
 80043c2:	a381      	add	r3, pc, #516	; (adr r3, 80045c8 <__ieee754_rem_pio2+0x2f0>)
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f7fb ff04 	bl	80001d4 <__adddf3>
 80043cc:	a380      	add	r3, pc, #512	; (adr r3, 80045d0 <__ieee754_rem_pio2+0x2f8>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	4606      	mov	r6, r0
 80043d4:	460f      	mov	r7, r1
 80043d6:	f7fb fefd 	bl	80001d4 <__adddf3>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	e9c4 2300 	strd	r2, r3, [r4]
 80043e2:	4630      	mov	r0, r6
 80043e4:	4639      	mov	r1, r7
 80043e6:	f7fb fef3 	bl	80001d0 <__aeabi_dsub>
 80043ea:	a379      	add	r3, pc, #484	; (adr r3, 80045d0 <__ieee754_rem_pio2+0x2f8>)
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	e7e0      	b.n	80043b4 <__ieee754_rem_pio2+0xdc>
 80043f2:	4b82      	ldr	r3, [pc, #520]	; (80045fc <__ieee754_rem_pio2+0x324>)
 80043f4:	4598      	cmp	r8, r3
 80043f6:	f300 80d0 	bgt.w	800459a <__ieee754_rem_pio2+0x2c2>
 80043fa:	f000 fe53 	bl	80050a4 <fabs>
 80043fe:	ec57 6b10 	vmov	r6, r7, d0
 8004402:	ee10 0a10 	vmov	r0, s0
 8004406:	a374      	add	r3, pc, #464	; (adr r3, 80045d8 <__ieee754_rem_pio2+0x300>)
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	4639      	mov	r1, r7
 800440e:	f7fc f893 	bl	8000538 <__aeabi_dmul>
 8004412:	2200      	movs	r2, #0
 8004414:	4b7a      	ldr	r3, [pc, #488]	; (8004600 <__ieee754_rem_pio2+0x328>)
 8004416:	f7fb fedd 	bl	80001d4 <__adddf3>
 800441a:	f7fc fb27 	bl	8000a6c <__aeabi_d2iz>
 800441e:	4605      	mov	r5, r0
 8004420:	f7fc f824 	bl	800046c <__aeabi_i2d>
 8004424:	a364      	add	r3, pc, #400	; (adr r3, 80045b8 <__ieee754_rem_pio2+0x2e0>)
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800442e:	f7fc f883 	bl	8000538 <__aeabi_dmul>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4630      	mov	r0, r6
 8004438:	4639      	mov	r1, r7
 800443a:	f7fb fec9 	bl	80001d0 <__aeabi_dsub>
 800443e:	a360      	add	r3, pc, #384	; (adr r3, 80045c0 <__ieee754_rem_pio2+0x2e8>)
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	4682      	mov	sl, r0
 8004446:	468b      	mov	fp, r1
 8004448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800444c:	f7fc f874 	bl	8000538 <__aeabi_dmul>
 8004450:	2d1f      	cmp	r5, #31
 8004452:	4606      	mov	r6, r0
 8004454:	460f      	mov	r7, r1
 8004456:	dc2a      	bgt.n	80044ae <__ieee754_rem_pio2+0x1d6>
 8004458:	1e6a      	subs	r2, r5, #1
 800445a:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <__ieee754_rem_pio2+0x32c>)
 800445c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004460:	4598      	cmp	r8, r3
 8004462:	d024      	beq.n	80044ae <__ieee754_rem_pio2+0x1d6>
 8004464:	4632      	mov	r2, r6
 8004466:	463b      	mov	r3, r7
 8004468:	4650      	mov	r0, sl
 800446a:	4659      	mov	r1, fp
 800446c:	f7fb feb0 	bl	80001d0 <__aeabi_dsub>
 8004470:	e9c4 0100 	strd	r0, r1, [r4]
 8004474:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004478:	4650      	mov	r0, sl
 800447a:	4642      	mov	r2, r8
 800447c:	464b      	mov	r3, r9
 800447e:	4659      	mov	r1, fp
 8004480:	f7fb fea6 	bl	80001d0 <__aeabi_dsub>
 8004484:	463b      	mov	r3, r7
 8004486:	4632      	mov	r2, r6
 8004488:	f7fb fea2 	bl	80001d0 <__aeabi_dsub>
 800448c:	9b04      	ldr	r3, [sp, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004494:	f6bf af5c 	bge.w	8004350 <__ieee754_rem_pio2+0x78>
 8004498:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800449c:	6063      	str	r3, [r4, #4]
 800449e:	f8c4 8000 	str.w	r8, [r4]
 80044a2:	60a0      	str	r0, [r4, #8]
 80044a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044a8:	60e3      	str	r3, [r4, #12]
 80044aa:	426d      	negs	r5, r5
 80044ac:	e750      	b.n	8004350 <__ieee754_rem_pio2+0x78>
 80044ae:	4632      	mov	r2, r6
 80044b0:	463b      	mov	r3, r7
 80044b2:	4650      	mov	r0, sl
 80044b4:	4659      	mov	r1, fp
 80044b6:	f7fb fe8b 	bl	80001d0 <__aeabi_dsub>
 80044ba:	ea4f 5228 	mov.w	r2, r8, asr #20
 80044be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	e9c4 0100 	strd	r0, r1, [r4]
 80044ca:	9205      	str	r2, [sp, #20]
 80044cc:	ddd2      	ble.n	8004474 <__ieee754_rem_pio2+0x19c>
 80044ce:	a33e      	add	r3, pc, #248	; (adr r3, 80045c8 <__ieee754_rem_pio2+0x2f0>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044d8:	f7fc f82e 	bl	8000538 <__aeabi_dmul>
 80044dc:	4606      	mov	r6, r0
 80044de:	460f      	mov	r7, r1
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4650      	mov	r0, sl
 80044e6:	4659      	mov	r1, fp
 80044e8:	f7fb fe72 	bl	80001d0 <__aeabi_dsub>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4680      	mov	r8, r0
 80044f2:	4689      	mov	r9, r1
 80044f4:	4650      	mov	r0, sl
 80044f6:	4659      	mov	r1, fp
 80044f8:	f7fb fe6a 	bl	80001d0 <__aeabi_dsub>
 80044fc:	4632      	mov	r2, r6
 80044fe:	463b      	mov	r3, r7
 8004500:	f7fb fe66 	bl	80001d0 <__aeabi_dsub>
 8004504:	a332      	add	r3, pc, #200	; (adr r3, 80045d0 <__ieee754_rem_pio2+0x2f8>)
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	4606      	mov	r6, r0
 800450c:	460f      	mov	r7, r1
 800450e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004512:	f7fc f811 	bl	8000538 <__aeabi_dmul>
 8004516:	4632      	mov	r2, r6
 8004518:	463b      	mov	r3, r7
 800451a:	f7fb fe59 	bl	80001d0 <__aeabi_dsub>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4606      	mov	r6, r0
 8004524:	460f      	mov	r7, r1
 8004526:	4640      	mov	r0, r8
 8004528:	4649      	mov	r1, r9
 800452a:	f7fb fe51 	bl	80001d0 <__aeabi_dsub>
 800452e:	9a05      	ldr	r2, [sp, #20]
 8004530:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b31      	cmp	r3, #49	; 0x31
 8004538:	e9c4 0100 	strd	r0, r1, [r4]
 800453c:	dd2a      	ble.n	8004594 <__ieee754_rem_pio2+0x2bc>
 800453e:	a328      	add	r3, pc, #160	; (adr r3, 80045e0 <__ieee754_rem_pio2+0x308>)
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004548:	f7fb fff6 	bl	8000538 <__aeabi_dmul>
 800454c:	4606      	mov	r6, r0
 800454e:	460f      	mov	r7, r1
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4640      	mov	r0, r8
 8004556:	4649      	mov	r1, r9
 8004558:	f7fb fe3a 	bl	80001d0 <__aeabi_dsub>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4682      	mov	sl, r0
 8004562:	468b      	mov	fp, r1
 8004564:	4640      	mov	r0, r8
 8004566:	4649      	mov	r1, r9
 8004568:	f7fb fe32 	bl	80001d0 <__aeabi_dsub>
 800456c:	4632      	mov	r2, r6
 800456e:	463b      	mov	r3, r7
 8004570:	f7fb fe2e 	bl	80001d0 <__aeabi_dsub>
 8004574:	a31c      	add	r3, pc, #112	; (adr r3, 80045e8 <__ieee754_rem_pio2+0x310>)
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	4606      	mov	r6, r0
 800457c:	460f      	mov	r7, r1
 800457e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004582:	f7fb ffd9 	bl	8000538 <__aeabi_dmul>
 8004586:	4632      	mov	r2, r6
 8004588:	463b      	mov	r3, r7
 800458a:	f7fb fe21 	bl	80001d0 <__aeabi_dsub>
 800458e:	4606      	mov	r6, r0
 8004590:	460f      	mov	r7, r1
 8004592:	e767      	b.n	8004464 <__ieee754_rem_pio2+0x18c>
 8004594:	46c2      	mov	sl, r8
 8004596:	46cb      	mov	fp, r9
 8004598:	e76c      	b.n	8004474 <__ieee754_rem_pio2+0x19c>
 800459a:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <__ieee754_rem_pio2+0x330>)
 800459c:	4598      	cmp	r8, r3
 800459e:	dd35      	ble.n	800460c <__ieee754_rem_pio2+0x334>
 80045a0:	ee10 2a10 	vmov	r2, s0
 80045a4:	463b      	mov	r3, r7
 80045a6:	4630      	mov	r0, r6
 80045a8:	4639      	mov	r1, r7
 80045aa:	f7fb fe11 	bl	80001d0 <__aeabi_dsub>
 80045ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80045b2:	e9c4 0100 	strd	r0, r1, [r4]
 80045b6:	e6a1      	b.n	80042fc <__ieee754_rem_pio2+0x24>
 80045b8:	54400000 	.word	0x54400000
 80045bc:	3ff921fb 	.word	0x3ff921fb
 80045c0:	1a626331 	.word	0x1a626331
 80045c4:	3dd0b461 	.word	0x3dd0b461
 80045c8:	1a600000 	.word	0x1a600000
 80045cc:	3dd0b461 	.word	0x3dd0b461
 80045d0:	2e037073 	.word	0x2e037073
 80045d4:	3ba3198a 	.word	0x3ba3198a
 80045d8:	6dc9c883 	.word	0x6dc9c883
 80045dc:	3fe45f30 	.word	0x3fe45f30
 80045e0:	2e000000 	.word	0x2e000000
 80045e4:	3ba3198a 	.word	0x3ba3198a
 80045e8:	252049c1 	.word	0x252049c1
 80045ec:	397b839a 	.word	0x397b839a
 80045f0:	3fe921fb 	.word	0x3fe921fb
 80045f4:	4002d97b 	.word	0x4002d97b
 80045f8:	3ff921fb 	.word	0x3ff921fb
 80045fc:	413921fb 	.word	0x413921fb
 8004600:	3fe00000 	.word	0x3fe00000
 8004604:	080052e8 	.word	0x080052e8
 8004608:	7fefffff 	.word	0x7fefffff
 800460c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004610:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004614:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004618:	4630      	mov	r0, r6
 800461a:	460f      	mov	r7, r1
 800461c:	f7fc fa26 	bl	8000a6c <__aeabi_d2iz>
 8004620:	f7fb ff24 	bl	800046c <__aeabi_i2d>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4630      	mov	r0, r6
 800462a:	4639      	mov	r1, r7
 800462c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004630:	f7fb fdce 	bl	80001d0 <__aeabi_dsub>
 8004634:	2200      	movs	r2, #0
 8004636:	4b1f      	ldr	r3, [pc, #124]	; (80046b4 <__ieee754_rem_pio2+0x3dc>)
 8004638:	f7fb ff7e 	bl	8000538 <__aeabi_dmul>
 800463c:	460f      	mov	r7, r1
 800463e:	4606      	mov	r6, r0
 8004640:	f7fc fa14 	bl	8000a6c <__aeabi_d2iz>
 8004644:	f7fb ff12 	bl	800046c <__aeabi_i2d>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4630      	mov	r0, r6
 800464e:	4639      	mov	r1, r7
 8004650:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004654:	f7fb fdbc 	bl	80001d0 <__aeabi_dsub>
 8004658:	2200      	movs	r2, #0
 800465a:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <__ieee754_rem_pio2+0x3dc>)
 800465c:	f7fb ff6c 	bl	8000538 <__aeabi_dmul>
 8004660:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004664:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004668:	f04f 0803 	mov.w	r8, #3
 800466c:	2600      	movs	r6, #0
 800466e:	2700      	movs	r7, #0
 8004670:	4632      	mov	r2, r6
 8004672:	463b      	mov	r3, r7
 8004674:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004678:	f108 3aff 	add.w	sl, r8, #4294967295
 800467c:	f7fc f9c4 	bl	8000a08 <__aeabi_dcmpeq>
 8004680:	b9b0      	cbnz	r0, 80046b0 <__ieee754_rem_pio2+0x3d8>
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <__ieee754_rem_pio2+0x3e0>)
 8004684:	9301      	str	r3, [sp, #4]
 8004686:	2302      	movs	r3, #2
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	462a      	mov	r2, r5
 800468c:	4643      	mov	r3, r8
 800468e:	4621      	mov	r1, r4
 8004690:	a806      	add	r0, sp, #24
 8004692:	f000 f8fd 	bl	8004890 <__kernel_rem_pio2>
 8004696:	9b04      	ldr	r3, [sp, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	4605      	mov	r5, r0
 800469c:	f6bf ae58 	bge.w	8004350 <__ieee754_rem_pio2+0x78>
 80046a0:	6863      	ldr	r3, [r4, #4]
 80046a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80046a6:	6063      	str	r3, [r4, #4]
 80046a8:	68e3      	ldr	r3, [r4, #12]
 80046aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80046ae:	e6fb      	b.n	80044a8 <__ieee754_rem_pio2+0x1d0>
 80046b0:	46d0      	mov	r8, sl
 80046b2:	e7dd      	b.n	8004670 <__ieee754_rem_pio2+0x398>
 80046b4:	41700000 	.word	0x41700000
 80046b8:	08005368 	.word	0x08005368
 80046bc:	00000000 	.word	0x00000000

080046c0 <__kernel_cos>:
 80046c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c4:	ec59 8b10 	vmov	r8, r9, d0
 80046c8:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 80046cc:	b085      	sub	sp, #20
 80046ce:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80046d2:	ed8d 1b00 	vstr	d1, [sp]
 80046d6:	da07      	bge.n	80046e8 <__kernel_cos+0x28>
 80046d8:	ee10 0a10 	vmov	r0, s0
 80046dc:	4649      	mov	r1, r9
 80046de:	f7fc f9c5 	bl	8000a6c <__aeabi_d2iz>
 80046e2:	2800      	cmp	r0, #0
 80046e4:	f000 80aa 	beq.w	800483c <__kernel_cos+0x17c>
 80046e8:	4642      	mov	r2, r8
 80046ea:	464b      	mov	r3, r9
 80046ec:	4640      	mov	r0, r8
 80046ee:	4649      	mov	r1, r9
 80046f0:	f7fb ff22 	bl	8000538 <__aeabi_dmul>
 80046f4:	a359      	add	r3, pc, #356	; (adr r3, 800485c <__kernel_cos+0x19c>)
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	4604      	mov	r4, r0
 80046fc:	460d      	mov	r5, r1
 80046fe:	f7fb ff1b 	bl	8000538 <__aeabi_dmul>
 8004702:	a358      	add	r3, pc, #352	; (adr r3, 8004864 <__kernel_cos+0x1a4>)
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f7fb fd64 	bl	80001d4 <__adddf3>
 800470c:	4622      	mov	r2, r4
 800470e:	462b      	mov	r3, r5
 8004710:	f7fb ff12 	bl	8000538 <__aeabi_dmul>
 8004714:	a355      	add	r3, pc, #340	; (adr r3, 800486c <__kernel_cos+0x1ac>)
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f7fb fd59 	bl	80001d0 <__aeabi_dsub>
 800471e:	4622      	mov	r2, r4
 8004720:	462b      	mov	r3, r5
 8004722:	f7fb ff09 	bl	8000538 <__aeabi_dmul>
 8004726:	a353      	add	r3, pc, #332	; (adr r3, 8004874 <__kernel_cos+0x1b4>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f7fb fd52 	bl	80001d4 <__adddf3>
 8004730:	4622      	mov	r2, r4
 8004732:	462b      	mov	r3, r5
 8004734:	f7fb ff00 	bl	8000538 <__aeabi_dmul>
 8004738:	a350      	add	r3, pc, #320	; (adr r3, 800487c <__kernel_cos+0x1bc>)
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f7fb fd47 	bl	80001d0 <__aeabi_dsub>
 8004742:	4622      	mov	r2, r4
 8004744:	462b      	mov	r3, r5
 8004746:	f7fb fef7 	bl	8000538 <__aeabi_dmul>
 800474a:	a34e      	add	r3, pc, #312	; (adr r3, 8004884 <__kernel_cos+0x1c4>)
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f7fb fd40 	bl	80001d4 <__adddf3>
 8004754:	462b      	mov	r3, r5
 8004756:	4622      	mov	r2, r4
 8004758:	f7fb feee 	bl	8000538 <__aeabi_dmul>
 800475c:	4b3a      	ldr	r3, [pc, #232]	; (8004848 <__kernel_cos+0x188>)
 800475e:	429f      	cmp	r7, r3
 8004760:	4682      	mov	sl, r0
 8004762:	468b      	mov	fp, r1
 8004764:	dc2c      	bgt.n	80047c0 <__kernel_cos+0x100>
 8004766:	2200      	movs	r2, #0
 8004768:	4b38      	ldr	r3, [pc, #224]	; (800484c <__kernel_cos+0x18c>)
 800476a:	4620      	mov	r0, r4
 800476c:	4629      	mov	r1, r5
 800476e:	f7fb fee3 	bl	8000538 <__aeabi_dmul>
 8004772:	4652      	mov	r2, sl
 8004774:	4606      	mov	r6, r0
 8004776:	460f      	mov	r7, r1
 8004778:	465b      	mov	r3, fp
 800477a:	4620      	mov	r0, r4
 800477c:	4629      	mov	r1, r5
 800477e:	f7fb fedb 	bl	8000538 <__aeabi_dmul>
 8004782:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004786:	4604      	mov	r4, r0
 8004788:	460d      	mov	r5, r1
 800478a:	4640      	mov	r0, r8
 800478c:	4649      	mov	r1, r9
 800478e:	f7fb fed3 	bl	8000538 <__aeabi_dmul>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4620      	mov	r0, r4
 8004798:	4629      	mov	r1, r5
 800479a:	f7fb fd19 	bl	80001d0 <__aeabi_dsub>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4630      	mov	r0, r6
 80047a4:	4639      	mov	r1, r7
 80047a6:	f7fb fd13 	bl	80001d0 <__aeabi_dsub>
 80047aa:	460b      	mov	r3, r1
 80047ac:	4928      	ldr	r1, [pc, #160]	; (8004850 <__kernel_cos+0x190>)
 80047ae:	4602      	mov	r2, r0
 80047b0:	2000      	movs	r0, #0
 80047b2:	f7fb fd0d 	bl	80001d0 <__aeabi_dsub>
 80047b6:	ec41 0b10 	vmov	d0, r0, r1
 80047ba:	b005      	add	sp, #20
 80047bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c0:	4b24      	ldr	r3, [pc, #144]	; (8004854 <__kernel_cos+0x194>)
 80047c2:	4923      	ldr	r1, [pc, #140]	; (8004850 <__kernel_cos+0x190>)
 80047c4:	429f      	cmp	r7, r3
 80047c6:	bfd7      	itett	le
 80047c8:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 80047cc:	4f22      	ldrgt	r7, [pc, #136]	; (8004858 <__kernel_cos+0x198>)
 80047ce:	2200      	movle	r2, #0
 80047d0:	4616      	movle	r6, r2
 80047d2:	bfd4      	ite	le
 80047d4:	461f      	movle	r7, r3
 80047d6:	2600      	movgt	r6, #0
 80047d8:	4632      	mov	r2, r6
 80047da:	463b      	mov	r3, r7
 80047dc:	2000      	movs	r0, #0
 80047de:	f7fb fcf7 	bl	80001d0 <__aeabi_dsub>
 80047e2:	2200      	movs	r2, #0
 80047e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047e8:	4b18      	ldr	r3, [pc, #96]	; (800484c <__kernel_cos+0x18c>)
 80047ea:	4620      	mov	r0, r4
 80047ec:	4629      	mov	r1, r5
 80047ee:	f7fb fea3 	bl	8000538 <__aeabi_dmul>
 80047f2:	4632      	mov	r2, r6
 80047f4:	463b      	mov	r3, r7
 80047f6:	f7fb fceb 	bl	80001d0 <__aeabi_dsub>
 80047fa:	4652      	mov	r2, sl
 80047fc:	4606      	mov	r6, r0
 80047fe:	460f      	mov	r7, r1
 8004800:	465b      	mov	r3, fp
 8004802:	4620      	mov	r0, r4
 8004804:	4629      	mov	r1, r5
 8004806:	f7fb fe97 	bl	8000538 <__aeabi_dmul>
 800480a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800480e:	4604      	mov	r4, r0
 8004810:	460d      	mov	r5, r1
 8004812:	4640      	mov	r0, r8
 8004814:	4649      	mov	r1, r9
 8004816:	f7fb fe8f 	bl	8000538 <__aeabi_dmul>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4620      	mov	r0, r4
 8004820:	4629      	mov	r1, r5
 8004822:	f7fb fcd5 	bl	80001d0 <__aeabi_dsub>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4630      	mov	r0, r6
 800482c:	4639      	mov	r1, r7
 800482e:	f7fb fccf 	bl	80001d0 <__aeabi_dsub>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800483a:	e7ba      	b.n	80047b2 <__kernel_cos+0xf2>
 800483c:	2000      	movs	r0, #0
 800483e:	4904      	ldr	r1, [pc, #16]	; (8004850 <__kernel_cos+0x190>)
 8004840:	e7b9      	b.n	80047b6 <__kernel_cos+0xf6>
 8004842:	bf00      	nop
 8004844:	f3af 8000 	nop.w
 8004848:	3fd33332 	.word	0x3fd33332
 800484c:	3fe00000 	.word	0x3fe00000
 8004850:	3ff00000 	.word	0x3ff00000
 8004854:	3fe90000 	.word	0x3fe90000
 8004858:	3fd20000 	.word	0x3fd20000
 800485c:	be8838d4 	.word	0xbe8838d4
 8004860:	bda8fae9 	.word	0xbda8fae9
 8004864:	bdb4b1c4 	.word	0xbdb4b1c4
 8004868:	3e21ee9e 	.word	0x3e21ee9e
 800486c:	809c52ad 	.word	0x809c52ad
 8004870:	3e927e4f 	.word	0x3e927e4f
 8004874:	19cb1590 	.word	0x19cb1590
 8004878:	3efa01a0 	.word	0x3efa01a0
 800487c:	16c15177 	.word	0x16c15177
 8004880:	3f56c16c 	.word	0x3f56c16c
 8004884:	5555554c 	.word	0x5555554c
 8004888:	3fa55555 	.word	0x3fa55555
 800488c:	00000000 	.word	0x00000000

08004890 <__kernel_rem_pio2>:
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	ed2d 8b02 	vpush	{d8}
 8004898:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800489c:	1ed4      	subs	r4, r2, #3
 800489e:	9306      	str	r3, [sp, #24]
 80048a0:	9102      	str	r1, [sp, #8]
 80048a2:	4bc3      	ldr	r3, [pc, #780]	; (8004bb0 <__kernel_rem_pio2+0x320>)
 80048a4:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80048a6:	9009      	str	r0, [sp, #36]	; 0x24
 80048a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	9b06      	ldr	r3, [sp, #24]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	9304      	str	r3, [sp, #16]
 80048b4:	2318      	movs	r3, #24
 80048b6:	fb94 f4f3 	sdiv	r4, r4, r3
 80048ba:	f06f 0317 	mvn.w	r3, #23
 80048be:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80048c2:	fb04 3303 	mla	r3, r4, r3, r3
 80048c6:	eb03 0a02 	add.w	sl, r3, r2
 80048ca:	9b00      	ldr	r3, [sp, #0]
 80048cc:	9a04      	ldr	r2, [sp, #16]
 80048ce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004ba0 <__kernel_rem_pio2+0x310>
 80048d2:	eb03 0802 	add.w	r8, r3, r2
 80048d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80048d8:	1aa7      	subs	r7, r4, r2
 80048da:	ae20      	add	r6, sp, #128	; 0x80
 80048dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80048e0:	2500      	movs	r5, #0
 80048e2:	4545      	cmp	r5, r8
 80048e4:	dd13      	ble.n	800490e <__kernel_rem_pio2+0x7e>
 80048e6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8004ba0 <__kernel_rem_pio2+0x310>
 80048ea:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80048ee:	2600      	movs	r6, #0
 80048f0:	9b00      	ldr	r3, [sp, #0]
 80048f2:	429e      	cmp	r6, r3
 80048f4:	dc32      	bgt.n	800495c <__kernel_rem_pio2+0xcc>
 80048f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f8:	9303      	str	r3, [sp, #12]
 80048fa:	9b06      	ldr	r3, [sp, #24]
 80048fc:	199d      	adds	r5, r3, r6
 80048fe:	ab20      	add	r3, sp, #128	; 0x80
 8004900:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004904:	9308      	str	r3, [sp, #32]
 8004906:	ec59 8b18 	vmov	r8, r9, d8
 800490a:	2700      	movs	r7, #0
 800490c:	e01f      	b.n	800494e <__kernel_rem_pio2+0xbe>
 800490e:	42ef      	cmn	r7, r5
 8004910:	d407      	bmi.n	8004922 <__kernel_rem_pio2+0x92>
 8004912:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004916:	f7fb fda9 	bl	800046c <__aeabi_i2d>
 800491a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800491e:	3501      	adds	r5, #1
 8004920:	e7df      	b.n	80048e2 <__kernel_rem_pio2+0x52>
 8004922:	ec51 0b18 	vmov	r0, r1, d8
 8004926:	e7f8      	b.n	800491a <__kernel_rem_pio2+0x8a>
 8004928:	9908      	ldr	r1, [sp, #32]
 800492a:	9d03      	ldr	r5, [sp, #12]
 800492c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004930:	9108      	str	r1, [sp, #32]
 8004932:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004936:	9503      	str	r5, [sp, #12]
 8004938:	f7fb fdfe 	bl	8000538 <__aeabi_dmul>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4640      	mov	r0, r8
 8004942:	4649      	mov	r1, r9
 8004944:	f7fb fc46 	bl	80001d4 <__adddf3>
 8004948:	3701      	adds	r7, #1
 800494a:	4680      	mov	r8, r0
 800494c:	4689      	mov	r9, r1
 800494e:	9b04      	ldr	r3, [sp, #16]
 8004950:	429f      	cmp	r7, r3
 8004952:	dde9      	ble.n	8004928 <__kernel_rem_pio2+0x98>
 8004954:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004958:	3601      	adds	r6, #1
 800495a:	e7c9      	b.n	80048f0 <__kernel_rem_pio2+0x60>
 800495c:	9b00      	ldr	r3, [sp, #0]
 800495e:	9f00      	ldr	r7, [sp, #0]
 8004960:	aa0c      	add	r2, sp, #48	; 0x30
 8004962:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004966:	930b      	str	r3, [sp, #44]	; 0x2c
 8004968:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800496a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800496e:	930a      	str	r3, [sp, #40]	; 0x28
 8004970:	ab98      	add	r3, sp, #608	; 0x260
 8004972:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8004976:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800497a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800497e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8004982:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004986:	9308      	str	r3, [sp, #32]
 8004988:	9a08      	ldr	r2, [sp, #32]
 800498a:	ab98      	add	r3, sp, #608	; 0x260
 800498c:	4413      	add	r3, r2
 800498e:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8004992:	2600      	movs	r6, #0
 8004994:	1bbb      	subs	r3, r7, r6
 8004996:	2b00      	cmp	r3, #0
 8004998:	dc77      	bgt.n	8004a8a <__kernel_rem_pio2+0x1fa>
 800499a:	ec49 8b10 	vmov	d0, r8, r9
 800499e:	4650      	mov	r0, sl
 80049a0:	f000 fc0e 	bl	80051c0 <scalbn>
 80049a4:	ec55 4b10 	vmov	r4, r5, d0
 80049a8:	2200      	movs	r2, #0
 80049aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80049ae:	ee10 0a10 	vmov	r0, s0
 80049b2:	4629      	mov	r1, r5
 80049b4:	f7fb fdc0 	bl	8000538 <__aeabi_dmul>
 80049b8:	ec41 0b10 	vmov	d0, r0, r1
 80049bc:	f000 fb7c 	bl	80050b8 <floor>
 80049c0:	2200      	movs	r2, #0
 80049c2:	ec51 0b10 	vmov	r0, r1, d0
 80049c6:	4b7b      	ldr	r3, [pc, #492]	; (8004bb4 <__kernel_rem_pio2+0x324>)
 80049c8:	f7fb fdb6 	bl	8000538 <__aeabi_dmul>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4620      	mov	r0, r4
 80049d2:	4629      	mov	r1, r5
 80049d4:	f7fb fbfc 	bl	80001d0 <__aeabi_dsub>
 80049d8:	460d      	mov	r5, r1
 80049da:	4604      	mov	r4, r0
 80049dc:	f7fc f846 	bl	8000a6c <__aeabi_d2iz>
 80049e0:	9003      	str	r0, [sp, #12]
 80049e2:	f7fb fd43 	bl	800046c <__aeabi_i2d>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4620      	mov	r0, r4
 80049ec:	4629      	mov	r1, r5
 80049ee:	f7fb fbef 	bl	80001d0 <__aeabi_dsub>
 80049f2:	f1ba 0f00 	cmp.w	sl, #0
 80049f6:	4680      	mov	r8, r0
 80049f8:	4689      	mov	r9, r1
 80049fa:	dd6b      	ble.n	8004ad4 <__kernel_rem_pio2+0x244>
 80049fc:	1e7a      	subs	r2, r7, #1
 80049fe:	ab0c      	add	r3, sp, #48	; 0x30
 8004a00:	f1ca 0118 	rsb	r1, sl, #24
 8004a04:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004a08:	9c03      	ldr	r4, [sp, #12]
 8004a0a:	fa40 f301 	asr.w	r3, r0, r1
 8004a0e:	441c      	add	r4, r3
 8004a10:	408b      	lsls	r3, r1
 8004a12:	1ac0      	subs	r0, r0, r3
 8004a14:	ab0c      	add	r3, sp, #48	; 0x30
 8004a16:	9403      	str	r4, [sp, #12]
 8004a18:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004a1c:	f1ca 0317 	rsb	r3, sl, #23
 8004a20:	fa40 fb03 	asr.w	fp, r0, r3
 8004a24:	f1bb 0f00 	cmp.w	fp, #0
 8004a28:	dd62      	ble.n	8004af0 <__kernel_rem_pio2+0x260>
 8004a2a:	9b03      	ldr	r3, [sp, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	3301      	adds	r3, #1
 8004a30:	9303      	str	r3, [sp, #12]
 8004a32:	4614      	mov	r4, r2
 8004a34:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004a38:	4297      	cmp	r7, r2
 8004a3a:	f300 8089 	bgt.w	8004b50 <__kernel_rem_pio2+0x2c0>
 8004a3e:	f1ba 0f00 	cmp.w	sl, #0
 8004a42:	dd07      	ble.n	8004a54 <__kernel_rem_pio2+0x1c4>
 8004a44:	f1ba 0f01 	cmp.w	sl, #1
 8004a48:	f000 8096 	beq.w	8004b78 <__kernel_rem_pio2+0x2e8>
 8004a4c:	f1ba 0f02 	cmp.w	sl, #2
 8004a50:	f000 809c 	beq.w	8004b8c <__kernel_rem_pio2+0x2fc>
 8004a54:	f1bb 0f02 	cmp.w	fp, #2
 8004a58:	d14a      	bne.n	8004af0 <__kernel_rem_pio2+0x260>
 8004a5a:	4642      	mov	r2, r8
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	2000      	movs	r0, #0
 8004a60:	4955      	ldr	r1, [pc, #340]	; (8004bb8 <__kernel_rem_pio2+0x328>)
 8004a62:	f7fb fbb5 	bl	80001d0 <__aeabi_dsub>
 8004a66:	4680      	mov	r8, r0
 8004a68:	4689      	mov	r9, r1
 8004a6a:	2c00      	cmp	r4, #0
 8004a6c:	d040      	beq.n	8004af0 <__kernel_rem_pio2+0x260>
 8004a6e:	4650      	mov	r0, sl
 8004a70:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004ba8 <__kernel_rem_pio2+0x318>
 8004a74:	f000 fba4 	bl	80051c0 <scalbn>
 8004a78:	4640      	mov	r0, r8
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	ec53 2b10 	vmov	r2, r3, d0
 8004a80:	f7fb fba6 	bl	80001d0 <__aeabi_dsub>
 8004a84:	4680      	mov	r8, r0
 8004a86:	4689      	mov	r9, r1
 8004a88:	e032      	b.n	8004af0 <__kernel_rem_pio2+0x260>
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	4b4b      	ldr	r3, [pc, #300]	; (8004bbc <__kernel_rem_pio2+0x32c>)
 8004a8e:	4640      	mov	r0, r8
 8004a90:	4649      	mov	r1, r9
 8004a92:	f7fb fd51 	bl	8000538 <__aeabi_dmul>
 8004a96:	f7fb ffe9 	bl	8000a6c <__aeabi_d2iz>
 8004a9a:	f7fb fce7 	bl	800046c <__aeabi_i2d>
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <__kernel_rem_pio2+0x330>)
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	460d      	mov	r5, r1
 8004aa6:	f7fb fd47 	bl	8000538 <__aeabi_dmul>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4640      	mov	r0, r8
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	f7fb fb8d 	bl	80001d0 <__aeabi_dsub>
 8004ab6:	f7fb ffd9 	bl	8000a6c <__aeabi_d2iz>
 8004aba:	ab0c      	add	r3, sp, #48	; 0x30
 8004abc:	4629      	mov	r1, r5
 8004abe:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004ac2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f7fb fb84 	bl	80001d4 <__adddf3>
 8004acc:	3601      	adds	r6, #1
 8004ace:	4680      	mov	r8, r0
 8004ad0:	4689      	mov	r9, r1
 8004ad2:	e75f      	b.n	8004994 <__kernel_rem_pio2+0x104>
 8004ad4:	d106      	bne.n	8004ae4 <__kernel_rem_pio2+0x254>
 8004ad6:	1e7b      	subs	r3, r7, #1
 8004ad8:	aa0c      	add	r2, sp, #48	; 0x30
 8004ada:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ade:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8004ae2:	e79f      	b.n	8004a24 <__kernel_rem_pio2+0x194>
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	4b37      	ldr	r3, [pc, #220]	; (8004bc4 <__kernel_rem_pio2+0x334>)
 8004ae8:	f7fb ffac 	bl	8000a44 <__aeabi_dcmpge>
 8004aec:	bb68      	cbnz	r0, 8004b4a <__kernel_rem_pio2+0x2ba>
 8004aee:	4683      	mov	fp, r0
 8004af0:	2200      	movs	r2, #0
 8004af2:	2300      	movs	r3, #0
 8004af4:	4640      	mov	r0, r8
 8004af6:	4649      	mov	r1, r9
 8004af8:	f7fb ff86 	bl	8000a08 <__aeabi_dcmpeq>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	f000 80c1 	beq.w	8004c84 <__kernel_rem_pio2+0x3f4>
 8004b02:	1e7c      	subs	r4, r7, #1
 8004b04:	4623      	mov	r3, r4
 8004b06:	2200      	movs	r2, #0
 8004b08:	9900      	ldr	r1, [sp, #0]
 8004b0a:	428b      	cmp	r3, r1
 8004b0c:	da5c      	bge.n	8004bc8 <__kernel_rem_pio2+0x338>
 8004b0e:	2a00      	cmp	r2, #0
 8004b10:	f040 808b 	bne.w	8004c2a <__kernel_rem_pio2+0x39a>
 8004b14:	2401      	movs	r4, #1
 8004b16:	f06f 0203 	mvn.w	r2, #3
 8004b1a:	fb02 f304 	mul.w	r3, r2, r4
 8004b1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b20:	58cb      	ldr	r3, [r1, r3]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d056      	beq.n	8004bd4 <__kernel_rem_pio2+0x344>
 8004b26:	9b08      	ldr	r3, [sp, #32]
 8004b28:	aa98      	add	r2, sp, #608	; 0x260
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8004b30:	9b06      	ldr	r3, [sp, #24]
 8004b32:	19dd      	adds	r5, r3, r7
 8004b34:	ab20      	add	r3, sp, #128	; 0x80
 8004b36:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004b3a:	19e3      	adds	r3, r4, r7
 8004b3c:	1c7e      	adds	r6, r7, #1
 8004b3e:	9303      	str	r3, [sp, #12]
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	429e      	cmp	r6, r3
 8004b44:	dd48      	ble.n	8004bd8 <__kernel_rem_pio2+0x348>
 8004b46:	461f      	mov	r7, r3
 8004b48:	e712      	b.n	8004970 <__kernel_rem_pio2+0xe0>
 8004b4a:	f04f 0b02 	mov.w	fp, #2
 8004b4e:	e76c      	b.n	8004a2a <__kernel_rem_pio2+0x19a>
 8004b50:	ab0c      	add	r3, sp, #48	; 0x30
 8004b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b56:	b94c      	cbnz	r4, 8004b6c <__kernel_rem_pio2+0x2dc>
 8004b58:	b12b      	cbz	r3, 8004b66 <__kernel_rem_pio2+0x2d6>
 8004b5a:	a80c      	add	r0, sp, #48	; 0x30
 8004b5c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004b60:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004b64:	2301      	movs	r3, #1
 8004b66:	3201      	adds	r2, #1
 8004b68:	461c      	mov	r4, r3
 8004b6a:	e765      	b.n	8004a38 <__kernel_rem_pio2+0x1a8>
 8004b6c:	a80c      	add	r0, sp, #48	; 0x30
 8004b6e:	1acb      	subs	r3, r1, r3
 8004b70:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004b74:	4623      	mov	r3, r4
 8004b76:	e7f6      	b.n	8004b66 <__kernel_rem_pio2+0x2d6>
 8004b78:	1e7a      	subs	r2, r7, #1
 8004b7a:	ab0c      	add	r3, sp, #48	; 0x30
 8004b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b80:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004b84:	a90c      	add	r1, sp, #48	; 0x30
 8004b86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004b8a:	e763      	b.n	8004a54 <__kernel_rem_pio2+0x1c4>
 8004b8c:	1e7a      	subs	r2, r7, #1
 8004b8e:	ab0c      	add	r3, sp, #48	; 0x30
 8004b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b94:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004b98:	e7f4      	b.n	8004b84 <__kernel_rem_pio2+0x2f4>
 8004b9a:	bf00      	nop
 8004b9c:	f3af 8000 	nop.w
	...
 8004bac:	3ff00000 	.word	0x3ff00000
 8004bb0:	080054b0 	.word	0x080054b0
 8004bb4:	40200000 	.word	0x40200000
 8004bb8:	3ff00000 	.word	0x3ff00000
 8004bbc:	3e700000 	.word	0x3e700000
 8004bc0:	41700000 	.word	0x41700000
 8004bc4:	3fe00000 	.word	0x3fe00000
 8004bc8:	a90c      	add	r1, sp, #48	; 0x30
 8004bca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	e799      	b.n	8004b08 <__kernel_rem_pio2+0x278>
 8004bd4:	3401      	adds	r4, #1
 8004bd6:	e7a0      	b.n	8004b1a <__kernel_rem_pio2+0x28a>
 8004bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bda:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004bde:	f7fb fc45 	bl	800046c <__aeabi_i2d>
 8004be2:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be8:	9508      	str	r5, [sp, #32]
 8004bea:	461c      	mov	r4, r3
 8004bec:	2700      	movs	r7, #0
 8004bee:	f04f 0800 	mov.w	r8, #0
 8004bf2:	f04f 0900 	mov.w	r9, #0
 8004bf6:	9b04      	ldr	r3, [sp, #16]
 8004bf8:	429f      	cmp	r7, r3
 8004bfa:	dd03      	ble.n	8004c04 <__kernel_rem_pio2+0x374>
 8004bfc:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004c00:	3601      	adds	r6, #1
 8004c02:	e79d      	b.n	8004b40 <__kernel_rem_pio2+0x2b0>
 8004c04:	9908      	ldr	r1, [sp, #32]
 8004c06:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004c0a:	9108      	str	r1, [sp, #32]
 8004c0c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004c10:	f7fb fc92 	bl	8000538 <__aeabi_dmul>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4640      	mov	r0, r8
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	f7fb fada 	bl	80001d4 <__adddf3>
 8004c20:	3701      	adds	r7, #1
 8004c22:	4680      	mov	r8, r0
 8004c24:	4689      	mov	r9, r1
 8004c26:	e7e6      	b.n	8004bf6 <__kernel_rem_pio2+0x366>
 8004c28:	3c01      	subs	r4, #1
 8004c2a:	ab0c      	add	r3, sp, #48	; 0x30
 8004c2c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004c30:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f7      	beq.n	8004c28 <__kernel_rem_pio2+0x398>
 8004c38:	4650      	mov	r0, sl
 8004c3a:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8004f10 <__kernel_rem_pio2+0x680>
 8004c3e:	f000 fabf 	bl	80051c0 <scalbn>
 8004c42:	00e5      	lsls	r5, r4, #3
 8004c44:	ab98      	add	r3, sp, #608	; 0x260
 8004c46:	eb03 0905 	add.w	r9, r3, r5
 8004c4a:	ec57 6b10 	vmov	r6, r7, d0
 8004c4e:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8004c52:	46a0      	mov	r8, r4
 8004c54:	f1b8 0f00 	cmp.w	r8, #0
 8004c58:	da4d      	bge.n	8004cf6 <__kernel_rem_pio2+0x466>
 8004c5a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8004f18 <__kernel_rem_pio2+0x688>
 8004c5e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8004c62:	2300      	movs	r3, #0
 8004c64:	9304      	str	r3, [sp, #16]
 8004c66:	4657      	mov	r7, sl
 8004c68:	9b04      	ldr	r3, [sp, #16]
 8004c6a:	ebb4 0903 	subs.w	r9, r4, r3
 8004c6e:	d476      	bmi.n	8004d5e <__kernel_rem_pio2+0x4ce>
 8004c70:	4bab      	ldr	r3, [pc, #684]	; (8004f20 <__kernel_rem_pio2+0x690>)
 8004c72:	461e      	mov	r6, r3
 8004c74:	ab70      	add	r3, sp, #448	; 0x1c0
 8004c76:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004c7a:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004c7e:	f04f 0800 	mov.w	r8, #0
 8004c82:	e05e      	b.n	8004d42 <__kernel_rem_pio2+0x4b2>
 8004c84:	f1ca 0000 	rsb	r0, sl, #0
 8004c88:	ec49 8b10 	vmov	d0, r8, r9
 8004c8c:	f000 fa98 	bl	80051c0 <scalbn>
 8004c90:	ec55 4b10 	vmov	r4, r5, d0
 8004c94:	2200      	movs	r2, #0
 8004c96:	4ba3      	ldr	r3, [pc, #652]	; (8004f24 <__kernel_rem_pio2+0x694>)
 8004c98:	ee10 0a10 	vmov	r0, s0
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	f7fb fed1 	bl	8000a44 <__aeabi_dcmpge>
 8004ca2:	b1f8      	cbz	r0, 8004ce4 <__kernel_rem_pio2+0x454>
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	4ba0      	ldr	r3, [pc, #640]	; (8004f28 <__kernel_rem_pio2+0x698>)
 8004ca8:	4620      	mov	r0, r4
 8004caa:	4629      	mov	r1, r5
 8004cac:	f7fb fc44 	bl	8000538 <__aeabi_dmul>
 8004cb0:	f7fb fedc 	bl	8000a6c <__aeabi_d2iz>
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	f7fb fbd9 	bl	800046c <__aeabi_i2d>
 8004cba:	2200      	movs	r2, #0
 8004cbc:	4b99      	ldr	r3, [pc, #612]	; (8004f24 <__kernel_rem_pio2+0x694>)
 8004cbe:	f7fb fc3b 	bl	8000538 <__aeabi_dmul>
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f7fb fa81 	bl	80001d0 <__aeabi_dsub>
 8004cce:	f7fb fecd 	bl	8000a6c <__aeabi_d2iz>
 8004cd2:	1c7c      	adds	r4, r7, #1
 8004cd4:	ab0c      	add	r3, sp, #48	; 0x30
 8004cd6:	f10a 0a18 	add.w	sl, sl, #24
 8004cda:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004cde:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8004ce2:	e7a9      	b.n	8004c38 <__kernel_rem_pio2+0x3a8>
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	f7fb fec0 	bl	8000a6c <__aeabi_d2iz>
 8004cec:	ab0c      	add	r3, sp, #48	; 0x30
 8004cee:	463c      	mov	r4, r7
 8004cf0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004cf4:	e7a0      	b.n	8004c38 <__kernel_rem_pio2+0x3a8>
 8004cf6:	ab0c      	add	r3, sp, #48	; 0x30
 8004cf8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004cfc:	f7fb fbb6 	bl	800046c <__aeabi_i2d>
 8004d00:	4632      	mov	r2, r6
 8004d02:	463b      	mov	r3, r7
 8004d04:	f7fb fc18 	bl	8000538 <__aeabi_dmul>
 8004d08:	2200      	movs	r2, #0
 8004d0a:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8004d0e:	4b86      	ldr	r3, [pc, #536]	; (8004f28 <__kernel_rem_pio2+0x698>)
 8004d10:	4630      	mov	r0, r6
 8004d12:	4639      	mov	r1, r7
 8004d14:	f7fb fc10 	bl	8000538 <__aeabi_dmul>
 8004d18:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d1c:	4606      	mov	r6, r0
 8004d1e:	460f      	mov	r7, r1
 8004d20:	e798      	b.n	8004c54 <__kernel_rem_pio2+0x3c4>
 8004d22:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004d26:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8004d2a:	f7fb fc05 	bl	8000538 <__aeabi_dmul>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d36:	f7fb fa4d 	bl	80001d4 <__adddf3>
 8004d3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d3e:	f108 0801 	add.w	r8, r8, #1
 8004d42:	9b00      	ldr	r3, [sp, #0]
 8004d44:	4598      	cmp	r8, r3
 8004d46:	dc02      	bgt.n	8004d4e <__kernel_rem_pio2+0x4be>
 8004d48:	9b04      	ldr	r3, [sp, #16]
 8004d4a:	4598      	cmp	r8, r3
 8004d4c:	dde9      	ble.n	8004d22 <__kernel_rem_pio2+0x492>
 8004d4e:	9b04      	ldr	r3, [sp, #16]
 8004d50:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004d54:	3301      	adds	r3, #1
 8004d56:	ecaa 7b02 	vstmia	sl!, {d7}
 8004d5a:	9304      	str	r3, [sp, #16]
 8004d5c:	e784      	b.n	8004c68 <__kernel_rem_pio2+0x3d8>
 8004d5e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d85d      	bhi.n	8004e20 <__kernel_rem_pio2+0x590>
 8004d64:	e8df f003 	tbb	[pc, r3]
 8004d68:	0226264b 	.word	0x0226264b
 8004d6c:	ab98      	add	r3, sp, #608	; 0x260
 8004d6e:	441d      	add	r5, r3
 8004d70:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8004d74:	462e      	mov	r6, r5
 8004d76:	46a2      	mov	sl, r4
 8004d78:	f1ba 0f00 	cmp.w	sl, #0
 8004d7c:	dc6e      	bgt.n	8004e5c <__kernel_rem_pio2+0x5cc>
 8004d7e:	462e      	mov	r6, r5
 8004d80:	46a2      	mov	sl, r4
 8004d82:	f1ba 0f01 	cmp.w	sl, #1
 8004d86:	f300 808a 	bgt.w	8004e9e <__kernel_rem_pio2+0x60e>
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	2c01      	cmp	r4, #1
 8004d90:	f300 80a6 	bgt.w	8004ee0 <__kernel_rem_pio2+0x650>
 8004d94:	f1bb 0f00 	cmp.w	fp, #0
 8004d98:	f040 80a8 	bne.w	8004eec <__kernel_rem_pio2+0x65c>
 8004d9c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8004da0:	9c02      	ldr	r4, [sp, #8]
 8004da2:	e9c4 2300 	strd	r2, r3, [r4]
 8004da6:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8004daa:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8004dae:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004db2:	e035      	b.n	8004e20 <__kernel_rem_pio2+0x590>
 8004db4:	3508      	adds	r5, #8
 8004db6:	ab48      	add	r3, sp, #288	; 0x120
 8004db8:	441d      	add	r5, r3
 8004dba:	4626      	mov	r6, r4
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	2e00      	cmp	r6, #0
 8004dc2:	da3c      	bge.n	8004e3e <__kernel_rem_pio2+0x5ae>
 8004dc4:	f1bb 0f00 	cmp.w	fp, #0
 8004dc8:	d03f      	beq.n	8004e4a <__kernel_rem_pio2+0x5ba>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004dd0:	9d02      	ldr	r5, [sp, #8]
 8004dd2:	e9c5 2300 	strd	r2, r3, [r5]
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004dde:	f7fb f9f7 	bl	80001d0 <__aeabi_dsub>
 8004de2:	ae4a      	add	r6, sp, #296	; 0x128
 8004de4:	2501      	movs	r5, #1
 8004de6:	42ac      	cmp	r4, r5
 8004de8:	da32      	bge.n	8004e50 <__kernel_rem_pio2+0x5c0>
 8004dea:	f1bb 0f00 	cmp.w	fp, #0
 8004dee:	d002      	beq.n	8004df6 <__kernel_rem_pio2+0x566>
 8004df0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004df4:	4619      	mov	r1, r3
 8004df6:	9b02      	ldr	r3, [sp, #8]
 8004df8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004dfc:	e010      	b.n	8004e20 <__kernel_rem_pio2+0x590>
 8004dfe:	ab98      	add	r3, sp, #608	; 0x260
 8004e00:	441d      	add	r5, r3
 8004e02:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8004e06:	2000      	movs	r0, #0
 8004e08:	2100      	movs	r1, #0
 8004e0a:	2c00      	cmp	r4, #0
 8004e0c:	da11      	bge.n	8004e32 <__kernel_rem_pio2+0x5a2>
 8004e0e:	f1bb 0f00 	cmp.w	fp, #0
 8004e12:	d002      	beq.n	8004e1a <__kernel_rem_pio2+0x58a>
 8004e14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e18:	4619      	mov	r1, r3
 8004e1a:	9b02      	ldr	r3, [sp, #8]
 8004e1c:	e9c3 0100 	strd	r0, r1, [r3]
 8004e20:	9b03      	ldr	r3, [sp, #12]
 8004e22:	f003 0007 	and.w	r0, r3, #7
 8004e26:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004e2a:	ecbd 8b02 	vpop	{d8}
 8004e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e32:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004e36:	f7fb f9cd 	bl	80001d4 <__adddf3>
 8004e3a:	3c01      	subs	r4, #1
 8004e3c:	e7e5      	b.n	8004e0a <__kernel_rem_pio2+0x57a>
 8004e3e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004e42:	f7fb f9c7 	bl	80001d4 <__adddf3>
 8004e46:	3e01      	subs	r6, #1
 8004e48:	e7ba      	b.n	8004dc0 <__kernel_rem_pio2+0x530>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	e7bf      	b.n	8004dd0 <__kernel_rem_pio2+0x540>
 8004e50:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004e54:	f7fb f9be 	bl	80001d4 <__adddf3>
 8004e58:	3501      	adds	r5, #1
 8004e5a:	e7c4      	b.n	8004de6 <__kernel_rem_pio2+0x556>
 8004e5c:	ed16 7b02 	vldr	d7, [r6, #-8]
 8004e60:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8004e64:	ec53 2b17 	vmov	r2, r3, d7
 8004e68:	4640      	mov	r0, r8
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	ed8d 7b00 	vstr	d7, [sp]
 8004e70:	f7fb f9b0 	bl	80001d4 <__adddf3>
 8004e74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4640      	mov	r0, r8
 8004e7e:	4649      	mov	r1, r9
 8004e80:	f7fb f9a6 	bl	80001d0 <__aeabi_dsub>
 8004e84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e88:	f7fb f9a4 	bl	80001d4 <__adddf3>
 8004e8c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004e90:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8004e94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e98:	ed06 7b02 	vstr	d7, [r6, #-8]
 8004e9c:	e76c      	b.n	8004d78 <__kernel_rem_pio2+0x4e8>
 8004e9e:	ed16 7b02 	vldr	d7, [r6, #-8]
 8004ea2:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8004ea6:	ec53 2b17 	vmov	r2, r3, d7
 8004eaa:	4640      	mov	r0, r8
 8004eac:	4649      	mov	r1, r9
 8004eae:	ed8d 7b00 	vstr	d7, [sp]
 8004eb2:	f7fb f98f 	bl	80001d4 <__adddf3>
 8004eb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	f7fb f985 	bl	80001d0 <__aeabi_dsub>
 8004ec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004eca:	f7fb f983 	bl	80001d4 <__adddf3>
 8004ece:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004ed2:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8004ed6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004eda:	ed06 7b02 	vstr	d7, [r6, #-8]
 8004ede:	e750      	b.n	8004d82 <__kernel_rem_pio2+0x4f2>
 8004ee0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004ee4:	f7fb f976 	bl	80001d4 <__adddf3>
 8004ee8:	3c01      	subs	r4, #1
 8004eea:	e750      	b.n	8004d8e <__kernel_rem_pio2+0x4fe>
 8004eec:	9a02      	ldr	r2, [sp, #8]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6110      	str	r0, [r2, #16]
 8004ef6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004efa:	6053      	str	r3, [r2, #4]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	6093      	str	r3, [r2, #8]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f06:	60d3      	str	r3, [r2, #12]
 8004f08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f0c:	6153      	str	r3, [r2, #20]
 8004f0e:	e787      	b.n	8004e20 <__kernel_rem_pio2+0x590>
 8004f10:	00000000 	.word	0x00000000
 8004f14:	3ff00000 	.word	0x3ff00000
	...
 8004f20:	08005470 	.word	0x08005470
 8004f24:	41700000 	.word	0x41700000
 8004f28:	3e700000 	.word	0x3e700000
 8004f2c:	00000000 	.word	0x00000000

08004f30 <__kernel_sin>:
 8004f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f34:	ec55 4b10 	vmov	r4, r5, d0
 8004f38:	b085      	sub	sp, #20
 8004f3a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004f3e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004f42:	ed8d 1b00 	vstr	d1, [sp]
 8004f46:	9002      	str	r0, [sp, #8]
 8004f48:	da06      	bge.n	8004f58 <__kernel_sin+0x28>
 8004f4a:	ee10 0a10 	vmov	r0, s0
 8004f4e:	4629      	mov	r1, r5
 8004f50:	f7fb fd8c 	bl	8000a6c <__aeabi_d2iz>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d051      	beq.n	8004ffc <__kernel_sin+0xcc>
 8004f58:	4622      	mov	r2, r4
 8004f5a:	462b      	mov	r3, r5
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	4629      	mov	r1, r5
 8004f60:	f7fb faea 	bl	8000538 <__aeabi_dmul>
 8004f64:	4682      	mov	sl, r0
 8004f66:	468b      	mov	fp, r1
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	4629      	mov	r1, r5
 8004f70:	f7fb fae2 	bl	8000538 <__aeabi_dmul>
 8004f74:	a341      	add	r3, pc, #260	; (adr r3, 800507c <__kernel_sin+0x14c>)
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	4680      	mov	r8, r0
 8004f7c:	4689      	mov	r9, r1
 8004f7e:	4650      	mov	r0, sl
 8004f80:	4659      	mov	r1, fp
 8004f82:	f7fb fad9 	bl	8000538 <__aeabi_dmul>
 8004f86:	a33f      	add	r3, pc, #252	; (adr r3, 8005084 <__kernel_sin+0x154>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f7fb f920 	bl	80001d0 <__aeabi_dsub>
 8004f90:	4652      	mov	r2, sl
 8004f92:	465b      	mov	r3, fp
 8004f94:	f7fb fad0 	bl	8000538 <__aeabi_dmul>
 8004f98:	a33c      	add	r3, pc, #240	; (adr r3, 800508c <__kernel_sin+0x15c>)
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	f7fb f919 	bl	80001d4 <__adddf3>
 8004fa2:	4652      	mov	r2, sl
 8004fa4:	465b      	mov	r3, fp
 8004fa6:	f7fb fac7 	bl	8000538 <__aeabi_dmul>
 8004faa:	a33a      	add	r3, pc, #232	; (adr r3, 8005094 <__kernel_sin+0x164>)
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f7fb f90e 	bl	80001d0 <__aeabi_dsub>
 8004fb4:	4652      	mov	r2, sl
 8004fb6:	465b      	mov	r3, fp
 8004fb8:	f7fb fabe 	bl	8000538 <__aeabi_dmul>
 8004fbc:	a337      	add	r3, pc, #220	; (adr r3, 800509c <__kernel_sin+0x16c>)
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f7fb f907 	bl	80001d4 <__adddf3>
 8004fc6:	9b02      	ldr	r3, [sp, #8]
 8004fc8:	4606      	mov	r6, r0
 8004fca:	460f      	mov	r7, r1
 8004fcc:	b9db      	cbnz	r3, 8005006 <__kernel_sin+0xd6>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4650      	mov	r0, sl
 8004fd4:	4659      	mov	r1, fp
 8004fd6:	f7fb faaf 	bl	8000538 <__aeabi_dmul>
 8004fda:	a325      	add	r3, pc, #148	; (adr r3, 8005070 <__kernel_sin+0x140>)
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	f7fb f8f6 	bl	80001d0 <__aeabi_dsub>
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	f7fb faa6 	bl	8000538 <__aeabi_dmul>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	f7fb f8ee 	bl	80001d4 <__adddf3>
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	460d      	mov	r5, r1
 8004ffc:	ec45 4b10 	vmov	d0, r4, r5
 8005000:	b005      	add	sp, #20
 8005002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005006:	2200      	movs	r2, #0
 8005008:	4b1b      	ldr	r3, [pc, #108]	; (8005078 <__kernel_sin+0x148>)
 800500a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800500e:	f7fb fa93 	bl	8000538 <__aeabi_dmul>
 8005012:	4632      	mov	r2, r6
 8005014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005018:	463b      	mov	r3, r7
 800501a:	4640      	mov	r0, r8
 800501c:	4649      	mov	r1, r9
 800501e:	f7fb fa8b 	bl	8000538 <__aeabi_dmul>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800502a:	f7fb f8d1 	bl	80001d0 <__aeabi_dsub>
 800502e:	4652      	mov	r2, sl
 8005030:	465b      	mov	r3, fp
 8005032:	f7fb fa81 	bl	8000538 <__aeabi_dmul>
 8005036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800503a:	f7fb f8c9 	bl	80001d0 <__aeabi_dsub>
 800503e:	a30c      	add	r3, pc, #48	; (adr r3, 8005070 <__kernel_sin+0x140>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	4606      	mov	r6, r0
 8005046:	460f      	mov	r7, r1
 8005048:	4640      	mov	r0, r8
 800504a:	4649      	mov	r1, r9
 800504c:	f7fb fa74 	bl	8000538 <__aeabi_dmul>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4630      	mov	r0, r6
 8005056:	4639      	mov	r1, r7
 8005058:	f7fb f8bc 	bl	80001d4 <__adddf3>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4620      	mov	r0, r4
 8005062:	4629      	mov	r1, r5
 8005064:	f7fb f8b4 	bl	80001d0 <__aeabi_dsub>
 8005068:	e7c6      	b.n	8004ff8 <__kernel_sin+0xc8>
 800506a:	bf00      	nop
 800506c:	f3af 8000 	nop.w
 8005070:	55555549 	.word	0x55555549
 8005074:	3fc55555 	.word	0x3fc55555
 8005078:	3fe00000 	.word	0x3fe00000
 800507c:	5acfd57c 	.word	0x5acfd57c
 8005080:	3de5d93a 	.word	0x3de5d93a
 8005084:	8a2b9ceb 	.word	0x8a2b9ceb
 8005088:	3e5ae5e6 	.word	0x3e5ae5e6
 800508c:	57b1fe7d 	.word	0x57b1fe7d
 8005090:	3ec71de3 	.word	0x3ec71de3
 8005094:	19c161d5 	.word	0x19c161d5
 8005098:	3f2a01a0 	.word	0x3f2a01a0
 800509c:	1110f8a6 	.word	0x1110f8a6
 80050a0:	3f811111 	.word	0x3f811111

080050a4 <fabs>:
 80050a4:	ec53 2b10 	vmov	r2, r3, d0
 80050a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050ac:	ec43 2b10 	vmov	d0, r2, r3
 80050b0:	4770      	bx	lr
 80050b2:	0000      	movs	r0, r0
 80050b4:	0000      	movs	r0, r0
	...

080050b8 <floor>:
 80050b8:	ec51 0b10 	vmov	r0, r1, d0
 80050bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80050c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80050c8:	2e13      	cmp	r6, #19
 80050ca:	ee10 8a10 	vmov	r8, s0
 80050ce:	460c      	mov	r4, r1
 80050d0:	ee10 5a10 	vmov	r5, s0
 80050d4:	dc35      	bgt.n	8005142 <floor+0x8a>
 80050d6:	2e00      	cmp	r6, #0
 80050d8:	da17      	bge.n	800510a <floor+0x52>
 80050da:	a335      	add	r3, pc, #212	; (adr r3, 80051b0 <floor+0xf8>)
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	f7fb f878 	bl	80001d4 <__adddf3>
 80050e4:	2200      	movs	r2, #0
 80050e6:	2300      	movs	r3, #0
 80050e8:	f7fb fcb6 	bl	8000a58 <__aeabi_dcmpgt>
 80050ec:	b150      	cbz	r0, 8005104 <floor+0x4c>
 80050ee:	2c00      	cmp	r4, #0
 80050f0:	da5a      	bge.n	80051a8 <floor+0xf0>
 80050f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80050f6:	ea53 0308 	orrs.w	r3, r3, r8
 80050fa:	4b2f      	ldr	r3, [pc, #188]	; (80051b8 <floor+0x100>)
 80050fc:	f04f 0500 	mov.w	r5, #0
 8005100:	bf18      	it	ne
 8005102:	461c      	movne	r4, r3
 8005104:	4621      	mov	r1, r4
 8005106:	4628      	mov	r0, r5
 8005108:	e025      	b.n	8005156 <floor+0x9e>
 800510a:	4f2c      	ldr	r7, [pc, #176]	; (80051bc <floor+0x104>)
 800510c:	4137      	asrs	r7, r6
 800510e:	ea01 0307 	and.w	r3, r1, r7
 8005112:	4303      	orrs	r3, r0
 8005114:	d01f      	beq.n	8005156 <floor+0x9e>
 8005116:	a326      	add	r3, pc, #152	; (adr r3, 80051b0 <floor+0xf8>)
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	f7fb f85a 	bl	80001d4 <__adddf3>
 8005120:	2200      	movs	r2, #0
 8005122:	2300      	movs	r3, #0
 8005124:	f7fb fc98 	bl	8000a58 <__aeabi_dcmpgt>
 8005128:	2800      	cmp	r0, #0
 800512a:	d0eb      	beq.n	8005104 <floor+0x4c>
 800512c:	2c00      	cmp	r4, #0
 800512e:	bfbe      	ittt	lt
 8005130:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005134:	fa43 f606 	asrlt.w	r6, r3, r6
 8005138:	19a4      	addlt	r4, r4, r6
 800513a:	ea24 0407 	bic.w	r4, r4, r7
 800513e:	2500      	movs	r5, #0
 8005140:	e7e0      	b.n	8005104 <floor+0x4c>
 8005142:	2e33      	cmp	r6, #51	; 0x33
 8005144:	dd0b      	ble.n	800515e <floor+0xa6>
 8005146:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800514a:	d104      	bne.n	8005156 <floor+0x9e>
 800514c:	ee10 2a10 	vmov	r2, s0
 8005150:	460b      	mov	r3, r1
 8005152:	f7fb f83f 	bl	80001d4 <__adddf3>
 8005156:	ec41 0b10 	vmov	d0, r0, r1
 800515a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800515e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005162:	f04f 33ff 	mov.w	r3, #4294967295
 8005166:	fa23 f707 	lsr.w	r7, r3, r7
 800516a:	4238      	tst	r0, r7
 800516c:	d0f3      	beq.n	8005156 <floor+0x9e>
 800516e:	a310      	add	r3, pc, #64	; (adr r3, 80051b0 <floor+0xf8>)
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	f7fb f82e 	bl	80001d4 <__adddf3>
 8005178:	2200      	movs	r2, #0
 800517a:	2300      	movs	r3, #0
 800517c:	f7fb fc6c 	bl	8000a58 <__aeabi_dcmpgt>
 8005180:	2800      	cmp	r0, #0
 8005182:	d0bf      	beq.n	8005104 <floor+0x4c>
 8005184:	2c00      	cmp	r4, #0
 8005186:	da02      	bge.n	800518e <floor+0xd6>
 8005188:	2e14      	cmp	r6, #20
 800518a:	d103      	bne.n	8005194 <floor+0xdc>
 800518c:	3401      	adds	r4, #1
 800518e:	ea25 0507 	bic.w	r5, r5, r7
 8005192:	e7b7      	b.n	8005104 <floor+0x4c>
 8005194:	2301      	movs	r3, #1
 8005196:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800519a:	fa03 f606 	lsl.w	r6, r3, r6
 800519e:	4435      	add	r5, r6
 80051a0:	45a8      	cmp	r8, r5
 80051a2:	bf88      	it	hi
 80051a4:	18e4      	addhi	r4, r4, r3
 80051a6:	e7f2      	b.n	800518e <floor+0xd6>
 80051a8:	2500      	movs	r5, #0
 80051aa:	462c      	mov	r4, r5
 80051ac:	e7aa      	b.n	8005104 <floor+0x4c>
 80051ae:	bf00      	nop
 80051b0:	8800759c 	.word	0x8800759c
 80051b4:	7e37e43c 	.word	0x7e37e43c
 80051b8:	bff00000 	.word	0xbff00000
 80051bc:	000fffff 	.word	0x000fffff

080051c0 <scalbn>:
 80051c0:	b570      	push	{r4, r5, r6, lr}
 80051c2:	ec55 4b10 	vmov	r4, r5, d0
 80051c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80051ca:	4606      	mov	r6, r0
 80051cc:	462b      	mov	r3, r5
 80051ce:	b9b2      	cbnz	r2, 80051fe <scalbn+0x3e>
 80051d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80051d4:	4323      	orrs	r3, r4
 80051d6:	d03c      	beq.n	8005252 <scalbn+0x92>
 80051d8:	2200      	movs	r2, #0
 80051da:	4b33      	ldr	r3, [pc, #204]	; (80052a8 <scalbn+0xe8>)
 80051dc:	4629      	mov	r1, r5
 80051de:	ee10 0a10 	vmov	r0, s0
 80051e2:	f7fb f9a9 	bl	8000538 <__aeabi_dmul>
 80051e6:	4a31      	ldr	r2, [pc, #196]	; (80052ac <scalbn+0xec>)
 80051e8:	4296      	cmp	r6, r2
 80051ea:	4604      	mov	r4, r0
 80051ec:	460d      	mov	r5, r1
 80051ee:	460b      	mov	r3, r1
 80051f0:	da13      	bge.n	800521a <scalbn+0x5a>
 80051f2:	a329      	add	r3, pc, #164	; (adr r3, 8005298 <scalbn+0xd8>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f7fb f99e 	bl	8000538 <__aeabi_dmul>
 80051fc:	e00a      	b.n	8005214 <scalbn+0x54>
 80051fe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005202:	428a      	cmp	r2, r1
 8005204:	d10c      	bne.n	8005220 <scalbn+0x60>
 8005206:	ee10 2a10 	vmov	r2, s0
 800520a:	462b      	mov	r3, r5
 800520c:	4620      	mov	r0, r4
 800520e:	4629      	mov	r1, r5
 8005210:	f7fa ffe0 	bl	80001d4 <__adddf3>
 8005214:	4604      	mov	r4, r0
 8005216:	460d      	mov	r5, r1
 8005218:	e01b      	b.n	8005252 <scalbn+0x92>
 800521a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800521e:	3a36      	subs	r2, #54	; 0x36
 8005220:	4432      	add	r2, r6
 8005222:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005226:	428a      	cmp	r2, r1
 8005228:	dd0b      	ble.n	8005242 <scalbn+0x82>
 800522a:	ec45 4b11 	vmov	d1, r4, r5
 800522e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80052a0 <scalbn+0xe0>
 8005232:	f000 f83f 	bl	80052b4 <copysign>
 8005236:	a31a      	add	r3, pc, #104	; (adr r3, 80052a0 <scalbn+0xe0>)
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	ec51 0b10 	vmov	r0, r1, d0
 8005240:	e7da      	b.n	80051f8 <scalbn+0x38>
 8005242:	2a00      	cmp	r2, #0
 8005244:	dd08      	ble.n	8005258 <scalbn+0x98>
 8005246:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800524a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800524e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005252:	ec45 4b10 	vmov	d0, r4, r5
 8005256:	bd70      	pop	{r4, r5, r6, pc}
 8005258:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800525c:	da0d      	bge.n	800527a <scalbn+0xba>
 800525e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005262:	429e      	cmp	r6, r3
 8005264:	ec45 4b11 	vmov	d1, r4, r5
 8005268:	dce1      	bgt.n	800522e <scalbn+0x6e>
 800526a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8005298 <scalbn+0xd8>
 800526e:	f000 f821 	bl	80052b4 <copysign>
 8005272:	a309      	add	r3, pc, #36	; (adr r3, 8005298 <scalbn+0xd8>)
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	e7e0      	b.n	800523c <scalbn+0x7c>
 800527a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800527e:	3236      	adds	r2, #54	; 0x36
 8005280:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005284:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005288:	4620      	mov	r0, r4
 800528a:	4629      	mov	r1, r5
 800528c:	2200      	movs	r2, #0
 800528e:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <scalbn+0xf0>)
 8005290:	e7b2      	b.n	80051f8 <scalbn+0x38>
 8005292:	bf00      	nop
 8005294:	f3af 8000 	nop.w
 8005298:	c2f8f359 	.word	0xc2f8f359
 800529c:	01a56e1f 	.word	0x01a56e1f
 80052a0:	8800759c 	.word	0x8800759c
 80052a4:	7e37e43c 	.word	0x7e37e43c
 80052a8:	43500000 	.word	0x43500000
 80052ac:	ffff3cb0 	.word	0xffff3cb0
 80052b0:	3c900000 	.word	0x3c900000

080052b4 <copysign>:
 80052b4:	ec53 2b10 	vmov	r2, r3, d0
 80052b8:	ee11 0a90 	vmov	r0, s3
 80052bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80052c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80052c4:	ea41 0300 	orr.w	r3, r1, r0
 80052c8:	ec43 2b10 	vmov	d0, r2, r3
 80052cc:	4770      	bx	lr
	...

080052d0 <_init>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	bf00      	nop
 80052d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d6:	bc08      	pop	{r3}
 80052d8:	469e      	mov	lr, r3
 80052da:	4770      	bx	lr

080052dc <_fini>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	bf00      	nop
 80052e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e2:	bc08      	pop	{r3}
 80052e4:	469e      	mov	lr, r3
 80052e6:	4770      	bx	lr
